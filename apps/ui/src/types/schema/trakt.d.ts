/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/oauth/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Authorize Application
         * @description Construct then redirect to this URL. The Trakt website will request permissions for your app, which the user needs to approve. If the user isn't signed into Trakt, it will ask them to do so.
         *
         *     > ### ☣️ 🅸🅼🅿🅾🆁🆃🅰🅽🆃
         *     > _Use the website **https://trakt.tv** hostname when creating this URL and not the API URL._
         *
         *     #### Optional URL Parameters
         *
         *     When building the authorization URL, you can optionally include the following query parameters in the URL.
         *
         *     | Parameter | Value | Description |
         *     |---|---|---|
         *     | `signup` | `true` | Prefer the account sign up page to be the default. |
         *     | `prompt` | `login` | Force the user to sign in and authorize your app. |
         */
        get: operations["Authorize Application"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Exchange refresh_token for access_token
         * @description Use the `refresh_token` to get a new `access_token` without asking the user to re-authenticate. The `access_token` is valid for **24 hours** before it needs to be refreshed again.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `refresh_token` <span style="color:red;">*</a> | string | Saved from the initial token method. |
         *     | `client_id` <span style="color:red;">*</a> | string | Get this from your app settings. |
         *     | `client_secret` <span style="color:red;">*</a> | string | Get this from your app settings. |
         *     | `redirect_uri` <span style="color:red;">*</a> | string | URI specified in your app settings. |
         *     | `grant_type` <span style="color:red;">* </a> | string | `refresh_token` |
         */
        post: operations["Exchange refresh_token for access_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revoke an access_token
         * @description An `access_token` can be revoked when a user signs out of their Trakt account in your app. This is not required, but might improve the user experience so the user doesn't have an unused app connection hanging around.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `token` <span style="color:red;">*</a> | string | A valid OAuth `access_token`. |
         *     | `client_id` <span style="color:red;">*</a> | string | Get this from your app settings. |
         *     | `client_secret` <span style="color:red;">*</a> | string | Get this from your app settings. |
         */
        post: operations["Revoke an access_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/device/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate new device codes
         * @description Generate new codes to start the device authentication process. The `device_code` and `interval` will be used later to poll for the `access_token`. The `user_code` and `verification_url` should be presented to the user as mentioned in the flow steps above.
         *
         *     #### QR Code
         *
         *     You might consider generating a QR code for the user to easily scan on their mobile device. The QR code should be a URL that redirects to the `verification_url` and appends the `user_code`. For example, `https://trakt.tv/activate/5055CC52` would load the Trakt hosted `verification_url` and pre-fill in the `user_code`.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `client_id` <span style="color:red;">*</a> | string | Get this from your app settings. |
         */
        post: operations["Generate new device codes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/device/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Poll for the access_token
         * @description Use the `device_code` and poll at the `interval` (in seconds) to check if the user has authorized you app. Use `expires_in` to stop polling after that many seconds, and gracefully instruct the user to restart the process. **It is important to poll at the correct interval and also stop polling when expired.**
         *
         *     When you receive a `200` success response, save the `access_token` so your app can authenticate the user in methods that require it. The `access_token` is valid for **24 hours**. Save and use the `refresh_token` to get a new `access_token` without asking the user to re-authenticate. Check below for all the error codes that you should handle.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `code` <span style="color:red;">*</a> | string | `device_code` from the initial method. |
         *     | `client_id` <span style="color:red;">*</a> | string | Get this from your app settings. |
         *     | `client_secret` <span style="color:red;">*</a> | string | Get this from your app settings. |
         *
         *     #### Status Codes
         *
         *     This method will send various HTTP status codes that you should handle accordingly.
         *
         *     | Code | Description |
         *     |---|---|
         *     | `200` | Success - *save the `access_token`*
         *     | `400` | Pending - *waiting for the user to authorize your app*
         *     | `404` | Not Found - *invalid `device_code`*
         *     | `409` | Already Used - *user already approved this code*
         *     | `410` | Expired - *the tokens have expired, restart the process*
         *     | `418` | Denied - *user explicitly denied this code*
         *     | `429` | Slow Down - *your app is polling too quickly*
         */
        post: operations["Poll for the access_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/my/shows/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get shows
         * @description #### &#128274; OAuth Required &#10024; Extended Info &#127898; Filters
         *
         *     Returns all shows airing during the time period specified.
         */
        get: operations["Get shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/my/shows/new/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get new shows
         * @description #### &#128274; OAuth Required &#10024; Extended Info &#127898; Filters
         *
         *     Returns all new show premieres (`series_premiere`) airing during the time period specified.
         */
        get: operations["Get new shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/my/shows/premieres/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get season premieres
         * @description #### &#128274; OAuth Required &#10024; Extended Info &#127898; Filters
         *
         *     Returns all show premieres (`mid_season_premiere`, `season_premiere`, `series_premiere`) airing during the time period specified.
         */
        get: operations["Get season premieres"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/my/shows/finales/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get finales
         * @description #### &#128274; OAuth Required &#10024; Extended Info &#127898; Filters
         *
         *     Returns all show finales (`mid_season_finale`, `season_finale`, `series_finale`) airing during the time period specified.
         */
        get: operations["Get finales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/my/movies/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies
         * @description #### &#128274; OAuth Required &#10024; Extended Info &#127898; Filters
         *
         *     Returns all movies with a release date during the time period specified.
         */
        get: operations["Get movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/my/streaming/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get streaming releases
         * @description #### &#128274; OAuth Required &#10024; Extended Info &#127898; Filters
         *
         *     Returns all movies with a `us` streaming release date during the time period specified.
         */
        get: operations["Get streaming releases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/my/dvd/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get DVD releases
         * @description #### &#128274; OAuth Required &#10024; Extended Info &#127898; Filters
         *
         *     Returns all movies with a `us` DVD release date during the time period specified.
         */
        get: operations["Get DVD releases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/all/shows/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get shows
         * @description #### &#10024; Extended Info &#127898; Filters
         *
         *     Returns all shows airing during the time period specified.
         */
        get: operations["Get shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/all/shows/new/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get new shows
         * @description #### &#10024; Extended Info &#127898; Filters
         *
         *     Returns all new show premieres (`series_premiere`) airing during the time period specified.
         */
        get: operations["Get new shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/all/shows/premieres/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get season premieres
         * @description #### &#10024; Extended Info &#127898; Filters
         *
         *     Returns all show premieres (`mid_season_premiere`, `season_premiere`, `series_premiere`) airing during the time period specified.
         */
        get: operations["Get season premieres"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/all/shows/finales/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get finales
         * @description #### &#10024; Extended Info &#127898; Filters
         *
         *     Returns all show finales (`mid_season_finale`, `season_finale`, `series_finale`) airing during the time period specified.
         */
        get: operations["Get finales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/all/movies/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies
         * @description #### &#10024; Extended Info &#127898; Filters
         *
         *     Returns all movies with a release date during the time period specified.
         */
        get: operations["Get movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/all/streaming/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get streaming releases
         * @description #### &#10024; Extended Info &#127898; Filters
         *
         *     Returns all movies with a `us` streaming release date during the time period specified.
         */
        get: operations["Get streaming releases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/all/dvd/{start_date}/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get DVD releases
         * @description #### &#10024; Extended Info &#127898; Filters
         *
         *     Returns all movies with a `us` DVD release date during the time period specified.
         */
        get: operations["Get DVD releases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checkin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check into an item
         * @description #### &#128274; OAuth Required
         *
         *     Check into a movie or episode. This should be tied to a user action to manually indicate they are watching something. The item will display as *watching* on the site, then automatically switch to *watched* status once the duration has elapsed. A unique history `id` (64-bit integer) will be returned and can be used to reference this checkin directly.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | item <span style="color:red;">*</a> | object | `movie` or `episode` object. (see examples &#8594;) |
         *     | `sharing`  | object | Control sharing to any connected social networks. (see below &#8595;) |
         *     | `message`  | string | Message used for sharing. If not sent, it will use the watching string in the user settings. |
         *
         *     #### Sharing
         *
         *     The `sharing` object is optional and will apply the user's settings if not sent. If `sharing` is sent, each key will override the user's setting for that social network. Send `true` to post or `false` to not post on the indicated social network. You can see which social networks a user has connected with the [**\/users/settings**](/reference/users/settings) method.
         *
         *     | Key | Type |
         *     |---|---|
         *     | `twitter` | boolean |
         *     | `mastodon` | boolean |
         *     | `tumblr` | boolean |
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If a checkin is already in progress, a `409` HTTP status code will returned. The response will contain an `expires_at` timestamp which is when the user can check in again._
         */
        post: operations["Check into an item"];
        /**
         * Delete any active checkins
         * @description #### &#128274; OAuth Required
         *
         *     Removes any active checkins, no need to provide a specific item.
         */
        delete: operations["Delete any active checkins"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/certifications/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get certifications
         * @description Get a list of all certifications, including names, slugs, and descriptions.
         */
        get: operations["Get certifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Post a comment
         * @description #### &#128274; OAuth Required &#128513; Emojis
         *
         *     Add a new comment to a movie, show, season, episode, or list. Make sure to allow and encourage *spoilers* to be indicated in your app and follow the rules listed above.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Default | Value |
         *     |---|---|---|---|
         *     | item <span style="color:red;">*</a> | object | | `movie`, `show`, `season`, `episode`, or `list` object. (see examples &#8594;) |
         *     | `comment` <span style="color:red;">*</a> | string |  | Text for the comment. |
         *     | `spoiler` | boolean | `false` | Is this a spoiler? |
         *     | `sharing`  | object | | Control sharing to any connected social networks. (see below &#8595;) |
         *
         *     #### Sharing
         *
         *     The `sharing` object is optional and will apply the user's settings if not sent. If `sharing` is sent, each key will override the user's setting for that social network. Send `true` to post or `false` to not post on the indicated social network. You can see which social networks a user has connected with the [**\/users/settings**](/reference/users/settings) method.
         *
         *     | Key | Type |
         *     |---|---|
         *     | `twitter` | boolean |
         *     | `tumblr` | boolean |
         *     | `medium` | boolean |
         */
        post: operations["Post a comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a comment or reply
         * @description ####  &#128513; Emojis
         *
         *     Returns a single comment and indicates how many replies it has. Use [**\/comments/:id/replies**](/reference/comments/replies/) to get the actual replies.
         */
        get: operations["Get a comment or reply"];
        /**
         * Update a comment or reply
         * @description #### &#128274; OAuth Required &#128513; Emojis
         *
         *     Update a single comment. The OAuth user must match the author of the comment in order to update it. If not, a `401` HTTP status is returned.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Default | Value |
         *     |---|---|---|---|
         *     | `comment` | string |  | Text for the comment. |
         *     | `spoiler` | boolean | `false` | Is this a spoiler? |
         */
        put: operations["Update a comment or reply"];
        post?: never;
        /**
         * Delete a comment or reply
         * @description #### &#128274; OAuth Required
         *
         *     Delete a single comment. The OAuth user must match the author of the comment in order to delete it. If not, a `401` HTTP status code is returned. The comment must also be less than 2 weeks old or have 0 replies. If not, a `409` HTTP status is returned.
         */
        delete: operations["Delete a comment or reply"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/{id}/replies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get replies for a comment
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#128513; Emojis
         *
         *     Returns all replies for a comment. It is possible these replies could have replies themselves, so in that case you would just call [**\/comments/:id/replies**](/reference/comments/replies/) again with the new comment `id`.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If you send OAuth, replies from blocked users will be automatically filtered out._
         */
        get: operations["Get replies for a comment"];
        put?: never;
        /**
         * Post a reply for a comment
         * @description #### &#128274; OAuth Required &#128513; Emojis
         *
         *     Add a new reply to an existing comment. Make sure to allow and encourage *spoilers* to be indicated in your app and follow the rules listed above.
         *
         *     > ### 🅽🅾🆃🅴
         *     > Replies can only be added to top level comments. If you try to reply to a reply, a `404` HTTP status code is returned.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Default | Value |
         *     |---|---|---|---|
         *     | `comment` <span style="color:red;">*</a> | string |  | Text for the reply. |
         *     | `spoiler` | boolean | `false` | Is this a spoiler? |
         */
        post: operations["Post a reply for a comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/{id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the attached media item
         * @description #### &#10024; Extended Info
         *
         *     Returns the media item this comment is attached to. The media type can be `movie`, `show`, `season`, `episode`, or `list` and it also returns the standard media object for that media type.
         */
        get: operations["Get the attached media item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/{id}/likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users who liked a comment
         * @description #### &#128196; Pagination
         *
         *     Returns all users who liked a comment. If you only need the `replies` count, the main `comment` object already has that, so no need to use this method.
         */
        get: operations["Get all users who liked a comment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Like a comment
         * @description #### &#128274; OAuth Required
         *
         *     Votes help determine popular comments. Only one like is allowed per comment per user.
         */
        post: operations["Like a comment"];
        /**
         * Remove like on a comment
         * @description #### &#128274; OAuth Required
         *
         *     Remove a like on a comment.
         */
        delete: operations["Remove like on a comment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/trending/{comment_type}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get trending comments
         * @description #### &#128196; Pagination &#10024; Extended Info &#128513; Emojis
         *
         *     Returns all comments with the most likes and replies over the last 7 days. You can optionally filter by the `comment_type` and media `type` to limit what gets returned. If you want to `include_replies` that will return replies in place alongside top level comments.
         */
        get: operations["Get trending comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/recent/{comment_type}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently created comments
         * @description #### &#128196; Pagination &#10024; Extended Info &#128513; Emojis
         *
         *     Returns the most recently written comments across all of Trakt. You can optionally filter by the `comment_type` and media `type` to limit what gets returned. If you want to `include_replies` that will return replies in place alongside top level comments.
         */
        get: operations["Get recently created comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/updates/{comment_type}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently updated comments
         * @description #### &#128196; Pagination &#10024; Extended Info &#128513; Emojis
         *
         *     Returns the most recently updated comments across all of Trakt. You can optionally filter by the `comment_type` and media `type` to limit what gets returned. If you want to `include_replies` that will return replies in place alongside top level comments.
         */
        get: operations["Get recently updated comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/countries/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get countries
         * @description Get a list of all countries, including names and codes.
         */
        get: operations["Get countries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/genres/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get genres
         * @description Get a list of all genres, including names and slugs.
         *
         *     #### Subgenres
         *
         *     Send `?extended=subgenres` to get a list of subgenres for each genre. You can get more creative with advanced filters by using the subgenres in your app.
         */
        get: operations["Get genres"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/languages/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get languages
         * @description Get a list of all langauges, including names and codes.
         */
        get: operations["Get languages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/trending/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get trending lists
         * @description #### &#128196; Pagination &#128513; Emojis
         *
         *     Returns all lists with the most likes and comments over the last 7 days.
         */
        get: operations["Get trending lists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/popular/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular lists
         * @description #### &#128196; Pagination &#128513; Emojis
         *
         *     Returns the most popular lists. Popularity is calculated using total number of likes and comments.
         */
        get: operations["Get popular lists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list
         * @description #### &#128513; Emojis
         *
         *     Returns a single list. Use the [**\/lists/:id/items**](#reference/lists/list-items) method to get the actual items this list contains.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _You must use an integer `id`, and only public lists will return data._
         */
        get: operations["Get list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{id}/likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users who liked a list
         * @description #### &#128196; Pagination
         *
         *     Returns all users who liked a list.
         */
        get: operations["Get all users who liked a list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Like a list
         * @description #### &#128274; OAuth Required
         *
         *     Votes help determine popular lists. Only one like is allowed per list per user.
         */
        post: operations["Like a list"];
        /**
         * Remove like on a list
         * @description #### &#128274; OAuth Required
         *
         *     Remove a like on a list.
         */
        delete: operations["Remove like on a list"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{id}/items/{type}/{sort_by}/{sort_how}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get items on a list
         * @description #### 🔥 **VIP Enhanced** &#128196; Pagination Optional &#10024; Extended Info &#128513; Emojis
         *
         *     Get all items on a personal list. Items can be a `movie`, `show`, `season`, `episode`, or `person`. You can optionally specify the `type` parameter with a single value or comma delimited string for multiple item types.
         *
         *     #### Notes
         *
         *     Each list item contains a `notes` field with text entered by the user.
         *
         *     #### Sorting
         *
         *     Default sorting is based on the list defaults and sent in the `X-Sort-By` and `X-Sort-How` headers. If you specify the `sort_by` and `sort_how` parameters, the response will be sorted based on those values and sent in the `X-Applied-Sort-By` and `X-Applied-Sort-How` headers.
         *
         *     Some `sort_by` options are 🔥 **VIP Only** including `imdb_rating`, `tmdb_rating`, `rt_tomatometer`, `rt_audience`, `metascore`, `votes`, `imdb_votes`, and `tmdb_votes`. If sent for a non VIP, the items will fall back to  `rank`.
         */
        get: operations["Get items on a list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{id}/comments/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all list comments
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#128513; Emojis
         *
         *     Returns all top level comments for a list. By default, the `newest` comments are returned first. Other sorting options include `oldest`, most `likes`, and most `replies`.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If you send OAuth, comments from blocked users will be automatically filtered out._
         */
        get: operations["Get all list comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/trending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get trending movies
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most watched movies over the last 24 hours. Movies with the most `watchers` are returned first.
         */
        get: operations["Get trending movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular movies
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most popular movies. Popularity is calculated using the rating percentage and the number of ratings.
         */
        get: operations["Get popular movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/favorited/{period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most favorited movies
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most favorited movies in the specified time `period`, defaulting to `weekly`. All stats are relative to the specific time `period`.
         */
        get: operations["Get the most favorited movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/played/{period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most played movies
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most played (a single user can watch multiple times) movies in the specified time `period`, defaulting to `weekly`. All stats are relative to the specific time `period`.
         */
        get: operations["Get the most played movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/watched/{period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most watched movies
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most watched (unique users) movies in the specified time `period`, defaulting to `weekly`. All stats are relative to the specific time `period`.
         */
        get: operations["Get the most watched movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/collected/{period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most Collected movies
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most collected (unique users) movies in the specified time `period`, defaulting to `weekly`. All stats are relative to the specific time `period`.
         */
        get: operations["Get the most Collected movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/anticipated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most anticipated movies
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most anticipated movies based on the number of lists a movie appears on.
         */
        get: operations["Get the most anticipated movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/boxoffice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the weekend box office
         * @description #### &#10024; Extended Info
         *
         *     Returns the top 10 grossing movies in the U.S. box office last weekend. Updated every Monday morning.
         */
        get: operations["Get the weekend box office"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/updates/{start_date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently updated movies
         * @description #### &#128196; Pagination &#10024; Extended Info
         *
         *     Returns all movies updated since the specified UTC date and time. We recommended storing the `X-Start-Date` header you can be efficient using this method moving forward. By default, `10` results are returned. You can send a `limit` to get up to `100` results per page.
         *
         *     > ### ☣️ 🅸🅼🅿🅾🆁🆃🅰🅽🆃
         *     > _The `start_date` is only accurate to the hour, for caching purposes. Please drop the minutes and seconds from your timestamp to help optimize our cached data. For example, use `2021-07-17T12:00:00Z` and not `2021-07-17T12:23:34Z`._
         *
         *     > ### 🅽🅾🆃🅴
         *     > _The `start_date` can only be a maximum of 30 days in the past._
         */
        get: operations["Get recently updated movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/updates/id/{start_date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently updated movie Trakt IDs
         * @description #### &#128196; Pagination
         *
         *     Returns all movie Trakt IDs updated since the specified UTC date and time. We recommended storing the `X-Start-Date` header you can be efficient using this method moving forward. By default, `10` results are returned. You can send a `limit` to get up to `100` results per page.
         *
         *     > ### ☣️ 🅸🅼🅿🅾🆁🆃🅰🅽🆃
         *     > _The `start_date` is only accurate to the hour, for caching purposes. Please drop the minutes and seconds from your timestamp to help optimize our cached data. For example, use `2021-07-17T12:00:00Z` and not `2021-07-17T12:23:34Z`._
         *
         *     > ### 🅽🅾🆃🅴
         *     > _The `start_date` can only be a maximum of 30 days in the past._
         */
        get: operations["Get recently updated movie Trakt IDs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a movie
         * @description #### &#10024; Extended Info
         *
         *     Returns a single movie's details.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _When getting `full` extended info, the `status` field can have a value of `released`, `in production`, `post production`, `planned`, `rumored`, or `canceled`._
         */
        get: operations["Get a movie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/aliases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all movie aliases
         * @description Returns all title aliases for a movie.  Includes country where name is different.
         */
        get: operations["Get all movie aliases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/releases/{country}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all movie releases
         * @description Returns all releases for a movie including country, certification, release date, release type, and note. The release type can be set to `unknown`, `premiere`, `limited`, `theatrical`, `digital`, `physical`, or `tv`. The `note` might have optional info such as the film festival name for a `premiere` release or Blu-ray specs for a `physical` release. We pull this info from [TMDB](https://developers.themoviedb.org/3/movies/get-movie-release-dates).
         */
        get: operations["Get all movie releases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/translations/{language}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all movie translations
         * @description Returns all translations for a movie, including language and translated values for title, tagline and overview.
         */
        get: operations["Get all movie translations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/comments/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all movie comments
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#128513; Emojis
         *
         *     Returns all top level comments for a movie. By default, the `newest` comments are returned first. Other sorting options include `oldest`, most `likes`, most `replies`, `highest` rated, `lowest` rated, and most `plays`.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If you send OAuth, comments from blocked users will be automatically filtered out._
         */
        get: operations["Get all movie comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/lists/{type}/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lists containing this movie
         * @description #### &#128196; Pagination &#128513; Emojis
         *
         *     Returns all lists that contain this movie. By default, `personal` lists are returned sorted by the most `popular`.
         */
        get: operations["Get lists containing this movie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/people": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all people for a movie
         * @description #### &#10024; Extended Info
         *
         *     Returns all `cast` and `crew` for a movie. Each `cast` member will have a `characters` array and a standard `person` object.
         *
         *     The `crew` object will be broken up by department into `production`, `art`, `crew`, `costume & make-up`, `directing`, `writing`, `sound`, `camera`, `visual effects`, `lighting`, and `editing` (if there are people for those crew positions). Each of those members will have a `jobs` array and a standard `person` object.
         */
        get: operations["Get all people for a movie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie ratings
         * @description Returns rating (between 0 and 10) and distribution for a movie.
         */
        get: operations["Get movie ratings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/related": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get related movies
         * @description #### &#128196; Pagination &#10024; Extended Info
         *
         *     Returns related and similar movies.
         */
        get: operations["Get related movies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie stats
         * @description Returns lots of movie stats.
         */
        get: operations["Get movie stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/studios": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie studios
         * @description Returns all studios for a movie.
         */
        get: operations["Get movie studios"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/watching": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get users watching right now
         * @description #### &#10024; Extended Info
         *
         *     Returns all users watching this movie right now.
         */
        get: operations["Get users watching right now"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all videos
         * @description #### &#10024; Extended Info
         *
         *     Returns all videos including trailers, teasers, clips, and featurettes.
         */
        get: operations["Get all videos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh movie metadata
         * @description #### 🔥 VIP Only &#128274; OAuth Required
         *
         *     Queue this movie for a full metadata and image refresh. It might take up to 8 hours for the updated metadata to be availabe through the API.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If this movie is already queued, a `409` HTTP status code will returned._
         */
        post: operations["Refresh movie metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get networks
         * @description Get a list of all TV networks, including the `name`, `country`, and `ids`.
         */
        get: operations["Get networks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add notes
         * @description #### 🔥 VIP Enhanced &#128274; OAuth Required &#128513; Emojis
         *
         *     Notes *(500 maximum characters)* added to a `movie`, `show`, `season`, `episode`, or `person` will automatically be set to `private`. You can send just the media item.
         *
         *     Notes *(500 maximum characters)* added to a `history`, `collection`, or `rating` can have their `privacy` and `spoiler` set. You need to send the `attached_to` object so we know where to attach the note.
         *
         *     #### Limits
         *
         *     If the user's note limit is exceeded, a `420` HTTP error code is returned. Use the [**\/users/settings**](/reference/users/settings) method to get all limits for a user account. Upgrading to [**Trakt VIP**](https://trakt.tv/vip) allows for unlimited notes.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Default | Value |
         *     |---|---|---|---|
         *     | item <span style="color:red;">*</a> | object | | `movie`, `show`, `season`, `episode`, `person`, 'history', 'collection', 'rating' object. (see examples &#8594;) |
         *     | `notes` <span style="color:red;">*</a> | string |  | Text for the notes. |
         *     | `spoiler` | boolean | `false` | Is this a spoiler? |
         *     | `privacy` | string | `private` | `private`, `friends`, `public` |
         */
        post: operations["Add notes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a note
         * @description #### &#128274; OAuth Required &#128513; Emojis
         *
         *     Returns a single note.
         */
        get: operations["Get a note"];
        /**
         * Update a note
         * @description #### &#128274; OAuth Required &#128513; Emojis
         *
         *     Update a single note *(500 maximum characters)*. The OAuth user must match the author of the note in order to update it. If not, a `401` HTTP status is returned.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Default | Value |
         *     |---|---|---|---|
         *     | `notes` | string |  | Text for the notes. |
         *     | `spoiler` | boolean | `false` | Is this a spoiler? |
         *     | `privacy` | string | `private` | `private`, `friends`, `public` |
         */
        put: operations["Update a note"];
        post?: never;
        /**
         * Delete a note
         * @description #### &#128274; OAuth Required
         *
         *     Delete a single note. The OAuth user must match the author of the comment in order to delete it. If not, a `401` HTTP status code is returned.
         */
        delete: operations["Delete a note"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the attached item
         * @description #### &#10024; Extended Info
         *
         *     Returns the item this note is `attached_to`. Media items like `movie`, `show`, `season`, `episode`, or `person` are straightforward, but `history` will need to be mapped to that specific play in their watched history since they might have multiple plays. Since `collection` and `rating` is a 1:1 association, you can assume the note is attached to the media item in the `type` field that has been collected or rated.
         */
        get: operations["Get the attached item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/updates/{start_date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently updated people
         * @description #### &#128196; Pagination &#10024; Extended Info
         *
         *     Returns all people updated since the specified UTC date and time. We recommended storing the `X-Start-Date` header you can be efficient using this method moving forward. By default, `10` results are returned. You can send a `limit` to get up to `100` results per page.
         *
         *     > ### ☣️ 🅸🅼🅿🅾🆁🆃🅰🅽🆃
         *     > _The `start_date` is only accurate to the hour, for caching purposes. Please drop the minutes and seconds from your timestamp to help optimize our cached data. For example, use `2021-07-17T12:00:00Z` and not `2021-07-17T12:23:34Z`._
         *
         *     > ### 🅽🅾🆃🅴
         *     > _The `start_date` can only be a maximum of 30 days in the past._
         */
        get: operations["Get recently updated people"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/updates/id/{start_date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently updated people Trakt IDs
         * @description #### &#128196; Pagination
         *
         *     Returns all people Trakt IDs updated since the specified UTC date and time. We recommended storing the `X-Start-Date` header you can be efficient using this method moving forward. By default, `10` results are returned. You can send a `limit` to get up to `100` results per page.
         *
         *     > ### ☣️ 🅸🅼🅿🅾🆁🆃🅰🅽🆃
         *     > _The `start_date` is only accurate to the hour, for caching purposes. Please drop the minutes and seconds from your timestamp to help optimize our cached data. For example, use `2021-07-17T12:00:00Z` and not `2021-07-17T12:23:34Z`._
         *
         *     > ### 🅽🅾🆃🅴
         *     > _The `start_date` can only be a maximum of 30 days in the past._
         */
        get: operations["Get recently updated people Trakt IDs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single person
         * @description #### &#10024; Extended Info
         *
         *     Returns a single person's details.
         *
         *     #### Gender
         *
         *     If available, the `gender` property will be set to `male`, `female`, or `non_binary`.
         *
         *     #### Known For Department
         *
         *     If available, the `known_for_department` property will be set to `production`, `art`, `crew`, `costume & make-up`, `directing`, `writing`, `sound`, `camera`, `visual effects`, `lighting`, or `editing`. Many people have credits across departments, `known_for` allows you to select their default credits more accurately.
         */
        get: operations["Get a single person"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{id}/movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie credits
         * @description #### &#10024; Extended Info
         *
         *     Returns all movies where this person is in the `cast` or `crew`. Each `cast` object will have a `characters` array and a standard `movie` object.
         *
         *     The `crew` object will be broken up by department into `production`, `art`, `crew`, `costume & make-up`, `directing`, `writing`, `sound`, `camera`, `visual effects`, `lighting`, and `editing` (if there are people for those crew positions). Each of those members will have a `jobs` array and a standard `movie` object.
         */
        get: operations["Get movie credits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{id}/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get show credits
         * @description #### &#10024; Extended Info
         *
         *     Returns all shows where this person is in the `cast` or `crew`, including the `episode_count` for which they appear. Each `cast` object will have a `characters` array and a standard `show` object. If `series_regular` is `true`, this person is a series regular and not simply a guest star.
         *
         *     The `crew` object will be broken up by department into `production`, `art`, `crew`, `costume & make-up`, `directing`, `writing`, `sound`, `camera`, `visual effects`, `lighting`, `editing`, and `created  by` (if there are people for those crew positions). Each of those members will have a `jobs` array and a standard `show` object.
         */
        get: operations["Get show credits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{id}/lists/{type}/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lists containing this person
         * @description #### &#128196; Pagination &#128513; Emojis
         *
         *     Returns all lists that contain this person. By default, `personal` lists are returned sorted by the most `popular`.
         */
        get: operations["Get lists containing this person"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{id}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh person metadata
         * @description #### 🔥 VIP Only &#128274; OAuth Required
         *
         *     Queue this person for a full metadata and image refresh. It might take up to 8 hours for the updated metadata to be availabe through the API.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If this person is already queued, a `409` HTTP status code will returned._
         */
        post: operations["Refresh person metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommendations/movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie recommendations
         * @description #### &#128274; OAuth Required &#10024; Extended Info
         *
         *     Movie recommendations for a user. By default, `10` results are returned. You can send a `limit` to get up to `100` results per page. Set `ignore_collected=true` to filter out movies the user has already collected or `ignore_watchlisted=true` to filter out movies the user has already watchlisted.
         *
         *     The `favorited_by` array contains all users who favorited the item along with any notes they added.
         */
        get: operations["Get movie recommendations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommendations/movies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Hide a movie recommendation
         * @description #### &#128274; OAuth Required
         *
         *     Hide a movie from getting recommended anymore.
         */
        delete: operations["Hide a movie recommendation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommendations/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get show recommendations
         * @description #### &#128274; OAuth Required &#10024; Extended Info
         *
         *     TV show recommendations for a user. By default, `10` results are returned. You can send a `limit` to get up to `100` results per page. Set `ignore_collected=true` to filter out shows the user has already collected or `ignore_watchlisted=true` to filter out shows the user has already watchlisted.
         *
         *     The `favorited_by` array contains all users who favorited the item along with any notes they added.
         */
        get: operations["Get show recommendations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommendations/shows/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Hide a show recommendation
         * @description #### &#128274; OAuth Required
         *
         *     Hide a show from getting recommended anymore.
         */
        delete: operations["Hide a show recommendation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scrobble/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start watching in a media center
         * @description #### &#128274; OAuth Required
         *
         *     Use this method when the video initially starts playing or is unpaused. This will remove any playback progress if it exists.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _A watching status will auto expire after the remaining runtime has elapsed. There is no need to call this method again while continuing to watch the same item._
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | item <span style="color:red;">*</a> | object | `movie` or `episode` object. (see examples &#8594;) |
         *     | `progress` <span style="color:red;">*</a> | float | Progress percentage between 0 and 100. |
         */
        post: operations["Start watching in a media center"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scrobble/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pause watching in a media center
         * @description #### &#128274; OAuth Required
         *
         *     Use this method when the video is paused. The playback progress will be saved and [**\/sync/playback**](/reference/sync/playback/) can be used to resume the video from this exact position. Unpause a video by calling the [**\/scrobble/start**](/reference/scrobble/start/) method again.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | item <span style="color:red;">*</a> | object | `movie` or `episode` object. (see examples &#8594;) |
         *     | `progress` <span style="color:red;">*</a> | float | Progress percentage between 0 and 100. |
         */
        post: operations["Pause watching in a media center"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scrobble/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop or finish watching in a media center
         * @description #### &#128274; OAuth Required
         *
         *     Use this method when the video is stopped or finishes playing on its own. If the progress is above 80%, the video will be scrobbled and the `action` will be set to **scrobble**. A unique history `id` (64-bit integer) will be returned and can be used to reference this `scrobble` directly.
         *
         *     If the progress is less than 80%, it will be treated as a *pause* and the `action` will be set to **pause**. The playback progress will be saved and [**\/sync/playback**](/reference/sync/playback/) can be used to resume the video from this exact position.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If you prefer to use a threshold higher than 80%, you should use [**\/scrobble/pause**](/reference/scrobble/pause/) yourself so it doesn't create duplicate scrobbles._
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | item <span style="color:red;">*</a> | object | `movie` or `episode` object. (see examples &#8594;) |
         *     | `progress` <span style="color:red;">*</a> | flloat | Progress percentage between 0 and 100. |
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If the same item was just scrobbled, a `409` HTTP status code will returned to avoid scrobbling a duplicate. The response will contain a `watched_at` timestamp when the item was last scrobbled and a `expires_at` timestamp when the item can be scrobbled again._
         */
        post: operations["Stop or finish watching in a media center"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get text query results
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Search all text fields that a media object contains (i.e. title, overview, etc). Results are ordered by the most relevant score. Specify the `type` of results by sending a single value or a comma delimited string for multiple types.
         *
         *     #### Special Characters
         *
         *     Our search engine gives the following characters special meaning when they appear in a query:
         *
         *     `+ - && || ! ( ) { } [ ] ^ " ~ * ? : /`
         *
         *     To interpret any of these characters literally (and not as a special character), precede the character with a backslash `\` character.
         *
         *     #### Search Fields
         *
         *     By default, certain text fields are used to search for the `query`. You can optionally specify the `fields` parameter with a single value or comma delimited string for multiple fields. Each `type` has specific `fields` that can be specified. This can be useful if you want to support more strict searches (i.e. title only).
         *
         *     | Type | Field | Default |
         *     |---|---|---|
         *     | `movie` | `title` | &#10003; |
         *     |  | `original_title` | &#10003; |
         *     |  | `translations` | &#10003; |
         *     |  | `aliases` | &#10003; |
         *     |  | `tagline` | |
         *     |  | `overview` | |
         *     |  | `people` | |
         *     | `show` | `title` | &#10003; |
         *     |  | `original_title` | &#10003; |
         *     |  | `translations` | &#10003; |
         *     |  | `aliases` | &#10003; |
         *     |  | `overview` | |
         *     |  | `people` | |
         *     | `episode` | `title` | &#10003; |
         *     |  | `show_title` | &#10003; |
         *     |  | `overview` | |
         *     | `person` | `name` | &#10003; |
         *     |  | `biography` | |
         *     | `list` | `name` | &#10003; |
         *     |  | `description` | &#10003; |
         */
        get: operations["Get text query results"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/{id_type}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ID lookup results
         * @description #### &#128196; Pagination &#10024; Extended Info
         *
         *     Lookup items by their Trakt, IMDB, TMDB, or TVDB ID. If you use the search url without a `type` it might return multiple items if the `id_type` is not globally unique. Specify the `type` of results by sending a single value or a comma delimited string for multiple types.
         *
         *     | Type | URL |
         *     |---|---|
         *     | `trakt` | `/search/trakt/:id` |
         *     |  | `/search/trakt/:id?type=movie` |
         *     |  | `/search/trakt/:id?type=show` |
         *     |  | `/search/trakt/:id?type=episode` |
         *     |  | `/search/trakt/:id?type=person` |
         *     | `imdb` | `/search/imdb/:id` |
         *     | `tmdb` | `/search/tmdb/:id` |
         *     |  | `/search/tmdb/:id?type=movie` |
         *     |  | `/search/tmdb/:id?type=show` |
         *     |  | `/search/tmdb/:id?type=episode` |
         *     |  | `/search/tmdb/:id?type=person` |
         *     | `tvdb` | `/search/tvdb/:id` |
         *     |  | `/search/tvdb/:id?type=show` |
         *     |  | `/search/tvdb/:id?type=episode` |
         */
        get: operations["Get ID lookup results"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/trending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get trending shows
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most watched shows over the last 24 hours. Shows with the most `watchers` are returned first.
         */
        get: operations["Get trending shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular shows
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most popular shows. Popularity is calculated using the rating percentage and the number of ratings.
         */
        get: operations["Get popular shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/favorited/{period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most favorited shows
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most favorited shows in the specified time `period`, defaulting to `weekly`. All stats are relative to the specific time `period`.
         */
        get: operations["Get the most favorited shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/played/{period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most played shows
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most played (a single user can watch multiple episodes multiple times) shows in the specified time `period`, defaulting to `weekly`. All stats are relative to the specific time `period`.
         */
        get: operations["Get the most played shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/watched/{period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most watched shows
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most watched (unique users) shows in the specified time `period`, defaulting to `weekly`. All stats are relative to the specific time `period`.
         */
        get: operations["Get the most watched shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/collected/{period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most collected shows
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most collected (unique users) shows in the specified time `period`, defaulting to `weekly`. All stats are relative to the specific time `period`.
         */
        get: operations["Get the most collected shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/anticipated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most anticipated shows
         * @description #### &#128196; Pagination &#10024; Extended Info &#127898; Filters
         *
         *     Returns the most anticipated shows based on the number of lists a show appears on.
         */
        get: operations["Get the most anticipated shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/updates/{start_date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently updated shows
         * @description #### &#128196; Pagination &#10024; Extended Info
         *
         *     Returns all shows updated since the specified UTC date and time. We recommended storing the `X-Start-Date` header you can be efficient using this method moving forward. By default, `10` results are returned. You can send a `limit` to get up to `100` results per page.
         *
         *     > ### ☣️ 🅸🅼🅿🅾🆁🆃🅰🅽🆃
         *     > _The `start_date` is only accurate to the hour, for caching purposes. Please drop the minutes and seconds from your timestamp to help optimize our cached data. For example, use `2021-07-17T12:00:00Z` and not `2021-07-17T12:23:34Z`._
         *
         *     > ### 🅽🅾🆃🅴
         *     > _The `start_date` can only be a maximum of 30 days in the past._
         */
        get: operations["Get recently updated shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/updates/id/{start_date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently updated show Trakt IDs
         * @description #### &#128196; Pagination
         *
         *     Returns all show Trakt IDs updated since the specified UTC date and time. We recommended storing the `X-Start-Date` header you can be efficient using this method moving forward. By default, `10` results are returned. You can send a `limit` to get up to `100` results per page.
         *
         *     > ### ☣️ 🅸🅼🅿🅾🆁🆃🅰🅽🆃
         *     > _The `start_date` is only accurate to the hour, for caching purposes. Please drop the minutes and seconds from your timestamp to help optimize our cached data. For example, use `2021-07-17T12:00:00Z` and not `2021-07-17T12:23:34Z`._
         *
         *     > ### 🅽🅾🆃🅴
         *     > _The `start_date` can only be a maximum of 30 days in the past._
         */
        get: operations["Get recently updated show Trakt IDs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single show
         * @description #### &#10024; Extended Info
         *
         *     Returns a single shows's details. If you request extended info, the `airs` object is relative to the show's country. You can use the `day`, `time`, and `timezone` to construct your own date then convert it to whatever timezone your user is in.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _When getting `full` extended info, the `status` field can have a value of `returning series` (airing right now),  `continuing` (airing right now), `in production` (airing soon), `planned` (in development), `upcoming` (in development),  `pilot`, `canceled`, or `ended`._
         */
        get: operations["Get a single show"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/aliases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all show aliases
         * @description Returns all title aliases for a show.  Includes country where name is different.
         */
        get: operations["Get all show aliases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/certifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all show certifications
         * @description Returns all content certifications for a show, including the country.
         */
        get: operations["Get all show certifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/translations/{language}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all show translations
         * @description Returns all translations for a show, including language and translated values for title and overview.
         */
        get: operations["Get all show translations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/comments/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all show comments
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#128513; Emojis
         *
         *     Returns all top level comments for a show. By default, the `newest` comments are returned first. Other sorting options include `oldest`, most `likes`, most `replies`, `highest` rated, `lowest` rated, most `plays`, and highest `watched` percentage.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If you send OAuth, comments from blocked users will be automatically filtered out._
         */
        get: operations["Get all show comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/lists/{type}/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lists containing this show
         * @description #### &#128196; Pagination &#128513; Emojis
         *
         *     Returns all lists that contain this show. By default, `personal` lists are returned sorted by the most `popular`.
         */
        get: operations["Get lists containing this show"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/progress/collection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get show collection progress
         * @description #### &#128274; OAuth Required
         *
         *     Returns collection progress for a show including details on all aired seasons and episodes. The `next_episode` will be the next episode the user should collect, if there are no upcoming episodes it will be set to `null`.
         *
         *     By default, any hidden seasons will be removed from the response and stats. To include these and adjust the completion stats, set the `hidden` flag to `true`.
         *
         *     By default, specials will be excluded from the response. Set the `specials` flag to `true` to include season 0 and adjust the stats accordingly. If you'd like to include specials, but not adjust the stats, set `count_specials` to `false`.
         *
         *     By default, the `last_episode` and `next_episode` are calculated using the last `aired` episode the user has collected, even if they've collected older episodes more recently. To use their last collected episode for these calculations, set the `last_activity` flag to `collected`.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _Only aired episodes are used to calculate progress. Episodes in the future or without an air date are ignored._
         */
        get: operations["Get show collection progress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/progress/watched": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get show watched progress
         * @description #### &#128274; OAuth Required
         *
         *     Returns watched progress for a show including details on all aired seasons and episodes. The `next_episode` will be the next episode the user should watch, if there are no upcoming episodes it will be set to `null`. If not `null`, the `reset_at` date is when the user started re-watching the show. Your app can adjust the progress by ignoring episodes with a `last_watched_at` prior to the `reset_at`.
         *
         *     By default, any hidden seasons will be removed from the response and stats. To include these and adjust the completion stats, set the `hidden` flag to `true`.
         *
         *     By default, specials will be excluded from the response. Set the `specials` flag to `true` to include season 0 and adjust the stats accordingly. If you'd like to include specials, but not adjust the stats, set `count_specials` to `false`.
         *
         *     By default, the `last_episode` and `next_episode` are calculated using the last `aired` episode the user has watched, even if they've watched older episodes more recently. To use their last watched episode for these calculations, set the `last_activity` flag to `watched`.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _Only aired episodes are used to calculate progress. Episodes in the future or without an air date are ignored._
         */
        get: operations["Get show watched progress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/progress/watched/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset show progress
         * @description #### 🔥 VIP Only &#128274; OAuth Required
         *
         *     Reset a show's progress when the user started re-watching the show. You can optionally specify the `reset_at` date to have it calculate progress from that specific date onwards.
         */
        post: operations["Reset show progress"];
        /**
         * Undo reset show progress
         * @description #### 🔥 VIP Only &#128274; OAuth Required
         *
         *     Undo the reset and have watched progress use all watched history for the show.
         */
        delete: operations["Undo reset show progress"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/people": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all people for a show
         * @description #### &#10024; Extended Info
         *
         *     Returns all `cast` and `crew` for a show, including the `episode_count` for which they appears. Each `cast` member will have a `characters` array and a standard `person` object.
         *
         *     The `crew` object will be broken up by department into `production`, `art`, `crew`, `costume & make-up`, `directing`, `writing`, `sound`, `camera`, `visual effects`, `lighting`, `editing`, and `created  by` (if there are people for those crew positions). Each of those members will have a `jobs` array and a standard `person` object.
         *
         *     #### Guest Stars
         *
         *     If you add `?extended=guest_stars` to the URL, it will return all guest stars that appeared in at least 1 episode of the show.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _This returns a lot of data, so please only use this extended parameter if you actually need it!_
         */
        get: operations["Get all people for a show"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get show ratings
         * @description Returns rating (between 0 and 10) and distribution for a show.
         */
        get: operations["Get show ratings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/related": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get related shows
         * @description #### &#128196; Pagination &#10024; Extended Info
         *
         *     Returns related and similar shows.
         */
        get: operations["Get related shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get show stats
         * @description Returns lots of show stats.
         */
        get: operations["Get show stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/studios": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get show studios
         * @description Returns all studios for a show.
         */
        get: operations["Get show studios"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/watching": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get users watching right now
         * @description #### &#10024; Extended Info
         *
         *     Returns all users watching this show right now.
         */
        get: operations["Get users watching right now"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/next_episode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get next episode
         * @description #### &#10024; Extended Info
         *
         *     Returns the next scheduled to air episode. If no episode is found, a `204` HTTP status code will be returned.
         */
        get: operations["Get next episode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/last_episode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get last episode
         * @description #### &#10024; Extended Info
         *
         *     Returns the most recently aired episode. If no episode is found, a `204` HTTP status code will be returned.
         */
        get: operations["Get last episode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all videos
         * @description #### &#10024; Extended Info
         *
         *     Returns all videos including trailers, teasers, clips, and featurettes.
         */
        get: operations["Get all videos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh show metadata
         * @description #### 🔥 VIP Only &#128274; OAuth Required
         *
         *     Queue this show for a full metadata and image refresh. It might take up to 8 hours for the updated metadata to be availabe through the API.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If this show is already queued, a `409` HTTP status code will returned._
         */
        post: operations["Refresh show metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all seasons for a show
         * @description #### &#10024; Extended Info
         *
         *     Returns all seasons for a show including the number of episodes in each season.
         *
         *     #### Episodes
         *
         *     If you add `?extended=episodes` to the URL, it will return all episodes for all seasons.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _This returns a lot of data, so please only use this extended parameter if you actually need it!_
         */
        get: operations["Get all seasons for a show"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single seasons for a show
         * @description #### &#10024; Extended Info
         *
         *     Returns a single seasons for a show.
         */
        get: operations["Get single seasons for a show"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all episodes for a single season
         * @description #### &#10024; Extended Info
         *
         *     Returns all episodes for a specific season of a show.
         *
         *     #### Translations
         *
         *     If you'd like to included translated episode titles and overviews in the response, include the `translations` parameter in the URL. Include all languages by setting the parameter to `all` or use a specific 2 digit country language code to further limit it.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _This returns a lot of data, so please only use this extended parameter if you actually need it!_
         */
        get: operations["Get all episodes for a single season"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/translations/{language}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all season translations
         * @description Returns all translations for an season, including language and translated values for title and overview.
         */
        get: operations["Get all season translations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/comments/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all season comments
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#128513; Emojis
         *
         *     Returns all top level comments for a season. By default, the `newest` comments are returned first. Other sorting options include `oldest`, most `likes`, most `replies`, `highest` rated, `lowest` rated, most `plays`, and highest `watched` percentage.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If you send OAuth, comments from blocked users will be automatically filtered out._
         */
        get: operations["Get all season comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/lists/{type}/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lists containing this season
         * @description #### &#128196; Pagination &#128513; Emojis
         *
         *     Returns all lists that contain this season. By default, `personal` lists are returned sorted by the most `popular`.
         */
        get: operations["Get lists containing this season"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/people": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all people for a season
         * @description #### &#10024; Extended Info
         *
         *     Returns all `cast` and `crew` for a season, including the `episode_count` for which they appear. Each `cast` member will have a `characters` array and a standard `person` object.
         *
         *     The `crew` object will be broken up by department into `production`, `art`, `crew`, `costume & make-up`, `directing`, `writing`, `sound`, `camera`, `visual effects`, `lighting`, and `editing` (if there are people for those crew positions).. Each of those members will have a `jobs` array and a standard `person` object.
         *
         *     #### Guest Stars
         *
         *     If you add `?extended=guest_stars` to the URL, it will return all guest stars that appeared in at least 1 episode of the season.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _This returns a lot of data, so please only use this extended parameter if you actually need it!_
         */
        get: operations["Get all people for a season"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get season ratings
         * @description Returns rating (between 0 and 10) and distribution for a season.
         */
        get: operations["Get season ratings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get season stats
         * @description Returns lots of season stats.
         */
        get: operations["Get season stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/watching": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get users watching right now
         * @description #### &#10024; Extended Info
         *
         *     Returns all users watching this season right now.
         */
        get: operations["Get users watching right now"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all videos
         * @description #### &#10024; Extended Info
         *
         *     Returns all videos including trailers, teasers, clips, and featurettes.
         */
        get: operations["Get all videos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/episodes/{episode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single episode for a show
         * @description #### &#10024; Extended Info
         *
         *     Returns a single episode's details. All date and times are in UTC and were calculated using the episode's `air_date` and show's `country` and `air_time`.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If the `first_aired` is unknown, it will be set to `null`._
         *
         *     > ### 🅽🅾🆃🅴
         *     > _When getting `full` extended info, the `episode_type` field can have a value of `standard`, `series_premiere` (season 1, episode 1), `season_premiere` (episode 1), `mid_season_finale`, `mid_season_premiere` (the next episode after the mid season finale), `season_finale`, or `series_finale` (last episode to air for an ended show)._
         */
        get: operations["Get a single episode for a show"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/episodes/{episode}/translations/{language}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all episode translations
         * @description Returns all translations for an episode, including language and translated values for title and overview.
         */
        get: operations["Get all episode translations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/episodes/{episode}/comments/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all episode comments
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#128513; Emojis
         *
         *     Returns all top level comments for an episode. By default, the `newest` comments are returned first. Other sorting options include `oldest`, most `likes`, most `replies`, `highest` rated, `lowest` rated, and most `plays`.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If you send OAuth, comments from blocked users will be automatically filtered out._
         */
        get: operations["Get all episode comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/episodes/{episode}/lists/{type}/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lists containing this episode
         * @description #### &#128196; Pagination &#128513; Emojis
         *
         *     Returns all lists that contain this episode. By default, `personal` lists are returned sorted by the most `popular`.
         */
        get: operations["Get lists containing this episode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/episodes/{episode}/people": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all people for an episode
         * @description #### &#10024; Extended Info
         *
         *     Returns all `cast` and `crew` for an episode. Each `cast` member will have a `characters` array and a standard `person` object.
         *
         *     The `crew` object will be broken up by department into `production`, `art`, `crew`, `costume & make-up`, `directing`, `writing`, `sound`, `camera`, `visual effects`, `lighting`, and `editing` (if there are people for those crew positions). Each of those members will have a `jobs` array and a standard `person` object.
         *
         *     #### Guest Stars
         *
         *     If you add `?extended=guest_stars` to the URL, it will return all guest stars that appeared in the episode.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _This returns a lot of data, so please only use this extended parameter if you actually need it!_
         */
        get: operations["Get all people for an episode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/episodes/{episode}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get episode ratings
         * @description Returns rating (between 0 and 10) and distribution for an episode.
         */
        get: operations["Get episode ratings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/episodes/{episode}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get episode stats
         * @description Returns lots of episode stats.
         */
        get: operations["Get episode stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shows/{id}/seasons/{season}/episodes/{episode}/watching": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all videos
         * @description #### &#10024; Extended Info
         *
         *     Returns all videos including trailers, teasers, clips, and featurettes.
         */
        get: operations["Get all videos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/last_activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get last activity
         * @description #### &#128274; OAuth Required
         *
         *     This method is a useful first step in the syncing process. We recommended caching these dates locally, then you can compare to know exactly what data has changed recently. This can greatly optimize your syncs so you don't pull down a ton of data only to see nothing has actually changed.
         *
         *     #### Account
         *
         *     `settings_at` is set when the OAuth user updates any of their Trakt settings on the website. `followed_at` is set when another Trakt user follows or unfollows the OAuth user. `following_at` is set when the OAuth user follows or unfollows another Trakt user. `pending_at` is set when the OAuth user follows a private account, which requires their approval. `requested_at` is set when the OAuth user has a private account and someone requests to follow them.
         */
        get: operations["Get last activity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/playback/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get playback progress
         * @description #### &#128274; OAuth Required &#128196; Pagination Optional
         *
         *     Whenever a scrobble is paused, the playback progress is saved. Use this progress to sync up playback across different media centers or apps. For example, you can start watching a movie in a media center, stop it, then resume on your tablet from the same spot. Each item will have the `progress` percentage between 0 and 100.
         *
         *     You can optionally specify a `type` to only get `movies` or `episodes`.
         *
         *     By default, all results will be returned. Pagination is optional and can be used for something like an "on deck" feature, or if you only need a limited data set.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _We only save playback progress for the last 6 months._
         */
        get: operations["Get playback progress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/playback/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a playback item
         * @description #### &#128274; OAuth Required
         *
         *     Remove a playback item from a user's playback progress list. A `404` will be returned if the `id` is invalid.
         */
        delete: operations["Remove a playback item"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/collection/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get collection
         * @description #### &#128274; OAuth Required &#10024; Extended Info
         *
         *     Get all collected items in a user's collection. A collected item indicates availability to watch digitally or on physical media.
         *
         *     Each `movie` object contains `collected_at` and `updated_at` timestamps. Since users can set custom dates when they collected movies, it is possible for `collected_at` to be in the past. We also include `updated_at` to help sync Trakt data with your app. Cache this timestamp locally and only re-process the movie if you see a newer timestamp.
         *
         *     Each `show` object contains `last_collected_at` and `last_updated_at` timestamps. Since users can set custom dates when they collected episodes, it is possible for `last_collected_at` to be in the past. We also include `last_updated_at` to help sync Trakt data with your app. Cache this timestamp locally and only re-process the show if you see a newer timestamp.
         *
         *     If you add `?extended=metadata` to the URL, it will return the additional `media_type`, `resolution`, `hdr`, `audio`, `audio_channels` and '3d' metadata. It will use `null` if the metadata isn't set for an item.
         */
        get: operations["Get collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/collection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add items to collection
         * @description #### 🔥 VIP Enhanced &#128274; &#128274; OAuth Required
         *
         *     Add items to a user's collection. Accepts shows, seasons, episodes and movies. If only a show is passed, all episodes for the show will be collected. If seasons are specified, all episodes in those seasons will be collected.
         *
         *     Send a `collected_at` UTC datetime to mark items as collected in the past. You can also send additional metadata about the media itself to have a very accurate collection. Showcase what is available to watch from your epic HD DVD collection down to your downloaded iTunes movies.
         *
         *     #### Limits
         *
         *     If the user's collection limit is exceeded, a `420` HTTP error code is returned. Use the [**\/users/settings**](/reference/users/settings) method to get all limits for a user account. In most cases, upgrading to [**Trakt VIP**](https://trakt.tv/vip) will increase the limits.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _You can resend items already in your collection and they will be updated with any new values. This includes the `collected_at` and any other metadata._
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `episodes` | array | Array of `episode` objects. |
         *
         *     #### Media Object POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | item <span style="color:red;">*</a> | object | `movie`, `show`, or `episode` object. |
         *     | `collected_at` | datetime | UTC datetime when the item was collected. Set to `released` to automatically use the inital release date + runtime *(episodes only)*). |
         *     | `media_type` | string | Set to `digital`, `bluray`, `hddvd`, `dvd`, `vcd`, `vhs`, `betamax`, or `laserdisc`. |
         *     | `resolution` | string | Set to `uhd_4k`, `hd_1080p`, `hd_1080i`, `hd_720p`, `sd_480p`, `sd_480i`, `sd_576p`, or `sd_576i`. |
         *     | `hdr` | string | Set to `dolby_vision`, `hdr10`, `hdr10_plus`, or `hlg`. |
         *     | `audio` | string | Set to `dolby_digital`, `dolby_digital_plus`, `dolby_digital_plus_atmos`, `dolby_truehd`, `dolby_atmos` *(Dolby TrueHD Atmos)*, `dolby_prologic`, `dts`, `dts_ma`, `dts_hr`, `dts_x`, `auro_3d`, `mp3`, `mp2`, `aac`, `lpcm`, `ogg` *(Ogg Vorbis)*, `ogg_opus`, `wma`, or `flac`. |
         *     | `audio_channels` | string | Set to `1.0`, `2.0`, `2.1`, `3.0`, `3.1`, `4.0`, `4.1`, `5.0`, `5.1`, `5.1.2`, `5.1.4`, `6.1`, `7.1`, `7.1.2`, `7.1.4`, `9.1`, or `10.1` |
         *     | `3d` | boolean | Set `true` if in 3D. |
         */
        post: operations["Add items to collection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/collection/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove items from collection
         * @description #### &#128274; OAuth Required
         *
         *     Remove one or more items from a user's collection.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `episodes` | array | Array of `episode` objects. |
         */
        post: operations["Remove items from collection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/watched/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get watched
         * @description #### &#128274; OAuth Required &#10024; Extended Info
         *
         *     Returns all movies or shows a user has watched sorted by most plays.
         *
         *     If `type` is set to _shows_ and you add `?extended=noseasons` to the URL, it won't return season or episode info.
         *
         *     Each `movie` and `show` object contains `last_watched_at` and `last_updated_at` timestamps. Since users can set custom dates when they watched movies and episodes, it is possible for `last_watched_at` to be in the past. We also include `last_updated_at` to help sync Trakt data with your app. Cache this timestamp locally and only re-process the movies and shows if you see a newer timestamp.
         *
         *     Each `show` object contains a `reset_at` timestamp. If not `null`, this is when the user started re-watching the show. Your app can adjust the progress by ignoring episodes with a `last_watched_at` prior to the `reset_at`.
         */
        get: operations["Get watched"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/history/{type}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get watched history
         * @description #### &#128274; OAuth Required &#128196; Pagination &#10024; Extended Info
         *
         *     Returns movies and episodes that a user has watched, sorted by most recent. You can optionally limit the `type` to `movies` or `episodes`. The `id` _(64-bit integer)_ in each history item uniquely identifies the event and can be used to remove individual events by using the [**\/sync/history/remove**](#reference/sync/remove-from-history/get-watched-history) method. The `action` will be set to `scrobble`, `checkin`, or `watch`.
         *
         *     Specify a `type` and trakt `id` to limit the history for just that item. If the `id` is valid, but there is no history, an empty array will be returned.
         *
         *     | Example URL | Returns watches for... |
         *     |---|---|
         *     | `/history/movies/12601` | TRON: Legacy |
         *     | `/history/shows/1388` | All episodes of Breaking Bad |
         *     | `/history/seasons/3950` | All episodes of Breaking Bad: Season 1 |
         *     | `/history/episodes/73482` | Only episode 1 of Breaking Bad: Season 1 |
         */
        get: operations["Get watched history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add items to watched history
         * @description #### &#128274; OAuth Required
         *
         *     Add items to a user's watch history. Accepts shows, seasons, episodes and movies. If only a show is passed, all episodes for the show will be added. If seasons are specified, only episodes in those seasons will be added.
         *
         *     Send a `watched_at` UTC datetime to mark items as watched in the past. This is useful for syncing past watches from a media center.
         *
         *     > ### ☣️ 🅸🅼🅿🅾🆁🆃🅰🅽🆃
         *     > _Please be careful with sending duplicate data. We don't verify the `item` + `watched_at` to ensure it's unique, it is up to your app to veify this and not send duplicate plays._
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `episodes` | array | Array of `episode` objects. |
         *
         *     #### Media Object POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | item <span style="color:red;">*</a> | object | `movie`, `show`, or `episode` object. |
         *     | `watched_at` | datetime | UTC datetime when the item was watched. Set to `released` to automatically use the initial release date + runtime *(episodes only)*. |
         */
        post: operations["Add items to watched history"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/history/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove items from history
         * @description #### &#128274; OAuth Required
         *
         *     Remove items from a user's watch history including all watches, scrobbles, and checkins. Accepts shows, seasons, episodes and movies. If only a show is passed, all episodes for the show will be removed. If seasons are specified, only episodes in those seasons will be removed.
         *
         *     You can also send a list of raw history `ids` _(64-bit integers)_ to delete single plays from the watched history. The [**\/sync/history**](#reference/sync/get-history) method will return an individual `id` _(64-bit integer)_ for each history item.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `episodes` | array | Array of `episode` objects. |
         *     | `ids` | array | Array of history ids. |
         */
        post: operations["Remove items from history"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/ratings/{type}/{rating}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ratings
         * @description #### &#128274; OAuth Required &#128196; Pagination Optional &#10024; Extended Info
         *
         *     Get a user's ratings filtered by `type`. You can optionally filter for a specific `rating` between 1 and 10. Send a comma separated string for `rating` if you need multiple ratings.
         */
        get: operations["Get ratings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add new ratings
         * @description #### &#128274; OAuth Required
         *
         *     Rate one or more items. Accepts shows, seasons, episodes and movies. If only a show is passed, only the show itself will be rated. If seasons are specified, all of those seasons will be rated.
         *
         *     Send a `rated_at` UTC datetime to mark items as rated in the past. This is useful for syncing ratings from a media center.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `episodes` | array | Array of `episode` objects. |
         *
         *     #### Media Object POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | item <span style="color:red;">*</a> | object | `movie`, `show`, `season`, or `episode` object. |
         *     | `rating` <span style="color:red;">*</a> | integer | Between 1 and 10. |
         *     | `rated_at` | datetime | UTC datetime when the item was rated. |
         */
        post: operations["Add new ratings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/ratings/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove ratings
         * @description #### &#128274; OAuth Required
         *
         *     Remove ratings for one or more items.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `episodes` | array | Array of `episode` objects. |
         */
        post: operations["Remove ratings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/watchlist/{type}/{sort_by}/{sort_how}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get watchlist
         * @description #### 🔥 **VIP Enhanced**  &#128274; OAuth Required &#128196; Pagination Optional &#10024; Extended Info &#128513; Emojis
         *
         *     Returns all items in a user's watchlist filtered by type.
         *
         *     > ### ☣️ 🅸🅼🅿🅾🆁🆃🅰🅽🆃
         *     > The watchlist should not be used as a list of what the user is actively watching. Use a combination of the [**\/sync/watched**](/reference/sync/get-watched) and [**\/shows/:id/progress**](/reference/shows/watched-progress) methods to get what the user is actively watching.
         *
         *     #### Notes
         *
         *     Each watchlist item contains a `notes` field with text entered by the user.
         *
         *     #### Sorting
         *
         *     Default sorting is based on the list defaults and sent in the `X-Sort-By` and `X-Sort-How` headers. If you specify the `sort_by` and `sort_how` parameters, the response will be sorted based on those values and sent in the `X-Applied-Sort-By` and `X-Applied-Sort-How` headers.
         *
         *     Some `sort_by` options are 🔥 **VIP Only** including `imdb_rating`, `tmdb_rating`, `rt_tomatometer`, `rt_audience`, `metascore`, `votes`, `imdb_votes`, and `tmdb_votes`. If sent for a non VIP, the items will fall back to  `rank`.
         *
         *     #### Auto Removal
         *
         *     When an item is watched, it will be automatically removed from the watchlist. For shows and seasons, watching 1 episode will remove the entire show or season.
         */
        get: operations["Get watchlist"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/watchlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update watchlist
         * @description #### &#128274; OAuth Required
         *
         *     Update the watchlist by sending 1 or more parameters.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|---|
         *     | `description` | string | Description for the watchlist. |
         *     | `sort_by` | string | `rank`, `added`, `title`, `released`, `runtime`, `popularity`, `random`, `percentage`, `imdb_rating`, `tmdb_rating`, `rt_tomatometer`, `rt_audience`, `metascore`, `votes`, `imdb_votes`, `tmdb_votes`, `my_rating`, `watched`, `collected` |
         *     | `sort_how` | string | `asc`, `desc` |
         */
        put: operations["Update watchlist"];
        /**
         * Add items to watchlist
         * @description #### 🔥 VIP Enhanced &#128274; OAuth Required &#128513; Emojis
         *
         *     Add one of more items to a user's watchlist. Accepts shows, seasons, episodes and movies. If only a show is passed, only the show itself will be added. If seasons are specified, all of those seasons will be added.
         *
         *     #### Notes
         *
         *     Each watchlist item can optionally accept a `notes` *(500 maximum characters)* field with custom text. The user must be a [**Trakt VIP**](https://trakt.tv/vip) to send `notes`.
         *
         *     #### Limits
         *
         *     If the user's watchlist limit is exceeded, a `420` HTTP error code is returned. Use the [**\/users/settings**](/reference/users/settings) method to get all limits for a user account. In most cases, upgrading to [**Trakt VIP**](https://trakt.tv/vip) will increase the limits.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `episodes` | array | Array of `episode` objects. |
         */
        post: operations["Add items to watchlist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/watchlist/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove items from watchlist
         * @description #### &#128274; OAuth Required
         *
         *     Remove one or more items from a user's watchlist.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `episodes` | array | Array of `episode` objects. |
         */
        post: operations["Remove items from watchlist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/watchlist/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reorder watchlist items
         * @description #### &#128274; OAuth Required
         *
         *     Reorder all items on a user's watchlist by sending the updated `rank` of list item ids. Use the [**\/sync/watchlist**](#reference/sync/get-watchlist) method to get all list item ids.
         */
        post: operations["Reorder watchlist items"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/watchlist/{list_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a watchlist item
         * @description #### 🔥 VIP Enhanced &#128274; OAuth Required &#128513; Emojis
         *
         *     Update the `notes` on a single watchlist item.
         *
         *     #### Limits
         *
         *     If the user's note limit is exceeded, a `420` HTTP error code is returned. Use the [**\/users/settings**](/reference/users/settings) method to get all limits for a user account. Upgrading to [**Trakt VIP**](https://trakt.tv/vip) allows for unlimited notes
         */
        put: operations["Update a watchlist item"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/favorites/{type}/{sort_by}/{sort_how}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get favorites
         * @description #### 🔥 **VIP Enhanced** &#128274; OAuth Required &#128196; Pagination Optional &#10024; Extended Info &#128513; Emojis
         *
         *     If the user only had 100 shows and movies to bring with them on a deserted island, what would they be? Apps should encourage user's to add favorites so the algorithm keeps getting better.
         *
         *     #### Notes
         *
         *     Each favorite contains a `notes` field explaining why the user favorited the item.
         *
         *     #### Sorting
         *
         *     Default sorting is based on the list defaults and sent in the `X-Sort-By` and `X-Sort-How` headers. If you specify the `sort_by` and `sort_how` parameters, the response will be sorted based on those values and sent in the `X-Applied-Sort-By` and `X-Applied-Sort-How` headers.
         *
         *     Some `sort_by` options are 🔥 **VIP Only** including `imdb_rating`, `tmdb_rating`, `rt_tomatometer`, `rt_audience`, `metascore`, `votes`, `imdb_votes`, and `tmdb_votes`. If sent for a non VIP, the items will fall back to  `rank`.
         */
        get: operations["Get favorites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update favorites
         * @description #### &#128274; OAuth Required
         *
         *     Update the favorites list by sending 1 or more parameters.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|---|
         *     | `description` | string | Description for the favorites list. |
         *     | `sort_by` | string | `rank`, `added`, `title`, `released`, `runtime`, `popularity`, `random`, `percentage`, `imdb_rating`, `tmdb_rating`, `rt_tomatometer`, `rt_audience`, `metascore`, `votes`, `imdb_votes`, `tmdb_votes`, `my_rating`, `watched`, `collected` |
         *     | `sort_how` | string | `asc`, `desc` |
         */
        put: operations["Update favorites"];
        /**
         * Add items to favorites
         * @description #### &#128274; OAuth Required &#128513; Emojis
         *
         *     If the user only had 50 TV shows and movies to bring with them on a deserted island, what would they be? Apps should encourage user's to add favorites so the algorithm keeps getting better.
         *
         *     #### Notes
         *
         *     Each favorite can optionally accept a `notes` *(500 maximum characters)* field explaining why the user favorited the item.
         *
         *     #### Limits
         *
         *     If the user's favorite limit is exceeded, a `420` HTTP error code is returned. This limit applies to all users.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         */
        post: operations["Add items to favorites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/favorites/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove items from favorites
         * @description #### &#128274; OAuth Required
         *
         *     Remove items from a user's favorites. Apps should encourage user's to add favorites so the algorithm keeps getting better.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         */
        post: operations["Remove items from favorites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/favorites/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reorder favorited items
         * @description #### &#128274; OAuth Required
         *
         *     Reorder all items on a user's favorites by sending the updated `rank` of list item ids. Use the [**\/sync/favorites**](#reference/sync/get-favorites) method to get all list item ids.
         */
        post: operations["Reorder favorited items"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/favorites/{list_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a favorite item
         * @description #### &#128274; OAuth Required &#128513; Emojis
         *
         *     Update the `notes` on a single favorite item.
         */
        put: operations["Update a favorite item"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve settings
         * @description #### &#128274; OAuth Required
         *
         *     Get the user's settings so you can align your app's experience with what they're used to on the trakt website. A globally unique `uuid` is also returned, which can be used to identify the user locally in your app if needed. However, the `uuid` can't be used to retrieve data from the Trakt API.
         *
         *     #### Limits
         *
         *     The `limits` object is useful to customize your user experience. For example, if the user has a `list` limit of `2`, you might want to show a message to the user that they need to upgrade to [**Trakt VIP**](https://trakt.tv/vip) to add more lists.
         *
         *     #### Permissions
         *
         *     The `permissions` object is also useful to customize your user experience. In general, an account will have permissions to do everything. However, we'll temporarily set a permission to `false` if the user triggers spam protections.
         */
        get: operations["Retrieve settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/requests/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pending following requests
         * @description #### &#128274; OAuth Required &#10024; Extended Info
         *
         *     List a user's pending following requests that they're waiting for the other user's to approve.
         */
        get: operations["Get pending following requests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get follow requests
         * @description #### &#128274; OAuth Required &#10024; Extended Info
         *
         *     List a user's pending follow requests so they can either approve or deny them.
         */
        get: operations["Get follow requests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve follow request
         * @description #### &#128274; OAuth Required
         *
         *     Approve a follower using the `id` of the request. If the `id` is not found, was already approved, or was already denied, a `404` error will be returned.
         */
        post: operations["Approve follow request"];
        /**
         * Deny follow request
         * @description #### &#128274; OAuth Required
         *
         *     Deny a follower using the `id` of the request. If the `id` is not found, was already approved, or was already denied, a `404` error will be returned.
         */
        delete: operations["Deny follow request"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/saved_filters/{section}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get saved filters
         * @description #### 🔥 VIP Only &#128274; OAuth Required &#128196; Pagination
         *
         *     Get all saved filters a user has created. The `path` and `query` can be used to construct an API path to retrieve the saved data. Think of this like a dynamically updated list.
         */
        get: operations["Get saved filters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/hidden/{section}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get hidden items
         * @description #### &#128274; OAuth Required &#128196; Pagination &#10024; Extended Info
         *
         *     Get hidden items for a section. This will return an array of standard media objects. You can optionally limit the `type` of results to return.
         */
        get: operations["Get hidden items"];
        put?: never;
        /**
         * Add hidden items
         * @description #### &#128274; OAuth Required
         *
         *     Hide items for a specific section. Here's what type of items can hidden for each section. You can optionally specify the `hidden_at` date for each item.
         *
         *     #### Hideable Media Objects
         *
         *     | Section | Objects |
         *     |---|---|---|
         *     | `calendar` | `movie`, `show` |
         *     | `progress_watched` | `show`, `season` |
         *     | `progress_collected` | `show`, `season` |
         *     | `recommendations` | `movie`, `show` |
         *     | `comments` | `user` |
         *     | `dropped` | `show` |
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `users` | array | Array of `user` objects. |
         */
        post: operations["Add hidden items"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/hidden/{section}/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove hidden items
         * @description #### &#128274; OAuth Required
         *
         *     Unhide items for a specific section. Here's what type of items can unhidden for each section.
         *
         *     #### Unhideable Media Objects
         *
         *     | Section | Objects |
         *     |---|---|---|
         *     | `calendar` | `movie`, `show` |
         *     | `progress_watched` | `show`, `season` |
         *     | `progress_collected` | `show`, `season` |
         *     | `recommendations` | `movie`, `show` |
         *     | `comments` | `user` |
         *     | `dropped` | `show` |
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `users` | array | Array of `user` objects. |
         */
        post: operations["Remove hidden items"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description #### &#128275; OAuth Optional &#10024; Extended Info
         *
         *     Get a user's profile information. If the user is private, info will only be returned if you send OAuth and are either that user or an approved follower. Adding `?extended=vip` will return some additional VIP related fields so you can display the user's Trakt VIP status and year count.
         */
        get: operations["Get user profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/likes/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get likes
         * @description #### &#128274; OAuth Optional &#128196; Pagination
         *
         *     Get items a user likes. This will return an array of standard media objects. You can optionally limit the `type` of results to return.
         *
         *     #### Comment Media Objects
         *
         *     If you add `?extended=comments` to the URL, it will return media objects for each comment like.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _This returns a lot of data, so please only use this extended parameter if you actually need it!_
         */
        get: operations["Get likes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/collection/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get collection
         * @description #### &#128275; OAuth Optional &#10024; Extended Info
         *
         *     Get all collected items in a user's collection. A collected item indicates availability to watch digitally or on physical media.
         *
         *     Each `movie` object contains `collected_at` and `updated_at` timestamps. Since users can set custom dates when they collected movies, it is possible for `collected_at` to be in the past. We also include `updated_at` to help sync Trakt data with your app. Cache this timestamp locally and only re-process the movie if you see a newer timestamp.
         *
         *     Each `show` object contains `last_collected_at` and `last_updated_at` timestamps. Since users can set custom dates when they collected episodes, it is possible for `last_collected_at` to be in the past. We also include `last_updated_at` to help sync Trakt data with your app. Cache this timestamp locally and only re-process the show if you see a newer timestamp.
         *
         *     If you add `?extended=metadata` to the URL, it will return the additional `media_type`, `resolution`, `hdr`, `audio`, `audio_channels` and '3d' metadata. It will use `null` if the metadata isn't set for an item.
         */
        get: operations["Get collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/comments/{comment_type}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get comments
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#10024; Extended Info
         *
         *     Returns the most recently written comments for the user. You can optionally filter by the `comment_type` and media `type` to limit what gets returned.
         *
         *     By default, only top level comments are returned. Set `?include_replies=true` to return replies in addition to top level comments. Set `?include_replies=only` to return only replies and no top level comments.
         */
        get: operations["Get comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/notes/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get notes
         * @description #### 🔥 VIP Enhanced &#128275; OAuth Optional &#128196; Pagination &#10024; Extended Info
         *
         *     Returns the most recently notes for the user. You can optionally filter by media `type` to limit what gets returned. Use the `attached_to` info to know what the note is actually added to. Media items like `movie`, `show`, `season`, `episode`, or `person` are straightforward, but `history` will need to be mapped to that specific play in their watched history since they might have multiple plays. Since `collection` and `rating` is a 1:1 association, you can assume the note is attached to the media item in the `type` field that has been collected or rated.
         *
         *     #### Limits
         *
         *     Standard accounts are allowed a limited amount of notes, upgrading to [**Trakt VIP**](https://trakt.tv/vip) allows unlimited notes.
         */
        get: operations["Get notes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user's personal lists
         * @description #### &#128275; OAuth Optional &#128513; Emojis
         *
         *     Returns all personal lists for a user. Use the [**\/users/:id/lists/:list_id/items**](#reference/users/list-items) method to get the actual items a specific list contains.
         */
        get: operations["Get a user's personal lists"];
        put?: never;
        /**
         * Create personal list
         * @description #### 🔥 VIP Enhanced &#128274; OAuth Required
         *
         *     Create a new personal list. The `name` is the only required field, but the other info is recommended to ask for.
         *
         *     #### Limits
         *
         *     If the user's list limit is exceeded, a `420` HTTP error code is returned. Use the [**\/users/settings**](/reference/users/settings) method to get all limits for a user account. In most cases, upgrading to [**Trakt VIP**](https://trakt.tv/vip) will increase the limits.
         *
         *     #### Privacy
         *
         *     Lists will be `private` by default. Here is what each value means.
         *
         *     | Value | Privacy impact... |
         *     |---|---|
         *     | `private` | Only you can see the list. |
         *     | `link` | Anyone with the `share_link` can see the list. |
         *     | `friends` | Only your friends can see the list. |
         *     | `public` | Anyone can see the list. |
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Default | Value |
         *     |---|---|---|---|
         *     | `name` <span style="color:red;">*</a> | string |  | Name of the list. |
         *     | `description` | string |  | Description for this list. |
         *     | `privacy` | string | `private` | `private`, `link`, `friends`, `public` |
         *     | `display_numbers` | boolean | `false` | Should each item be numbered? |
         *     | `allow_comments` | boolean | `true` | Are comments allowed? |
         *     | `sort_by` | string | `rank` | `rank`, `added`, `title`, `released`, `runtime`, `popularity`, `random`, `percentage`, `imdb_rating`, `tmdb_rating`, `rt_tomatometer`, `rt_audience`, `metascore`, `votes`, `imdb_votes`, `tmdb_votes`, `my_rating`, `watched`, `collected` |
         *     | `sort_how` | string | `asc` | `asc`, `desc` |
         */
        post: operations["Create personal list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reorder a user's lists
         * @description #### &#128274; OAuth Required
         *
         *     Reorder all lists by sending the updated `rank` of list ids. Use the [**\/users/:id/lists**](#reference/users/lists) method to get all list ids.
         */
        post: operations["Reorder a user's lists"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/collaborations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all lists a user can collaborate on
         * @description #### &#128275; OAuth Optional
         *
         *     Returns all lists a user can collaborate on. This gives full access to add, remove, and re-order list items. It essentially works just like a list owned by the user, just make sure to use the correct list owner `user` when building the API URLs.
         */
        get: operations["Get all lists a user can collaborate on"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/{list_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get personal list
         * @description #### &#128275; OAuth Optional &#128513; Emojis
         *
         *     Returns a single personal list. Use the [**\/users/:id/lists/:list_id/items**](#reference/users/list-items) method to get the actual items this list contains.
         */
        get: operations["Get personal list"];
        /**
         * Update personal list
         * @description #### &#128274; OAuth Required
         *
         *     Update a personal list by sending 1 or more parameters. If you update the list name, the original slug will still be retained so existing references to this list won't break.
         *
         *     #### Privacy
         *
         *     Lists will be `private` by default. Here is what each value means.
         *
         *     | Value | Privacy impact... |
         *     |---|---|
         *     | `private` | Only you can see the list. |
         *     | `link` | Anyone with the `share_link` can see the list. |
         *     | `friends` | Only your friends can see the list. |
         *     | `public` | Anyone can see the list. |
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|---|
         *     | `name` | string | Name of the list. |
         *     | `description` | string | Description for this list. |
         *     | `privacy` | string | `private`, `link`, `friends`, `public` |
         *     | `display_numbers` | boolean | Should each item be numbered? |
         *     | `allow_comments` | boolean | Are comments allowed? |
         *     | `sort_by` | string | `rank`, `added`, `title`, `released`, `runtime`, `popularity`, `random`, `percentage`, `imdb_rating`, `tmdb_rating`, `rt_tomatometer`, `rt_audience`, `metascore`, `votes`, `imdb_votes`, `tmdb_votes`, `my_rating`, `watched`, `collected` |
         *     | `sort_how` | string | `asc`, `desc` |
         */
        put: operations["Update personal list"];
        post?: never;
        /**
         * Delete a user's personal list
         * @description #### &#128274; OAuth Required
         *
         *     Remove a personal list and all items it contains.
         */
        delete: operations["Delete a user's personal list"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/{list_id}/likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users who liked a list
         * @description #### &#128275; OAuth Optional &#128196; Pagination
         *
         *     Returns all users who liked a list.
         */
        get: operations["Get all users who liked a list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/{list_id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Like a list
         * @description #### &#128274; OAuth Required
         *
         *     Votes help determine popular lists. Only one like is allowed per list per user.
         */
        post: operations["Like a list"];
        /**
         * Remove like on a list
         * @description #### &#128274; OAuth Required
         *
         *     Remove a like on a list.
         */
        delete: operations["Remove like on a list"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/{list_id}/items/{type}/{sort_by}/{sort_how}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get items on a personal list
         * @description #### 🔥 **VIP Enhanced** &#128275; OAuth Optional &#128196; Pagination Optional &#10024; Extended Info &#128513; Emojis
         *
         *     Get all items on a personal list. Items can be a `movie`, `show`, `season`, `episode`, or `person`. You can optionally specify the `type` parameter with a single value or comma delimited string for multiple item types.
         *
         *     #### Notes
         *
         *     Each list item contains a `notes` field with text entered by the user.
         *
         *     #### Sorting
         *
         *     Default sorting is based on the list defaults and sent in the `X-Sort-By` and `X-Sort-How` headers. If you specify the `sort_by` and `sort_how` parameters, the response will be sorted based on those values and sent in the `X-Applied-Sort-By` and `X-Applied-Sort-How` headers.
         *
         *     Some `sort_by` options are 🔥 **VIP Only** including `imdb_rating`, `tmdb_rating`, `rt_tomatometer`, `rt_audience`, `metascore`, `votes`, `imdb_votes`, and `tmdb_votes`. If sent for a non VIP, the items will fall back to  `rank`.
         */
        get: operations["Get items on a personal list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/{list_id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add items to personal list
         * @description #### 🔥 VIP Enhanced &#128274; OAuth Required &#128513; Emojis
         *
         *     Add one or more items to a personal list. Items can be movies, shows, seasons, episodes, or people.
         *
         *     #### Notes
         *
         *     Each list item can optionally accept a `notes` *(500 maximum characters)* field with custom text. The user must be a [**Trakt VIP**](https://trakt.tv/vip) to send `notes`.
         *
         *     #### Limits
         *
         *     If the user's list item limit is exceeded, a `420` HTTP error code is returned. Use the [**\/users/settings**](/reference/users/settings) method to get all limits for a user account. In most cases, upgrading to [**Trakt VIP**](https://trakt.tv/vip) will increase the limits.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `episodes` | array | Array of `episode` objects. |
         *     | `people` | array | Array of `person` objects. |
         */
        post: operations["Add items to personal list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/{list_id}/items/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove items from personal list
         * @description #### &#128274; OAuth Required
         *
         *     Remove one or more items from a personal list.
         *
         *     #### JSON POST Data
         *
         *     | Key | Type | Value |
         *     |---|---|---|
         *     | `movies` | array | Array of `movie` objects. (see examples &#8594;) |
         *     | `shows` | array | Array of `show` objects. |
         *     | `seasons` | array | Array of `season` objects. |
         *     | `episodes` | array | Array of `episode` objects. |
         *     | `people` | array | Array of `person` objects. |
         */
        post: operations["Remove items from personal list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/{list_id}/items/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reorder items on a list
         * @description #### &#128274; OAuth Required
         *
         *     Reorder all items on a list by sending the updated `rank` of list item ids. Use the [**\/users/:id/lists/:list_id/items**](#reference/users/list-items) method to get all list item ids.
         */
        post: operations["Reorder items on a list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/{list_id}/items/{list_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a list item
         * @description #### 🔥 VIP Only &#128274; OAuth Required &#128513; Emojis
         *
         *     Update the `notes` on a single list item.
         */
        put: operations["Update a list item"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/lists/{list_id}/comments/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all list comments
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#128513; Emojis
         *
         *     Returns all top level comments for a list. By default, the `newest` comments are returned first. Other sorting options include `oldest`, most `likes`, and most `replies`.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If you send OAuth, comments from blocked users will be automatically filtered out._
         */
        get: operations["Get all list comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/follow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Follow this user
         * @description #### &#128274; OAuth Required
         *
         *     If the user has a private profile, the follow request will require approval (`approved_at` will be null). If a user is public, they will be followed immediately (`approved_at` will have a date).
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If this user is already being followed or there is a pending follow request, a `409` HTTP status code will returned._
         */
        post: operations["Follow this user"];
        /**
         * Unfollow this user
         * @description #### &#128274; OAuth Required
         *
         *     Unfollow someone you already follow.
         */
        delete: operations["Unfollow this user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get followers
         * @description #### &#128275; OAuth Optional &#10024; Extended Info
         *
         *     Returns all followers including when the relationship began.
         */
        get: operations["Get followers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get following
         * @description #### &#128275; OAuth Optional &#10024; Extended Info
         *
         *     Returns all user's they follow including when the relationship began.
         */
        get: operations["Get following"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/friends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get friends
         * @description #### &#128275; OAuth Optional &#10024; Extended Info
         *
         *     Returns all friends for a user including when the relationship began. Friendship is a 2 way relationship where each user follows the other.
         */
        get: operations["Get friends"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/history/{type}/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get watched history
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#10024; Extended Info
         *
         *     Returns movies and episodes that a user has watched, sorted by most recent. You can optionally limit the `type` to `movies` or `episodes`. The `id` _(64-bit integer)_ in each history item uniquely identifies the event and can be used to remove individual events by using the [**\/sync/history/remove**](#reference/sync/remove-from-history/get-watched-history) method. The `action` will be set to `scrobble`, `checkin`, or `watch`.
         *
         *     Specify a `type` and trakt `item_id` to limit the history for just that item. If the `item_id` is valid, but there is no history, an empty array will be returned.
         *
         *     | Example URL | Returns watches for... |
         *     |---|---|
         *     | `/history/movies/12601` | TRON: Legacy |
         *     | `/history/shows/1388` | All episodes of Breaking Bad |
         *     | `/history/seasons/3950` | All episodes of Breaking Bad: Season 1 |
         *     | `/history/episodes/73482` | Only episode 1 for Breaking Bad: Season 1 |
         */
        get: operations["Get watched history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ratings/{type}/{rating}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ratings
         * @description #### &#128275; OAuth Optional &#128196; Pagination Optional &#10024; Extended Info
         *
         *     Get a user's ratings filtered by `type`. You can optionally filter for a specific `rating` between 1 and 10. Send a comma separated string for `rating` if you need multiple ratings.
         */
        get: operations["Get ratings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/watchlist/{type}/{sort_by}/{sort_how}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get watchlist
         * @description #### 🔥 **VIP Enhanced** &#128275; OAuth Optional &#128196; Pagination Optional &#10024; Extended Info &#128513; Emojis
         *
         *     Returns all items in a user's watchlist filtered by type.
         *
         *     > ### ☣️ 🅸🅼🅿🅾🆁🆃🅰🅽🆃
         *     > The watchlist should not be used as a list of what the user is actively watching. Use a combination of the [**\/sync/watched**](/reference/sync/get-watched) and [**\/shows/:id/progress**](/reference/shows/watched-progress) methods to get what the user is actively watching.
         *
         *     #### Notes
         *
         *     Each watchlist item contains a `notes` field with text entered by the user.
         *
         *     #### Sorting
         *
         *     Default sorting is based on the list defaults and sent in the `X-Sort-By` and `X-Sort-How` headers. If you specify the `sort_by` and `sort_how` parameters, the response will be sorted based on those values and sent in the `X-Applied-Sort-By` and `X-Applied-Sort-How` headers.
         *
         *     Some `sort_by` options are 🔥 **VIP Only** including `imdb_rating`, `tmdb_rating`, `rt_tomatometer`, `rt_audience`, `metascore`, `votes`, `imdb_votes`, and `tmdb_votes`. If sent for a non VIP, the items will fall back to  `rank`.
         *
         *     #### Auto Removal
         *
         *     When an item is watched, it will be automatically removed from the watchlist. For shows and seasons, watching 1 episode will remove the entire show or season.
         */
        get: operations["Get watchlist"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/watchlist/comments/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all favorites comments
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#128513; Emojis
         *
         *     Returns all top level comments for the watchlist. By default, the `newest` comments are returned first. Other sorting options include `oldest`, most `likes`, and most `replies`.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If you send OAuth, comments from blocked users will be automatically filtered out._
         */
        get: operations["Get all favorites comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/favorites/{type}/{sort_by}/{sort_how}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get favorites
         * @description #### 🔥 **VIP Enhanced** &#128274; OAuth Required &#128196; Pagination Optional &#10024; Extended Info &#128513; Emojis
         *
         *     Returns the top 100 shows and movies a user has favorited. Apps should encourage user's to add favorites so the algorithm keeps getting better.
         *
         *     #### Notes
         *
         *     Each favorite contains a `notes` field explaining why the user favorited the item.
         *
         *     #### Sorting
         *
         *     Default sorting is based on the list defaults and sent in the `X-Sort-By` and `X-Sort-How` headers. If you specify the `sort_by` and `sort_how` parameters, the response will be sorted based on those values and sent in the `X-Applied-Sort-By` and `X-Applied-Sort-How` headers.
         *
         *     Some `sort_by` options are 🔥 **VIP Only** including `imdb_rating`, `tmdb_rating`, `rt_tomatometer`, `rt_audience`, `metascore`, `votes`, `imdb_votes`, and `tmdb_votes`. If sent for a non VIP, the items will fall back to  `rank`.
         */
        get: operations["Get favorites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/favorites/comments/{sort}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all favorites comments
         * @description #### &#128275; OAuth Optional &#128196; Pagination &#128513; Emojis
         *
         *     Returns all top level comments for the favorites. By default, the `newest` comments are returned first. Other sorting options include `oldest`, most `likes`, and most `replies`.
         *
         *     > ### 🅽🅾🆃🅴
         *     > _If you send OAuth, comments from blocked users will be automatically filtered out._
         */
        get: operations["Get all favorites comments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/watching": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get watching
         * @description #### &#128275; OAuth Optional &#10024; Extended Info
         *
         *     Returns a movie or episode if the user is currently watching something.  If they are not, it returns no data and a `204` HTTP status code.
         */
        get: operations["Get watching"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/watched/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get watched
         * @description #### &#128275; OAuth Optional &#10024; Extended Info
         *
         *     Returns all movies or shows a user has watched sorted by most plays.
         *
         *     If `type` is set to _shows_ and you add `?extended=noseasons` to the URL, it won't return season or episode info.
         *
         *     Each `movie` and `show` object contains `last_watched_at` and `last_updated_at` timestamps. Since users can set custom dates when they watched movies and episodes, it is possible for `last_watched_at` to be in the past. We also include `last_updated_at` to help sync Trakt data with your app. Cache this timestamp locally and only re-process the movies and shows if you see a newer timestamp.
         *
         *     Each `show` object contains a `reset_at` timestamp. If not `null`, this is when the user started re-watching the show. Your app can adjust the progress by ignoring episodes with a `last_watched_at` prior to the `reset_at`.
         */
        get: operations["Get watched"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get stats
         * @description #### &#128275; OAuth Optional
         *
         *     Returns stats about the movies, shows, and episodes a user has watched, collected, and rated.
         */
        get: operations["Get stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "Authorize Application": {
        parameters: {
            query: {
                /**
                 * @description Must be set to code.
                 * @example code
                 */
                response_type: string;
                /**
                 * @description Get this from your app settings.
                 * @example
                 */
                client_id: string;
                /**
                 * @description URI specified in your app settings.
                 * @example
                 */
                redirect_uri: string;
                /**
                 * @description State variable for CSRF purposes.
                 * @example
                 */
                state?: string;
                /**
                 * @description Default to the sign up page.
                 * @example true
                 */
                signup?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Exchange refresh_token for access_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "refresh_token": "fd0847dbb559752d932dd3c1ac34ff98d27b11fe2fea5a864f44740cd7919ad0",
                 *       "client_id": "9b36d8c0db59eff5038aea7a417d73e69aea75b41aac771816d2ef1b3109cc2f",
                 *       "client_secret": "d6ea27703957b69939b8104ed4524595e210cd2e79af587744a7eb6e58f5b3d2",
                 *       "redirect_uri": "urn:ietf:wg:oauth:2.0:oob",
                 *       "grant_type": "refresh_token"
                 *     } */
                "application/json": {
                    refresh_token?: string;
                    client_id?: string;
                    client_secret?: string;
                    redirect_uri?: string;
                    grant_type?: string;
                };
            };
        };
        responses: {
            /** @description If the `refresh_token` is valid, you'll get the `access_token` back. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "access_token": "dbaf9757982a9e738f05d249b7b5b4a266b3a139049317c4909f2f263572c781",
                     *       "token_type": "bearer",
                     *       "expires_in": 86400,
                     *       "refresh_token": "76ba4c5c75c96f6087f58a4de10be6c00b29ea1ddc3b2022ee2016d1363e3a7c",
                     *       "scope": "public",
                     *       "created_at": 1487889741
                     *     } */
                    "application/json": {
                        access_token?: string;
                        token_type?: string;
                        expires_in?: number;
                        refresh_token?: string;
                        scope?: string;
                        created_at?: number;
                    };
                };
            };
            /** @description If the `refresh_token` is invalid, you'll get a `401` error. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": "invalid_grant",
                     *       "error_description": "The provided authorization grant is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client."
                     *     } */
                    "application/json": {
                        error?: string;
                        error_description?: string;
                    };
                };
            };
        };
    };
    "Revoke an access_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "token": "fd0847dbb559752d932dd3c1ac34ff98d27b11fe2fea5a864f44740cd7919ad0",
                 *       "client_id": "9b36d8c0db59eff5038aea7a417d73e69aea75b41aac771816d2ef1b3109cc2f",
                 *       "client_secret": "d6ea27703957b69939b8104ed4524595e210cd2e79af587744a7eb6e58f5b3d2"
                 *     } */
                "application/json": {
                    token?: string;
                    client_id?: string;
                    client_secret?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {} */
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    "Generate new device codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "client_id": "9b36d8c0db59eff5038aea7a417d73e69aea75b41aac771816d2ef1b3109cc2f"
                 *     } */
                "application/json": {
                    client_id?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "device_code": "d9c126a7706328d808914cfd1e40274b6e009f684b1aca271b9b3f90b3630d64",
                     *       "user_code": "5055CC52",
                     *       "verification_url": "https://trakt.tv/activate",
                     *       "expires_in": 600,
                     *       "interval": 5
                     *     } */
                    "application/json": {
                        device_code?: string;
                        user_code?: string;
                        verification_url?: string;
                        expires_in?: number;
                        interval?: number;
                    };
                };
            };
        };
    };
    "Poll for the access_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "code": "fd0847dbb559752d932dd3c1ac34ff98d27b11fe2fea5a864f44740cd7919ad0",
                 *       "client_id": "9b36d8c0db59eff5038aea7a417d73e69aea75b41aac771816d2ef1b3109cc2f",
                 *       "client_secret": "d6ea27703957b69939b8104ed4524595e210cd2e79af587744a7eb6e58f5b3d2"
                 *     } */
                "application/json": {
                    code?: string;
                    client_id?: string;
                    client_secret?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "access_token": "dbaf9757982a9e738f05d249b7b5b4a266b3a139049317c4909f2f263572c781",
                     *       "token_type": "bearer",
                     *       "expires_in": 86400,
                     *       "refresh_token": "76ba4c5c75c96f6087f58a4de10be6c00b29ea1ddc3b2022ee2016d1363e3a7c",
                     *       "scope": "public",
                     *       "created_at": 1487889741
                     *     } */
                    "application/json": {
                        access_token?: string;
                        token_type?: string;
                        expires_in?: number;
                        refresh_token?: string;
                        scope?: string;
                        created_at?: number;
                    };
                };
            };
        };
    };
    "Get shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "first_aired": "2014-07-14T01:00:00.000Z",
                     *         "episode": {
                     *           "season": 7,
                     *           "number": 4,
                     *           "title": "Death is Not the End",
                     *           "ids": {
                     *             "trakt": 443,
                     *             "tvdb": 4851180,
                     *             "imdb": "tt3500614",
                     *             "tmdb": 988123
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "True Blood",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 5,
                     *             "slug": "true-blood",
                     *             "tvdb": 82283,
                     *             "imdb": "tt0844441",
                     *             "tmdb": 10545
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "first_aired": "2014-07-14T02:00:00.000Z",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 3,
                     *           "title": "Two Boats and a Helicopter",
                     *           "ids": {
                     *             "trakt": 499,
                     *             "tvdb": 4854797,
                     *             "imdb": "tt3631218",
                     *             "tmdb": 988346
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Leftovers",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 7,
                     *             "slug": "the-leftovers",
                     *             "tvdb": 269689,
                     *             "imdb": "tt2699128",
                     *             "tmdb": 54344
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "first_aired": "2014-07-21T01:00:00.000Z",
                     *         "episode": {
                     *           "season": 7,
                     *           "number": 5,
                     *           "title": "Return to Oz",
                     *           "ids": {
                     *             "trakt": 444,
                     *             "tvdb": 4851181,
                     *             "imdb": "tt3500616",
                     *             "tmdb": 988124
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "True Blood",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 5,
                     *             "slug": "true-blood",
                     *             "tvdb": 82283,
                     *             "imdb": "tt0844441",
                     *             "tmdb": 10545
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "first_aired": "2014-07-21T02:00:00.000Z",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 4,
                     *           "title": "B.J. and the A.C.",
                     *           "ids": {
                     *             "trakt": 500,
                     *             "tvdb": 4854798,
                     *             "imdb": "tt3594942",
                     *             "tmdb": 988347
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Leftovers",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 7,
                     *             "slug": "the-leftovers",
                     *             "tvdb": 269689,
                     *             "imdb": "tt2699128",
                     *             "tmdb": 54344
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        first_aired: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get new shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "first_aired": "2014-06-30T02:00:00.000Z",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 1,
                     *           "title": "Pilot",
                     *           "ids": {
                     *             "trakt": 497,
                     *             "tvdb": null,
                     *             "imdb": "tt3203968",
                     *             "tmdb": 983732
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Leftovers",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 7,
                     *             "slug": "the-leftovers",
                     *             "tvdb": 269689,
                     *             "imdb": "tt2699128",
                     *             "tmdb": 54344
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        first_aired?: string;
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: unknown;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get season premieres": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "first_aired": "2014-06-30T02:00:00.000Z",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 1,
                     *           "title": "Pilot",
                     *           "ids": {
                     *             "trakt": 497,
                     *             "tvdb": null,
                     *             "imdb": "tt3203968",
                     *             "tmdb": 983732
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Leftovers",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 7,
                     *             "slug": "the-leftovers",
                     *             "tvdb": 269689,
                     *             "imdb": "tt2699128",
                     *             "tmdb": 54344
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "first_aired": "2014-10-13T01:00:00.000Z",
                     *         "episode": {
                     *           "season": 5,
                     *           "number": 1,
                     *           "title": "5x1",
                     *           "ids": {
                     *             "trakt": 163,
                     *             "tvdb": null,
                     *             "imdb": "",
                     *             "tmdb": 975949
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Walking Dead",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 2,
                     *             "slug": "the-walking-dead",
                     *             "tvdb": 153021,
                     *             "imdb": "tt1520211",
                     *             "tmdb": 1402
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        first_aired: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: unknown;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get finales": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "first_aired": "2014-06-30T02:00:00.000Z",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 10,
                     *           "title": "Season Finale",
                     *           "ids": {
                     *             "trakt": 497,
                     *             "tvdb": null,
                     *             "imdb": "tt3203968",
                     *             "tmdb": 983732
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Leftovers",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 7,
                     *             "slug": "the-leftovers",
                     *             "tvdb": 269689,
                     *             "imdb": "tt2699128",
                     *             "tmdb": 54344
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "first_aired": "2014-10-13T01:00:00.000Z",
                     *         "episode": {
                     *           "season": 5,
                     *           "number": 10,
                     *           "title": "5x10",
                     *           "ids": {
                     *             "trakt": 163,
                     *             "tvdb": null,
                     *             "imdb": "",
                     *             "tmdb": 975949
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Walking Dead",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 2,
                     *             "slug": "the-walking-dead",
                     *             "tvdb": 153021,
                     *             "imdb": "tt1520211",
                     *             "tmdb": 1402
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        first_aired: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: unknown;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Guardians of the Galaxy",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 28,
                     *             "slug": "guardians-of-the-galaxy-2014",
                     *             "imdb": "tt2015381",
                     *             "tmdb": 118340
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Get On Up",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 29,
                     *             "slug": "get-on-up-2014",
                     *             "imdb": "tt2473602",
                     *             "tmdb": 239566
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-08",
                     *         "movie": {
                     *           "title": "Teenage Mutant Ninja Turtles",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 30,
                     *             "slug": "teenage-mutant-ninja-turtles-2014",
                     *             "imdb": "tt1291150",
                     *             "tmdb": 98566
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        released: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get streaming releases": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Guardians of the Galaxy",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 28,
                     *             "slug": "guardians-of-the-galaxy-2014",
                     *             "imdb": "tt2015381",
                     *             "tmdb": 118340
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Get On Up",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 29,
                     *             "slug": "get-on-up-2014",
                     *             "imdb": "tt2473602",
                     *             "tmdb": 239566
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-08",
                     *         "movie": {
                     *           "title": "Teenage Mutant Ninja Turtles",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 30,
                     *             "slug": "teenage-mutant-ninja-turtles-2014",
                     *             "imdb": "tt1291150",
                     *             "tmdb": 98566
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        released: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get DVD releases": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Guardians of the Galaxy",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 28,
                     *             "slug": "guardians-of-the-galaxy-2014",
                     *             "imdb": "tt2015381",
                     *             "tmdb": 118340
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Get On Up",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 29,
                     *             "slug": "get-on-up-2014",
                     *             "imdb": "tt2473602",
                     *             "tmdb": 239566
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-08",
                     *         "movie": {
                     *           "title": "Teenage Mutant Ninja Turtles",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 30,
                     *             "slug": "teenage-mutant-ninja-turtles-2014",
                     *             "imdb": "tt1291150",
                     *             "tmdb": 98566
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        released: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "first_aired": "2014-07-14T01:00:00.000Z",
                     *         "episode": {
                     *           "season": 7,
                     *           "number": 4,
                     *           "title": "Death is Not the End",
                     *           "ids": {
                     *             "trakt": 443,
                     *             "tvdb": 4851180,
                     *             "imdb": "tt3500614",
                     *             "tmdb": 988123
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "True Blood",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 5,
                     *             "slug": "true-blood",
                     *             "tvdb": 82283,
                     *             "imdb": "tt0844441",
                     *             "tmdb": 10545
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "first_aired": "2014-07-14T02:00:00.000Z",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 3,
                     *           "title": "Two Boats and a Helicopter",
                     *           "ids": {
                     *             "trakt": 499,
                     *             "tvdb": 4854797,
                     *             "imdb": "tt3631218",
                     *             "tmdb": 988346
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Leftovers",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 7,
                     *             "slug": "the-leftovers",
                     *             "tvdb": 269689,
                     *             "imdb": "tt2699128",
                     *             "tmdb": 54344
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "first_aired": "2014-07-21T01:00:00.000Z",
                     *         "episode": {
                     *           "season": 7,
                     *           "number": 5,
                     *           "title": "Return to Oz",
                     *           "ids": {
                     *             "trakt": 444,
                     *             "tvdb": 4851181,
                     *             "imdb": "tt3500616",
                     *             "tmdb": 988124
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "True Blood",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 5,
                     *             "slug": "true-blood",
                     *             "tvdb": 82283,
                     *             "imdb": "tt0844441",
                     *             "tmdb": 10545
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "first_aired": "2014-07-21T02:00:00.000Z",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 4,
                     *           "title": "B.J. and the A.C.",
                     *           "ids": {
                     *             "trakt": 500,
                     *             "tvdb": 4854798,
                     *             "imdb": "tt3594942",
                     *             "tmdb": 988347
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Leftovers",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 7,
                     *             "slug": "the-leftovers",
                     *             "tvdb": 269689,
                     *             "imdb": "tt2699128",
                     *             "tmdb": 54344
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        first_aired: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get new shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "first_aired": "2014-06-30T02:00:00.000Z",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 1,
                     *           "title": "Pilot",
                     *           "ids": {
                     *             "trakt": 497,
                     *             "tvdb": null,
                     *             "imdb": "tt3203968",
                     *             "tmdb": 983732
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Leftovers",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 7,
                     *             "slug": "the-leftovers",
                     *             "tvdb": 269689,
                     *             "imdb": "tt2699128",
                     *             "tmdb": 54344
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        first_aired?: string;
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: unknown;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get season premieres": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "first_aired": "2014-06-30T02:00:00.000Z",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 10,
                     *           "title": "Season Finale",
                     *           "ids": {
                     *             "trakt": 497,
                     *             "tvdb": null,
                     *             "imdb": "tt3203968",
                     *             "tmdb": 983732
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Leftovers",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 7,
                     *             "slug": "the-leftovers",
                     *             "tvdb": 269689,
                     *             "imdb": "tt2699128",
                     *             "tmdb": 54344
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "first_aired": "2014-10-13T01:00:00.000Z",
                     *         "episode": {
                     *           "season": 5,
                     *           "number": 10,
                     *           "title": "5x10",
                     *           "ids": {
                     *             "trakt": 163,
                     *             "tvdb": null,
                     *             "imdb": "",
                     *             "tmdb": 975949
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Walking Dead",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 2,
                     *             "slug": "the-walking-dead",
                     *             "tvdb": 153021,
                     *             "imdb": "tt1520211",
                     *             "tmdb": 1402
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        first_aired: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: unknown;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get finales": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "first_aired": "2014-06-30T02:00:00.000Z",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 1,
                     *           "title": "Pilot",
                     *           "ids": {
                     *             "trakt": 497,
                     *             "tvdb": null,
                     *             "imdb": "tt3203968",
                     *             "tmdb": 983732
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Leftovers",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 7,
                     *             "slug": "the-leftovers",
                     *             "tvdb": 269689,
                     *             "imdb": "tt2699128",
                     *             "tmdb": 54344
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "first_aired": "2014-10-13T01:00:00.000Z",
                     *         "episode": {
                     *           "season": 5,
                     *           "number": 1,
                     *           "title": "5x1",
                     *           "ids": {
                     *             "trakt": 163,
                     *             "tvdb": null,
                     *             "imdb": "",
                     *             "tmdb": 975949
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "The Walking Dead",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 2,
                     *             "slug": "the-walking-dead",
                     *             "tvdb": 153021,
                     *             "imdb": "tt1520211",
                     *             "tmdb": 1402
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        first_aired: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: unknown;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Guardians of the Galaxy",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 28,
                     *             "slug": "guardians-of-the-galaxy-2014",
                     *             "imdb": "tt2015381",
                     *             "tmdb": 118340
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Get On Up",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 29,
                     *             "slug": "get-on-up-2014",
                     *             "imdb": "tt2473602",
                     *             "tmdb": 239566
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-08",
                     *         "movie": {
                     *           "title": "Teenage Mutant Ninja Turtles",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 30,
                     *             "slug": "teenage-mutant-ninja-turtles-2014",
                     *             "imdb": "tt1291150",
                     *             "tmdb": 98566
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        released: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get streaming releases": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Guardians of the Galaxy",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 28,
                     *             "slug": "guardians-of-the-galaxy-2014",
                     *             "imdb": "tt2015381",
                     *             "tmdb": 118340
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Get On Up",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 29,
                     *             "slug": "get-on-up-2014",
                     *             "imdb": "tt2473602",
                     *             "tmdb": 239566
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-08",
                     *         "movie": {
                     *           "title": "Teenage Mutant Ninja Turtles",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 30,
                     *             "slug": "teenage-mutant-ninja-turtles-2014",
                     *             "imdb": "tt1291150",
                     *             "tmdb": 98566
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        released: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get DVD releases": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Start the calendar on this date.
                 * @example 2014-09-01
                 */
                start_date: string;
                /**
                 * @description Number of days to display.
                 * @example 7
                 */
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-End-Date"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Guardians of the Galaxy",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 28,
                     *             "slug": "guardians-of-the-galaxy-2014",
                     *             "imdb": "tt2015381",
                     *             "tmdb": 118340
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-01",
                     *         "movie": {
                     *           "title": "Get On Up",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 29,
                     *             "slug": "get-on-up-2014",
                     *             "imdb": "tt2473602",
                     *             "tmdb": 239566
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "released": "2014-08-08",
                     *         "movie": {
                     *           "title": "Teenage Mutant Ninja Turtles",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 30,
                     *             "slug": "teenage-mutant-ninja-turtles-2014",
                     *             "imdb": "tt1291150",
                     *             "tmdb": 98566
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        released: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Check into an item": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    movie?: {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    };
                    sharing?: {
                        twitter?: boolean;
                        mastodon?: boolean;
                        tumblr?: boolean;
                    };
                    message?: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        watched_at?: string;
                        sharing?: {
                            twitter?: boolean;
                            mastodon?: boolean;
                            tumblr?: boolean;
                        };
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    } | {
                        id?: number;
                        watched_at?: string;
                        sharing?: {
                            twitter?: boolean;
                            mastodon?: boolean;
                            tumblr?: boolean;
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    } | {
                        id?: number;
                        watched_at?: string;
                        sharing?: {
                            twitter?: boolean;
                            mastodon?: boolean;
                            tumblr?: boolean;
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: unknown;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    };
                };
            };
            /** @description There is already a checkin in progress. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "expires_at": "2014-10-15T22:21:29.000Z"
                     *     } */
                    "application/json": {
                        expires_at?: string;
                    };
                };
            };
        };
    };
    "Delete any active checkins": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get certifications": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example movies */
                type: "movies" | "shows";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "us": [
                     *         {
                     *           "name": "G",
                     *           "slug": "g",
                     *           "description": "All Ages"
                     *         },
                     *         {
                     *           "name": "PG",
                     *           "slug": "pg",
                     *           "description": "Parental Guidance Suggested"
                     *         },
                     *         {
                     *           "name": "PG-13",
                     *           "slug": "pg-13",
                     *           "description": "Parents Strongly Cautioned - Ages 13+ Recommended"
                     *         },
                     *         {
                     *           "name": "R",
                     *           "slug": "r",
                     *           "description": "Mature Audiences - Ages 17+ Recommended"
                     *         },
                     *         {
                     *           "name": "Not Rated",
                     *           "slug": "nr",
                     *           "description": "Not Rated"
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        us?: {
                            name: string;
                            slug: string;
                            description: string;
                        }[];
                    };
                };
            };
        };
    };
    "Post a comment": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    movie?: {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    };
                    comment?: string;
                    spoiler?: boolean;
                    sharing?: {
                        twitter?: boolean;
                        tumblr?: boolean;
                        medium?: boolean;
                    };
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: unknown;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                        sharing?: {
                            twitter?: boolean;
                            tumblr?: boolean;
                            medium?: boolean;
                        };
                    } | {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: unknown;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Get a comment or reply": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific comment ID.
                 * @example 417
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Item-ID"?: string;
                    "X-Item-Type"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1,
                     *       "parent_id": 0,
                     *       "created_at": "2010-11-03T06:30:13.000Z",
                     *       "comment": "Agreed, this show is awesome. AMC in general has awesome shows.",
                     *       "spoiler": false,
                     *       "review": false,
                     *       "replies": 1,
                     *       "likes": 0,
                     *       "user_stats": {
                     *         "rating": 8,
                     *         "play_count": 1,
                     *         "completed_count": 1
                     *       },
                     *       "user": {
                     *         "username": "justin",
                     *         "private": false,
                     *         "name": "Justin Nemeth",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "justin"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: number;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Update a comment or reply": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific comment ID.
                 * @example 417
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "comment": "Agreed, this show is awesome. AMC in general has awesome shows and I can't wait to see what they come up with next.",
                 *       "spoiler": false
                 *     } */
                "application/json": {
                    comment?: string;
                    spoiler?: boolean;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1,
                     *       "parent_id": 0,
                     *       "created_at": "2010-11-03T06:30:13.000Z",
                     *       "updated_at": "2010-11-13T06:30:13.000Z",
                     *       "comment": "Agreed, this show is awesome. AMC in general has awesome shows and I can't wait to see what they come up with next.",
                     *       "spoiler": false,
                     *       "review": false,
                     *       "replies": 1,
                     *       "likes": 0,
                     *       "user_stats": {
                     *         "rating": null,
                     *         "play_count": 1,
                     *         "completed_count": 1
                     *       },
                     *       "user": {
                     *         "username": "justin",
                     *         "private": false,
                     *         "name": "Justin Nemeth",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "justin"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: unknown;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Delete a comment or reply": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific comment ID.
                 * @example 417
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get replies for a comment": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific comment ID.
                 * @example 417
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 19,
                     *         "parent_id": 1,
                     *         "created_at": "2014-07-27T23:06:59.000Z",
                     *         "updated_at": "2014-07-27T23:06:59.000Z",
                     *         "comment": "Season 2 has really picked up the action!",
                     *         "spoiler": true,
                     *         "review": false,
                     *         "replies": 0,
                     *         "likes": 0,
                     *         "user_stats": {
                     *           "rating": 8,
                     *           "play_count": 1,
                     *           "completed_count": 1
                     *         },
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: number;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Post a reply for a comment": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific comment ID.
                 * @example 417
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "comment": "Couldn't agree more with your review!",
                 *       "spoiler": false
                 *     } */
                "application/json": {
                    comment?: string;
                    spoiler?: boolean;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 2,
                     *       "parent_id": 1,
                     *       "created_at": "2014-09-01T06:30:13.000Z",
                     *       "updated_at": "2014-09-01T06:30:13.000Z",
                     *       "comment": "Couldn't agree more with your review!",
                     *       "spoiler": false,
                     *       "review": false,
                     *       "replies": 0,
                     *       "likes": 0,
                     *       "user_stats": {
                     *         "rating": null,
                     *         "play_count": 1,
                     *         "completed_count": 1
                     *       },
                     *       "user": {
                     *         "username": "justin",
                     *         "private": false,
                     *         "name": "Justin Nemeth",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "justin"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: unknown;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Get the attached media item": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific comment ID.
                 * @example 417
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "show",
                     *       "show": {
                     *         "title": "Game of Thrones",
                     *         "year": 2011,
                     *         "ids": {
                     *           "trakt": 353,
                     *           "slug": "game-of-thrones",
                     *           "tvdb": 121361,
                     *           "imdb": "tt0944947",
                     *           "tmdb": 1399
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        type?: string;
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    };
                };
            };
        };
    };
    "Get all users who liked a comment": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific comment ID.
                 * @example 417
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "liked_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "liked_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        liked_at: string;
                        user: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Like a comment": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific comment ID.
                 * @example 417
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Remove like on a comment": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific comment ID.
                 * @example 417
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get trending comments": {
        parameters: {
            query?: {
                /**
                 * @description include comment replies
                 * @example false
                 */
                include_replies?: string;
            };
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example all */
                comment_type: "all" | "reviews" | "shouts";
                /** @example all */
                type: "all" | "movies" | "shows" | "seasons" | "episodes" | "lists";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "type": "movie",
                     *         "movie": {
                     *           "title": "Batman Begins",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "batman-begins-2005",
                     *             "imdb": "tt0372784",
                     *             "tmdb": 272
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 267,
                     *           "comment": "Great kickoff to a new Batman trilogy!",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-25T00:14:57.000Z",
                     *           "updated_at": "2015-04-25T00:14:57.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 10,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "show",
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 199,
                     *           "comment": "Skyler, I AM THE DANGER.",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-02-18T06:02:30.000Z",
                     *           "updated_at": "2015-02-18T06:02:30.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 10,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "season",
                     *         "season": {
                     *           "number": 1,
                     *           "ids": {
                     *             "trakt": 3958,
                     *             "tvdb": 274431,
                     *             "tmdb": 60394
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Gotham",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 869,
                     *             "slug": "gotham",
                     *             "tvdb": 274431,
                     *             "imdb": "tt3749900",
                     *             "tmdb": 60708
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 220,
                     *           "comment": "Kicking off season 1 for a new Batman show.",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-21T06:53:25.000Z",
                     *           "updated_at": "2015-04-21T06:53:25.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 8,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "episode",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 1,
                     *           "title": "Jim Gordon",
                     *           "ids": {
                     *             "trakt": 63958,
                     *             "tvdb": 4768720,
                     *             "imdb": "tt3216414",
                     *             "tmdb": 975968
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Gotham",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 869,
                     *             "slug": "gotham",
                     *             "tvdb": 274431,
                     *             "imdb": "tt3749900",
                     *             "tmdb": 60708
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 229,
                     *           "comment": "Is this the OC?",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-21T15:42:31.000Z",
                     *           "updated_at": "2015-04-21T15:42:31.000Z",
                     *           "replies": 1,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 7,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "list",
                     *         "list": {
                     *           "name": "Star Wars",
                     *           "description": "The complete Star Wars saga!",
                     *           "privacy": "public",
                     *           "share_link": "https://trakt.tv/lists/51",
                     *           "display_numbers": false,
                     *           "allow_comments": true,
                     *           "updated_at": "2015-04-22T22:01:39.000Z",
                     *           "item_count": 8,
                     *           "comment_count": 0,
                     *           "likes": 0,
                     *           "ids": {
                     *             "trakt": 51,
                     *             "slug": "star-wars"
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 268,
                     *           "comment": "May the 4th be with you!",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2014-12-08T17:34:51.000Z",
                     *           "updated_at": "2014-12-08T17:34:51.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": null,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        type: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        comment: {
                            id?: number;
                            comment?: string;
                            spoiler?: boolean;
                            review?: boolean;
                            parent_id?: number;
                            created_at?: string;
                            updated_at?: string;
                            replies?: number;
                            likes?: number;
                            user_stats?: {
                                rating?: number | null;
                                play_count?: number;
                                completed_count?: number;
                            };
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        season?: {
                            number?: number;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                tmdb?: number;
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        list?: {
                            name?: string;
                            description?: string;
                            privacy?: string;
                            share_link?: string;
                            display_numbers?: boolean;
                            allow_comments?: boolean;
                            updated_at?: string;
                            item_count?: number;
                            comment_count?: number;
                            likes?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get recently created comments": {
        parameters: {
            query?: {
                /**
                 * @description include comment replies
                 * @example false
                 */
                include_replies?: string;
            };
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example all */
                comment_type: "all" | "reviews" | "shouts";
                /** @example all */
                type: "all" | "movies" | "shows" | "seasons" | "episodes" | "lists";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "type": "movie",
                     *         "movie": {
                     *           "title": "Batman Begins",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "batman-begins-2005",
                     *             "imdb": "tt0372784",
                     *             "tmdb": 272
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 267,
                     *           "comment": "Great kickoff to a new Batman trilogy!",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-25T00:14:57.000Z",
                     *           "updated_at": "2015-04-25T00:14:57.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 10,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "show",
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 199,
                     *           "comment": "Skyler, I AM THE DANGER.",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-02-18T06:02:30.000Z",
                     *           "updated_at": "2015-02-18T06:02:30.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 10,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "season",
                     *         "season": {
                     *           "number": 1,
                     *           "ids": {
                     *             "trakt": 3958,
                     *             "tvdb": 274431,
                     *             "tmdb": 60394
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Gotham",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 869,
                     *             "slug": "gotham",
                     *             "tvdb": 274431,
                     *             "imdb": "tt3749900",
                     *             "tmdb": 60708
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 220,
                     *           "comment": "Kicking off season 1 for a new Batman show.",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-21T06:53:25.000Z",
                     *           "updated_at": "2015-04-21T06:53:25.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 8,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "episode",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 1,
                     *           "title": "Jim Gordon",
                     *           "ids": {
                     *             "trakt": 63958,
                     *             "tvdb": 4768720,
                     *             "imdb": "tt3216414",
                     *             "tmdb": 975968
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Gotham",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 869,
                     *             "slug": "gotham",
                     *             "tvdb": 274431,
                     *             "imdb": "tt3749900",
                     *             "tmdb": 60708
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 229,
                     *           "comment": "Is this the OC?",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-21T15:42:31.000Z",
                     *           "updated_at": "2015-04-21T15:42:31.000Z",
                     *           "replies": 1,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 7,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "list",
                     *         "list": {
                     *           "name": "Star Wars",
                     *           "description": "The complete Star Wars saga!",
                     *           "privacy": "public",
                     *           "share_link": "https://trakt.tv/lists/51",
                     *           "display_numbers": false,
                     *           "allow_comments": true,
                     *           "updated_at": "2015-04-22T22:01:39.000Z",
                     *           "item_count": 8,
                     *           "comment_count": 0,
                     *           "likes": 0,
                     *           "ids": {
                     *             "trakt": 51,
                     *             "slug": "star-wars"
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 268,
                     *           "comment": "May the 4th be with you!",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2014-12-08T17:34:51.000Z",
                     *           "updated_at": "2014-12-08T17:34:51.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": null,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        type: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        comment: {
                            id?: number;
                            comment?: string;
                            spoiler?: boolean;
                            review?: boolean;
                            parent_id?: number;
                            created_at?: string;
                            updated_at?: string;
                            replies?: number;
                            likes?: number;
                            user_stats?: {
                                rating?: number | null;
                                play_count?: number;
                                completed_count?: number;
                            };
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        season?: {
                            number?: number;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                tmdb?: number;
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        list?: {
                            name?: string;
                            description?: string;
                            privacy?: string;
                            share_link?: string;
                            display_numbers?: boolean;
                            allow_comments?: boolean;
                            updated_at?: string;
                            item_count?: number;
                            comment_count?: number;
                            likes?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get recently updated comments": {
        parameters: {
            query?: {
                /**
                 * @description include comment replies
                 * @example false
                 */
                include_replies?: string;
            };
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example all */
                comment_type: "all" | "reviews" | "shouts";
                /** @example all */
                type: "all" | "movies" | "shows" | "seasons" | "episodes" | "lists";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "type": "movie",
                     *         "movie": {
                     *           "title": "Batman Begins",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "batman-begins-2005",
                     *             "imdb": "tt0372784",
                     *             "tmdb": 272
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 267,
                     *           "comment": "Great kickoff to a new Batman trilogy!",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-25T00:14:57.000Z",
                     *           "updated_at": "2015-04-25T00:14:57.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 10,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "show",
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 199,
                     *           "comment": "Skyler, I AM THE DANGER.",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-02-18T06:02:30.000Z",
                     *           "updated_at": "2015-02-18T06:02:30.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 10,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "season",
                     *         "season": {
                     *           "number": 1,
                     *           "ids": {
                     *             "trakt": 3958,
                     *             "tvdb": 274431,
                     *             "tmdb": 60394
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Gotham",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 869,
                     *             "slug": "gotham",
                     *             "tvdb": 274431,
                     *             "imdb": "tt3749900",
                     *             "tmdb": 60708
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 220,
                     *           "comment": "Kicking off season 1 for a new Batman show.",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-21T06:53:25.000Z",
                     *           "updated_at": "2015-04-21T06:53:25.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 8,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "episode",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 1,
                     *           "title": "Jim Gordon",
                     *           "ids": {
                     *             "trakt": 63958,
                     *             "tvdb": 4768720,
                     *             "imdb": "tt3216414",
                     *             "tmdb": 975968
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Gotham",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 869,
                     *             "slug": "gotham",
                     *             "tvdb": 274431,
                     *             "imdb": "tt3749900",
                     *             "tmdb": 60708
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 229,
                     *           "comment": "Is this the OC?",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-21T15:42:31.000Z",
                     *           "updated_at": "2015-04-21T15:42:31.000Z",
                     *           "replies": 1,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 7,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "list",
                     *         "list": {
                     *           "name": "Star Wars",
                     *           "description": "The complete Star Wars saga!",
                     *           "privacy": "public",
                     *           "share_link": "https://trakt.tv/lists/51",
                     *           "display_numbers": false,
                     *           "allow_comments": true,
                     *           "updated_at": "2015-04-22T22:01:39.000Z",
                     *           "item_count": 8,
                     *           "comment_count": 0,
                     *           "likes": 0,
                     *           "ids": {
                     *             "trakt": 51,
                     *             "slug": "star-wars"
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 268,
                     *           "comment": "May the 4th be with you!",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2014-12-08T17:34:51.000Z",
                     *           "updated_at": "2014-12-08T17:34:51.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": null,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        type: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        comment: {
                            id?: number;
                            comment?: string;
                            spoiler?: boolean;
                            review?: boolean;
                            parent_id?: number;
                            created_at?: string;
                            updated_at?: string;
                            replies?: number;
                            likes?: number;
                            user_stats?: {
                                rating?: number | null;
                                play_count?: number;
                                completed_count?: number;
                            };
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        season?: {
                            number?: number;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                tmdb?: number;
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        list?: {
                            name?: string;
                            description?: string;
                            privacy?: string;
                            share_link?: string;
                            display_numbers?: boolean;
                            allow_comments?: boolean;
                            updated_at?: string;
                            item_count?: number;
                            comment_count?: number;
                            likes?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get countries": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example movies */
                type: "movies" | "shows";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "Australia",
                     *         "code": "au"
                     *       },
                     *       {
                     *         "name": "Japan",
                     *         "code": "ja"
                     *       },
                     *       {
                     *         "name": "United States",
                     *         "code": "us"
                     *       }
                     *     ] */
                    "application/json": {
                        name: string;
                        code: string;
                    }[];
                };
            };
        };
    };
    "Get genres": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example movies */
                type: "movies" | "shows";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /genres/movies?extended=subgenres
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name: string;
                        slug: string;
                    }[] | {
                        name: string;
                        slug: string;
                        subgenres: {
                            name: string;
                            slug: string;
                        }[];
                    }[];
                };
            };
        };
    };
    "Get languages": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example movies */
                type: "movies" | "shows";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "English",
                     *         "code": "en"
                     *       },
                     *       {
                     *         "name": "Italian",
                     *         "code": "it"
                     *       },
                     *       {
                     *         "name": "Polish",
                     *         "code": "pl"
                     *       }
                     *     ] */
                    "application/json": {
                        name: string;
                        code: string;
                    }[];
                };
            };
        };
    };
    "Get trending lists": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example personal */
                type: "personal" | "official";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "like_count": 5,
                     *         "comment_count": 5,
                     *         "list": {
                     *           "name": "Incredible Thoughts",
                     *           "description": "How could my brain conceive them?",
                     *           "privacy": "public",
                     *           "share_link": "https://trakt.tv/lists/1337",
                     *           "type": "personal",
                     *           "display_numbers": true,
                     *           "allow_comments": true,
                     *           "sort_by": "rank",
                     *           "sort_how": "asc",
                     *           "created_at": "2014-10-11T17:00:54.000Z",
                     *           "updated_at": "2014-10-11T17:00:54.000Z",
                     *           "item_count": 50,
                     *           "comment_count": 10,
                     *           "likes": 99,
                     *           "ids": {
                     *             "trakt": 1337,
                     *             "slug": "incredible-thoughts"
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin Nemeth",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "like_count": 4,
                     *         "comment_count": 4,
                     *         "list": {
                     *           "name": "Top Chihuahua Movies",
                     *           "description": "So cute.",
                     *           "privacy": "public",
                     *           "share_link": "https://trakt.tv/lists/1338",
                     *           "type": "personal",
                     *           "display_numbers": true,
                     *           "allow_comments": true,
                     *           "sort_by": "rank",
                     *           "sort_how": "asc",
                     *           "created_at": "2015-10-11T17:00:54.000Z",
                     *           "updated_at": "2015-10-11T17:00:54.000Z",
                     *           "item_count": 50,
                     *           "comment_count": 20,
                     *           "likes": 109,
                     *           "ids": {
                     *             "trakt": 1338,
                     *             "slug": "top-chihuahua-movies"
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin Nemeth",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        like_count: number;
                        comment_count: number;
                        list: {
                            name?: string;
                            description?: string;
                            privacy?: string;
                            share_link?: string;
                            type?: string;
                            display_numbers?: boolean;
                            allow_comments?: boolean;
                            sort_by?: string;
                            sort_how?: string;
                            created_at?: string;
                            updated_at?: string;
                            item_count?: number;
                            comment_count?: number;
                            likes?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                            };
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get popular lists": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example personal */
                type: "personal" | "official";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "like_count": 109,
                     *         "comment_count": 20,
                     *         "list": {
                     *           "name": "Top Chihuahua Movies",
                     *           "description": "So cute.",
                     *           "privacy": "public",
                     *           "share_link": "https://trakt.tv/lists/1338",
                     *           "type": "personal",
                     *           "display_numbers": true,
                     *           "allow_comments": true,
                     *           "sort_by": "rank",
                     *           "sort_how": "asc",
                     *           "created_at": "2015-10-11T17:00:54.000Z",
                     *           "updated_at": "2015-10-11T17:00:54.000Z",
                     *           "item_count": 50,
                     *           "comment_count": 20,
                     *           "likes": 109,
                     *           "ids": {
                     *             "trakt": 1338,
                     *             "slug": "top-chihuahua-movies"
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin Nemeth",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "like_count": 99,
                     *         "comment_count": 10,
                     *         "list": {
                     *           "name": "Incredible Thoughts",
                     *           "description": "How could my brain conceive them?",
                     *           "privacy": "public",
                     *           "share_link": "https://trakt.tv/lists/1337",
                     *           "type": "personal",
                     *           "display_numbers": true,
                     *           "allow_comments": true,
                     *           "sort_by": "rank",
                     *           "sort_how": "asc",
                     *           "created_at": "2014-10-11T17:00:54.000Z",
                     *           "updated_at": "2014-10-11T17:00:54.000Z",
                     *           "item_count": 50,
                     *           "comment_count": 10,
                     *           "likes": 99,
                     *           "ids": {
                     *             "trakt": 1337,
                     *             "slug": "incredible-thoughts"
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin Nemeth",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        like_count: number;
                        comment_count: number;
                        list: {
                            name?: string;
                            description?: string;
                            privacy?: string;
                            share_link?: string;
                            type?: string;
                            display_numbers?: boolean;
                            allow_comments?: boolean;
                            sort_by?: string;
                            sort_how?: string;
                            created_at?: string;
                            updated_at?: string;
                            item_count?: number;
                            comment_count?: number;
                            likes?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                            };
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID
                 * @example 55
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Sort-By"?: string;
                    "X-Sort-How"?: string;
                    "X-List-ID"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "name": "Star Wars in machete order",
                     *       "description": "Next time you want to introduce someone to Star Wars for the first time, watch the films with them in this order: IV, V, II, III, VI.",
                     *       "privacy": "public",
                     *       "share_link": "https://trakt.tv/lists/55",
                     *       "type": "personal",
                     *       "display_numbers": true,
                     *       "allow_comments": true,
                     *       "sort_by": "rank",
                     *       "sort_how": "asc",
                     *       "created_at": "2014-10-11T17:00:54.000Z",
                     *       "updated_at": "2014-10-11T17:00:54.000Z",
                     *       "item_count": 5,
                     *       "comment_count": 0,
                     *       "likes": 0,
                     *       "ids": {
                     *         "trakt": 55,
                     *         "slug": "star-wars-in-machete-order"
                     *       },
                     *       "user": {
                     *         "username": "sean",
                     *         "private": false,
                     *         "name": "Sean Rudford",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "sean"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Get all users who liked a list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID
                 * @example 55
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    "X-List-ID"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "liked_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "liked_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        liked_at: string;
                        user: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Like a list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID
                 * @example 55
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Remove like on a list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID
                 * @example 55
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get items on a list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID
                 * @example 55
                 */
                id: string;
                /**
                 * @description Filter for a specific item type
                 * @example movies
                 */
                type: "movie" | "show" | "season" | "episode" | "person";
                /**
                 * @description Sort by a specific property
                 * @example rank
                 */
                sort_by: "rank" | "added" | "title" | "released" | "runtime" | "popularity" | "random" | "percentage" | "imdb_rating" | "tmdb_rating" | "rt_tomatometer" | "rt_audience" | "metascore" | "votes" | "imdb_votes" | "tmdb_votes" | "my_rating" | "watched" | "collected";
                /**
                 * @description Sort direction
                 * @example asc
                 */
                sort_how: "asc" | "desc";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Private-User"?: string;
                    "X-Sort-By"?: string;
                    "X-Sort-How"?: string;
                    "X-List-ID"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "rank": 1,
                     *         "id": 101,
                     *         "listed_at": "2014-06-16T06:07:12.000Z",
                     *         "notes": null,
                     *         "type": "movie",
                     *         "movie": {
                     *           "title": "Star Wars: Episode IV - A New Hope",
                     *           "year": 1977,
                     *           "ids": {
                     *             "trakt": 12,
                     *             "slug": "star-wars-episode-iv-a-new-hope-1977",
                     *             "imdb": "tt0076759",
                     *             "tmdb": 11
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "rank": 2,
                     *         "id": 102,
                     *         "listed_at": "2014-06-16T06:07:12.000Z",
                     *         "notes": null,
                     *         "type": "show",
                     *         "show": {
                     *           "title": "The Walking Dead",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 2,
                     *             "slug": "the-walking-dead",
                     *             "tvdb": 153021,
                     *             "imdb": "tt1520211",
                     *             "tmdb": 1402
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "rank": 3,
                     *         "id": 103,
                     *         "listed_at": "2014-06-16T06:07:12.000Z",
                     *         "notes": null,
                     *         "type": "season",
                     *         "season": {
                     *           "number": 1,
                     *           "ids": {
                     *             "tvdb": 30272,
                     *             "tmdb": 3572
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "rank": 4,
                     *         "id": 104,
                     *         "listed_at": "2014-06-17T06:52:03.000Z",
                     *         "notes": null,
                     *         "type": "episode",
                     *         "episode": {
                     *           "season": 0,
                     *           "number": 2,
                     *           "title": "Wedding Day",
                     *           "ids": {
                     *             "trakt": 2,
                     *             "tvdb": 3859791,
                     *             "imdb": null,
                     *             "tmdb": 62133
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "rank": 5,
                     *         "id": 105,
                     *         "listed_at": "2014-06-17T06:52:03.000Z",
                     *         "notes": null,
                     *         "type": "person",
                     *         "person": {
                     *           "name": "Garrett Hedlund",
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "garrett-hedlund",
                     *             "imdb": "nm1330560",
                     *             "tmdb": 9828
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: unknown;
                        type: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        season?: {
                            number?: number;
                            ids?: {
                                tvdb?: number;
                                tmdb?: number;
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: number;
                            };
                        };
                        person?: {
                            name?: string;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get all list comments": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID
                 * @example 55
                 */
                id: number;
                /**
                 * @description how to sort
                 * @example newest
                 */
                sort: "newest" | "oldest" | "likes" | "replies";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 8,
                     *         "parent_id": 0,
                     *         "created_at": "2011-03-25T22:35:17.000Z",
                     *         "updated_at": "2011-03-25T22:35:17.000Z",
                     *         "comment": "Can't wait to watch everything on this epic list!",
                     *         "spoiler": false,
                     *         "review": false,
                     *         "replies": 0,
                     *         "likes": 0,
                     *         "user_stats": {
                     *           "rating": null,
                     *           "play_count": 1,
                     *           "completed_count": 1
                     *         },
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: unknown;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get trending movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    "X-Trending-User-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "watchers": 21,
                     *         "movie": {
                     *           "title": "TRON: Legacy",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "tron-legacy-2010",
                     *             "imdb": "tt1104001",
                     *             "tmdb": 20526
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watchers": 17,
                     *         "movie": {
                     *           "title": "The Dark Knight",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 4,
                     *             "slug": "the-dark-knight-2008",
                     *             "imdb": "tt0468569",
                     *             "tmdb": 155
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        watchers: number;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get popular movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "The Dark Knight",
                     *         "year": 2008,
                     *         "ids": {
                     *           "trakt": 16,
                     *           "slug": "the-dark-knight-2008",
                     *           "imdb": "tt0468569",
                     *           "tmdb": 155
                     *         }
                     *       },
                     *       {
                     *         "title": "Fight Club",
                     *         "year": 1999,
                     *         "ids": {
                     *           "trakt": 727,
                     *           "slug": "fight-club-1999",
                     *           "imdb": "tt0137523",
                     *           "tmdb": 550
                     *         }
                     *       },
                     *       {
                     *         "title": "Jurassic Park",
                     *         "year": 1993,
                     *         "ids": {
                     *           "trakt": 393,
                     *           "slug": "jurassic-park-1993",
                     *           "imdb": "tt0107290",
                     *           "tmdb": 329
                     *         }
                     *       },
                     *       {
                     *         "title": "Back to the Future",
                     *         "year": 1985,
                     *         "ids": {
                     *           "trakt": 308,
                     *           "slug": "back-to-the-future-1985",
                     *           "imdb": "tt0088763",
                     *           "tmdb": 105
                     *         }
                     *       },
                     *       {
                     *         "title": "The Shawshank Redemption",
                     *         "year": 1994,
                     *         "ids": {
                     *           "trakt": 231,
                     *           "slug": "the-shawshank-redemption-1994",
                     *           "imdb": "tt0111161",
                     *           "tmdb": 278
                     *         }
                     *       },
                     *       {
                     *         "title": "The Social Network",
                     *         "year": 2010,
                     *         "ids": {
                     *           "trakt": 98,
                     *           "slug": "the-social-network-2010",
                     *           "imdb": "tt1285016",
                     *           "tmdb": 37799
                     *         }
                     *       },
                     *       {
                     *         "title": "Star Wars: Episode IV - A New Hope",
                     *         "year": 1977,
                     *         "ids": {
                     *           "trakt": 738,
                     *           "slug": "star-wars-episode-iv-a-new-hope-1977",
                     *           "imdb": "tt0076759",
                     *           "tmdb": 11
                     *         }
                     *       },
                     *       {
                     *         "title": "The Lord of the Rings: The Return of the King",
                     *         "year": 2003,
                     *         "ids": {
                     *           "trakt": 374,
                     *           "slug": "the-lord-of-the-rings-the-return-of-the-king-2003",
                     *           "imdb": "tt0167260",
                     *           "tmdb": 122
                     *         }
                     *       },
                     *       {
                     *         "title": "The Lord of the Rings: The Two Towers",
                     *         "year": 2002,
                     *         "ids": {
                     *           "trakt": 373,
                     *           "slug": "the-lord-of-the-rings-the-two-towers-2002",
                     *           "imdb": "tt0167261",
                     *           "tmdb": 121
                     *         }
                     *       },
                     *       {
                     *         "title": "The Matrix",
                     *         "year": 1999,
                     *         "ids": {
                     *           "trakt": 269,
                     *           "slug": "the-matrix-1999",
                     *           "imdb": "tt0133093",
                     *           "tmdb": 603
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
    };
    "Get the most favorited movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Time period.
                 * @example weekly
                 */
                period: "daily" | "weekly" | "monthly" | "all";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "user_count": 76254,
                     *         "movie": {
                     *           "title": "The Dark Knight",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 120,
                     *             "slug": "the-dark-knight-2008",
                     *             "imdb": "tt0468569",
                     *             "tmdb": 155
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "user_count": 61289,
                     *         "movie": {
                     *           "title": "The Avengers",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 14701,
                     *             "slug": "the-avengers-2012",
                     *             "imdb": "tt0848228",
                     *             "tmdb": 24428
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "user_count": 55443,
                     *         "movie": {
                     *           "title": "Despicable Me",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 12496,
                     *             "slug": "despicable-me-2010",
                     *             "imdb": "tt1323594",
                     *             "tmdb": 20352
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        user_count: number;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get the most played movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Time period.
                 * @example weekly
                 */
                period: "daily" | "weekly" | "monthly" | "all";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "watcher_count": 66667,
                     *         "play_count": 109736,
                     *         "collected_count": 27584,
                     *         "movie": {
                     *           "title": "Frozen",
                     *           "year": 2013,
                     *           "ids": {
                     *             "trakt": 77349,
                     *             "slug": "frozen-2013",
                     *             "imdb": "tt2294629",
                     *             "tmdb": 109445
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 76254,
                     *         "play_count": 104242,
                     *         "collected_count": 31877,
                     *         "movie": {
                     *           "title": "The Dark Knight",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 120,
                     *             "slug": "the-dark-knight-2008",
                     *             "imdb": "tt0468569",
                     *             "tmdb": 155
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 81289,
                     *         "play_count": 102512,
                     *         "collected_count": 33837,
                     *         "movie": {
                     *           "title": "The Avengers",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 14701,
                     *             "slug": "the-avengers-2012",
                     *             "imdb": "tt0848228",
                     *             "tmdb": 24428
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 72538,
                     *         "play_count": 97715,
                     *         "collected_count": 26662,
                     *         "movie": {
                     *           "title": "Guardians of the Galaxy",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 82405,
                     *             "slug": "guardians-of-the-galaxy-2014",
                     *             "imdb": "tt2015381",
                     *             "tmdb": 118340
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 8487,
                     *         "play_count": 95830,
                     *         "collected_count": 6252,
                     *         "movie": {
                     *           "title": "Begin Again",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 123759,
                     *             "slug": "begin-again-2013",
                     *             "imdb": "tt1980929",
                     *             "tmdb": 198277
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 74665,
                     *         "play_count": 88597,
                     *         "collected_count": 32044,
                     *         "movie": {
                     *           "title": "Inception",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 16662,
                     *             "slug": "inception-2010",
                     *             "imdb": "tt1375666",
                     *             "tmdb": 27205
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 55443,
                     *         "play_count": 82227,
                     *         "collected_count": 25855,
                     *         "movie": {
                     *           "title": "Despicable Me",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 12496,
                     *             "slug": "despicable-me-2010",
                     *             "imdb": "tt1323594",
                     *             "tmdb": 20352
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 55739,
                     *         "play_count": 81167,
                     *         "collected_count": 27441,
                     *         "movie": {
                     *           "title": "Iron Man 2",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 5355,
                     *             "slug": "iron-man-2-2010",
                     *             "imdb": "tt1228705",
                     *             "tmdb": 10138
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 45472,
                     *         "play_count": 80008,
                     *         "collected_count": 16419,
                     *         "movie": {
                     *           "title": "Big Hero 6",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 112404,
                     *             "slug": "big-hero-6-2014",
                     *             "imdb": "tt2245084",
                     *             "tmdb": 177572
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 63920,
                     *         "play_count": 79998,
                     *         "collected_count": 27721,
                     *         "movie": {
                     *           "title": "Iron Man",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1157,
                     *             "slug": "iron-man-2008",
                     *             "imdb": "tt0371746",
                     *             "tmdb": 1726
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        watcher_count: number;
                        play_count: number;
                        collected_count: number;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get the most watched movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Time period.
                 * @example weekly
                 */
                period: "daily" | "weekly" | "monthly" | "all";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "watcher_count": 81289,
                     *         "play_count": 102512,
                     *         "collected_count": 33837,
                     *         "movie": {
                     *           "title": "The Avengers",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 14701,
                     *             "slug": "the-avengers-2012",
                     *             "imdb": "tt0848228",
                     *             "tmdb": 24428
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 76254,
                     *         "play_count": 104242,
                     *         "collected_count": 31877,
                     *         "movie": {
                     *           "title": "The Dark Knight",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 120,
                     *             "slug": "the-dark-knight-2008",
                     *             "imdb": "tt0468569",
                     *             "tmdb": 155
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 74665,
                     *         "play_count": 88597,
                     *         "collected_count": 32044,
                     *         "movie": {
                     *           "title": "Inception",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 16662,
                     *             "slug": "inception-2010",
                     *             "imdb": "tt1375666",
                     *             "tmdb": 27205
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 72538,
                     *         "play_count": 97715,
                     *         "collected_count": 26662,
                     *         "movie": {
                     *           "title": "Guardians of the Galaxy",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 82405,
                     *             "slug": "guardians-of-the-galaxy-2014",
                     *             "imdb": "tt2015381",
                     *             "tmdb": 118340
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 67228,
                     *         "play_count": 77108,
                     *         "collected_count": 26263,
                     *         "movie": {
                     *           "title": "The Matrix",
                     *           "year": 1999,
                     *           "ids": {
                     *             "trakt": 481,
                     *             "slug": "the-matrix-1999",
                     *             "imdb": "tt0133093",
                     *             "tmdb": 603
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 66667,
                     *         "play_count": 109736,
                     *         "collected_count": 27584,
                     *         "movie": {
                     *           "title": "Frozen",
                     *           "year": 2013,
                     *           "ids": {
                     *             "trakt": 77349,
                     *             "slug": "frozen-2013",
                     *             "imdb": "tt2294629",
                     *             "tmdb": 109445
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 63920,
                     *         "play_count": 79998,
                     *         "collected_count": 27721,
                     *         "movie": {
                     *           "title": "Iron Man",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1157,
                     *             "slug": "iron-man-2008",
                     *             "imdb": "tt0371746",
                     *             "tmdb": 1726
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 62786,
                     *         "play_count": 78930,
                     *         "collected_count": 27693,
                     *         "movie": {
                     *           "title": "Avatar",
                     *           "year": 2009,
                     *           "ids": {
                     *             "trakt": 12269,
                     *             "slug": "avatar-2009",
                     *             "imdb": "tt0499549",
                     *             "tmdb": 19995
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 60803,
                     *         "play_count": 69112,
                     *         "collected_count": 27542,
                     *         "movie": {
                     *           "title": "The Lord of the Rings: The Fellowship of the Ring",
                     *           "year": 2001,
                     *           "ids": {
                     *             "trakt": 88,
                     *             "slug": "the-lord-of-the-rings-the-fellowship-of-the-ring-2001",
                     *             "imdb": "tt0120737",
                     *             "tmdb": 120
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 58057,
                     *         "play_count": 67884,
                     *         "collected_count": 25803,
                     *         "movie": {
                     *           "title": "Batman Begins",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 228,
                     *             "slug": "batman-begins-2005",
                     *             "imdb": "tt0372784",
                     *             "tmdb": 272
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        watcher_count: number;
                        play_count: number;
                        collected_count: number;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get the most Collected movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Time period.
                 * @example weekly
                 */
                period: "daily" | "weekly" | "monthly" | "all";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "watcher_count": 81289,
                     *         "play_count": 102512,
                     *         "collected_count": 33837,
                     *         "movie": {
                     *           "title": "The Avengers",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 14701,
                     *             "slug": "the-avengers-2012",
                     *             "imdb": "tt0848228",
                     *             "tmdb": 24428
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 74665,
                     *         "play_count": 88597,
                     *         "collected_count": 32044,
                     *         "movie": {
                     *           "title": "Inception",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 16662,
                     *             "slug": "inception-2010",
                     *             "imdb": "tt1375666",
                     *             "tmdb": 27205
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 76254,
                     *         "play_count": 104242,
                     *         "collected_count": 31877,
                     *         "movie": {
                     *           "title": "The Dark Knight",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 120,
                     *             "slug": "the-dark-knight-2008",
                     *             "imdb": "tt0468569",
                     *             "tmdb": 155
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 55355,
                     *         "play_count": 67402,
                     *         "collected_count": 30502,
                     *         "movie": {
                     *           "title": "The Hobbit: An Unexpected Journey",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 34097,
                     *             "slug": "the-hobbit-an-unexpected-journey-2012",
                     *             "imdb": "tt0903624",
                     *             "tmdb": 49051
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 56916,
                     *         "play_count": 71767,
                     *         "collected_count": 29062,
                     *         "movie": {
                     *           "title": "The Dark Knight Rises",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 34073,
                     *             "slug": "the-dark-knight-rises-2012",
                     *             "imdb": "tt1345836",
                     *             "tmdb": 49026
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 57603,
                     *         "play_count": 65325,
                     *         "collected_count": 28037,
                     *         "movie": {
                     *           "title": "The Hunger Games",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 51342,
                     *             "slug": "the-hunger-games-2012",
                     *             "imdb": "tt1392170",
                     *             "tmdb": 70160
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 52662,
                     *         "play_count": 63107,
                     *         "collected_count": 27802,
                     *         "movie": {
                     *           "title": "Iron Man 3",
                     *           "year": 2013,
                     *           "ids": {
                     *             "trakt": 50134,
                     *             "slug": "iron-man-3-2013",
                     *             "imdb": "tt1300854",
                     *             "tmdb": 68721
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 63920,
                     *         "play_count": 79998,
                     *         "collected_count": 27721,
                     *         "movie": {
                     *           "title": "Iron Man",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1157,
                     *             "slug": "iron-man-2008",
                     *             "imdb": "tt0371746",
                     *             "tmdb": 1726
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 62786,
                     *         "play_count": 78930,
                     *         "collected_count": 27693,
                     *         "movie": {
                     *           "title": "Avatar",
                     *           "year": 2009,
                     *           "ids": {
                     *             "trakt": 12269,
                     *             "slug": "avatar-2009",
                     *             "imdb": "tt0499549",
                     *             "tmdb": 19995
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 49809,
                     *         "play_count": 60086,
                     *         "collected_count": 27661,
                     *         "movie": {
                     *           "title": "Django Unchained",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 50131,
                     *             "slug": "django-unchained-2012",
                     *             "imdb": "tt1853728",
                     *             "tmdb": 68718
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        watcher_count: number;
                        play_count: number;
                        collected_count: number;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get the most anticipated movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "list_count": 5362,
                     *         "movie": {
                     *           "title": "The Hunger Games: Mockingjay - Part 2",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 89543,
                     *             "slug": "the-hunger-games-mockingjay-part-2-2015",
                     *             "imdb": "tt1951266",
                     *             "tmdb": 131634
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 4405,
                     *         "movie": {
                     *           "title": "Batman v Superman: Dawn of Justice",
                     *           "year": 2016,
                     *           "ids": {
                     *             "trakt": 129583,
                     *             "slug": "batman-v-superman-dawn-of-justice-2016",
                     *             "imdb": "tt2975590",
                     *             "tmdb": 209112
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 4185,
                     *         "movie": {
                     *           "title": "Star Wars: Episode VII - The Force Awakens",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 94024,
                     *             "slug": "star-wars-episode-vii-the-force-awakens-2015",
                     *             "imdb": "tt2488496",
                     *             "tmdb": 140607
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 2996,
                     *         "movie": {
                     *           "title": "The Martian",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 183371,
                     *             "slug": "the-martian-2015",
                     *             "imdb": "tt3659388",
                     *             "tmdb": 286217
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 2902,
                     *         "movie": {
                     *           "title": "Deadpool",
                     *           "year": 2016,
                     *           "ids": {
                     *             "trakt": 190430,
                     *             "slug": "deadpool-2016",
                     *             "imdb": "tt1431045",
                     *             "tmdb": 293660
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 2675,
                     *         "movie": {
                     *           "title": "Captain America: Civil War",
                     *           "year": 2016,
                     *           "ids": {
                     *             "trakt": 169105,
                     *             "slug": "captain-america-civil-war-2016",
                     *             "imdb": "tt3498820",
                     *             "tmdb": 271110
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 2629,
                     *         "movie": {
                     *           "title": "X-Men: Apocalypse",
                     *           "year": 2016,
                     *           "ids": {
                     *             "trakt": 149999,
                     *             "slug": "x-men-apocalypse-2016",
                     *             "imdb": "tt3385516",
                     *             "tmdb": 246655
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 2184,
                     *         "movie": {
                     *           "title": "Suicide Squad",
                     *           "year": 2016,
                     *           "ids": {
                     *             "trakt": 193079,
                     *             "slug": "suicide-squad-2016",
                     *             "imdb": "tt1386697",
                     *             "tmdb": 297761
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 2127,
                     *         "movie": {
                     *           "title": "SPECTRE",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 128378,
                     *             "slug": "spectre-2015",
                     *             "imdb": "tt2379713",
                     *             "tmdb": 206647
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 1951,
                     *         "movie": {
                     *           "title": "Justice League",
                     *           "year": 2017,
                     *           "ids": {
                     *             "trakt": 94232,
                     *             "slug": "justice-league-2017",
                     *             "imdb": "tt0974015",
                     *             "tmdb": 141052
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        list_count: number;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get the weekend box office": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "revenue": 48464322,
                     *         "movie": {
                     *           "title": "Hotel Transylvania 2",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 103449,
                     *             "slug": "hotel-transylvania-2-2015",
                     *             "imdb": "tt2510894",
                     *             "tmdb": 159824
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "revenue": 17728313,
                     *         "movie": {
                     *           "title": "The Intern",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 156997,
                     *             "slug": "the-intern-2015",
                     *             "imdb": "tt2361509",
                     *             "tmdb": 257211
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "revenue": 14271777,
                     *         "movie": {
                     *           "title": "Maze Runner: The Scorch Trials",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 190987,
                     *             "slug": "maze-runner-the-scorch-trials-2015",
                     *             "imdb": "tt4046784",
                     *             "tmdb": 294254
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "revenue": 13242895,
                     *         "movie": {
                     *           "title": "Everest",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 153969,
                     *             "slug": "everest-2015",
                     *             "imdb": "tt2719848",
                     *             "tmdb": 253412
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "revenue": 11031215,
                     *         "movie": {
                     *           "title": "Black Mass",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 160067,
                     *             "slug": "black-mass-2015",
                     *             "imdb": "tt1355683",
                     *             "tmdb": 261023
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "revenue": 6674280,
                     *         "movie": {
                     *           "title": "The Visit",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 196859,
                     *             "slug": "the-visit-2015",
                     *             "imdb": "tt3567288",
                     *             "tmdb": 298312
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "revenue": 4774505,
                     *         "movie": {
                     *           "title": "The Perfect Guy",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 207114,
                     *             "slug": "the-perfect-guy-2015",
                     *             "imdb": "tt3862750",
                     *             "tmdb": 304372
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "revenue": 4242644,
                     *         "movie": {
                     *           "title": "War Room",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 203901,
                     *             "slug": "war-room",
                     *             "imdb": "tt3832914",
                     *             "tmdb": 323272
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "revenue": 3520626,
                     *         "movie": {
                     *           "title": "The Green Inferno",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 109134,
                     *             "slug": "the-green-inferno-2014",
                     *             "imdb": "tt2403021",
                     *             "tmdb": 171424
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "revenue": 1717301,
                     *         "movie": {
                     *           "title": "Sicario",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 171369,
                     *             "slug": "sicario-2015",
                     *             "imdb": "tt3397884",
                     *             "tmdb": 273481
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        revenue: number;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get recently updated movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Updated since this date and time.
                 * @example 2020-11-27T00:00:00Z
                 */
                start_date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "updated_at": "2014-09-22T21:56:03.000Z",
                     *         "movie": {
                     *           "title": "TRON: Legacy",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "tron-legacy-2010",
                     *             "imdb": "tt1104001",
                     *             "tmdb": 20526
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "updated_at": "2014-09-23T21:56:03.000Z",
                     *         "movie": {
                     *           "title": "The Dark Knight",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 4,
                     *             "slug": "the-dark-knight-2008",
                     *             "imdb": "tt0468569",
                     *             "tmdb": 155
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        updated_at: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get recently updated movie Trakt IDs": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Updated since this date and time.
                 * @example 2020-11-27T00:00:00Z
                 */
                start_date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       1,
                     *       20,
                     *       34,
                     *       50
                     *     ] */
                    "application/json": number[];
                };
            };
        };
    };
    "Get a movie": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /movies/tron-legacy-2010?extended=full
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    } | {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                        tagline?: string;
                        overview?: string;
                        released?: string;
                        runtime?: number;
                        country?: string;
                        updated_at?: string;
                        trailer?: unknown;
                        homepage?: string;
                        status?: string;
                        rating?: number;
                        votes?: number;
                        comment_count?: number;
                        languages?: string[];
                        available_translations?: string[];
                        genres?: string[];
                        certification?: string;
                        original_title?: string;
                    };
                };
            };
        };
    };
    "Get all movie aliases": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Batman 1 - Batman Begins",
                     *         "country": "ca"
                     *       },
                     *       {
                     *         "title": "Batman 5 Begins",
                     *         "country": "br"
                     *       },
                     *       {
                     *         "title": "Batman inicia",
                     *         "country": "ar"
                     *       },
                     *       {
                     *         "title": "Batman 5: Batman Begins",
                     *         "country": "us"
                     *       },
                     *       {
                     *         "title": "蝙蝠俠：開戰時刻",
                     *         "country": "tw"
                     *       },
                     *       {
                     *         "title": "Batman: Na začetku",
                     *         "country": "si"
                     *       },
                     *       {
                     *         "title": "Batman Begins",
                     *         "country": "es"
                     *       },
                     *       {
                     *         "title": "Batman Begins",
                     *         "country": "de"
                     *       },
                     *       {
                     *         "title": "Batman  - Batman Begins",
                     *         "country": "no"
                     *       },
                     *       {
                     *         "title": "Batman:Le commencement",
                     *         "country": "ca"
                     *       },
                     *       {
                     *         "title": "Batman Dark Knight 1: Batman Begins",
                     *         "country": "us"
                     *       },
                     *       {
                     *         "title": "蝙蝠侠：侠影之谜",
                     *         "country": "cn"
                     *       },
                     *       {
                     *         "title": "Бэтмен: Начало",
                     *         "country": "ru"
                     *       },
                     *       {
                     *         "title": "Бетмен: Початок",
                     *         "country": "ua"
                     *       },
                     *       {
                     *         "title": "배트맨 비긴즈",
                     *         "country": "kr"
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        country: string;
                    }[];
                };
            };
        };
    };
    "Get all movie releases": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
                /**
                 * @description 2 character country code
                 * @example us
                 */
                country: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "country": "us",
                     *         "certification": "PG",
                     *         "release_date": "2010-12-16",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "gb",
                     *         "certification": "PG",
                     *         "release_date": "2010-12-17",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "de",
                     *         "certification": "12",
                     *         "release_date": "2011-01-26",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "fr",
                     *         "certification": "U",
                     *         "release_date": "2011-02-09",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "it",
                     *         "certification": "",
                     *         "release_date": "2010-12-29",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "tr",
                     *         "certification": "PG-13",
                     *         "release_date": "2011-01-28",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "ca",
                     *         "certification": "",
                     *         "release_date": "2010-12-17",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "nl",
                     *         "certification": "12",
                     *         "release_date": "2011-01-28",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "kz",
                     *         "certification": "Б14",
                     *         "release_date": "2010-12-15",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "sk",
                     *         "certification": "12",
                     *         "release_date": "2011-01-06",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "kr",
                     *         "certification": "전체 관람가",
                     *         "release_date": "2010-12-29",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "au",
                     *         "certification": "PG",
                     *         "release_date": "2010-12-16",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       },
                     *       {
                     *         "country": "gr",
                     *         "certification": "PG",
                     *         "release_date": "2010-12-16",
                     *         "release_type": "theatrical",
                     *         "note": null
                     *       }
                     *     ] */
                    "application/json": {
                        country: string;
                        certification: string;
                        release_date: string;
                        release_type: string;
                        note: unknown;
                    }[];
                };
            };
        };
    };
    "Get all movie translations": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
                /**
                 * @description 2 character language code
                 * @example es
                 */
                language: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Batman Begins",
                     *         "overview": "Driven by tragedy, billionaire Bruce Wayne dedicates his life to uncovering and defeating the corruption that plagues his home, Gotham City.  Unable to work within the system, he instead creates a new identity, a symbol of fear for the criminal underworld - The Batman.",
                     *         "tagline": "Evil fears the knight.",
                     *         "language": "en",
                     *         "country": "us"
                     *       },
                     *       {
                     *         "title": "Batman Begins",
                     *         "overview": "...",
                     *         "tagline": "Das Böse fürchtet den Ritter.",
                     *         "language": "de",
                     *         "country": "de"
                     *       },
                     *       {
                     *         "title": "Batman Begins",
                     *         "overview": "...",
                     *         "tagline": "",
                     *         "language": "da",
                     *         "country": "da"
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        overview: string;
                        tagline: string;
                        language: string;
                        country: string;
                    }[];
                };
            };
        };
    };
    "Get all movie comments": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
                /**
                 * @description how to sort
                 * @example newest
                 */
                sort: "newest" | "oldest" | "likes" | "replies" | "highest" | "lowest" | "plays";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 8,
                     *         "parent_id": 0,
                     *         "created_at": "2011-03-25T22:35:17.000Z",
                     *         "updated_at": "2011-03-25T22:35:17.000Z",
                     *         "comment": "Great movie!",
                     *         "spoiler": false,
                     *         "review": false,
                     *         "replies": 1,
                     *         "likes": 0,
                     *         "user_stats": {
                     *           "rating": 8,
                     *           "play_count": 1,
                     *           "completed_count": 1
                     *         },
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: number;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get lists containing this movie": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
                /**
                 * @description Filter for a specific list type
                 * @example personal
                 */
                type: "all" | "personal" | "official" | "watchlists" | "favorites";
                /**
                 * @description How to sort
                 * @example popular
                 */
                sort: "popular" | "likes" | "comments" | "items" | "added" | "updated";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "Incredible Thoughts",
                     *         "description": "How could my brain conceive them?",
                     *         "privacy": "public",
                     *         "share_link": "https://trakt.tv/lists/1337",
                     *         "type": "personal",
                     *         "display_numbers": true,
                     *         "allow_comments": true,
                     *         "sort_by": "rank",
                     *         "sort_how": "asc",
                     *         "created_at": "2014-10-11T17:00:54.000Z",
                     *         "updated_at": "2014-10-11T17:00:54.000Z",
                     *         "item_count": 50,
                     *         "comment_count": 10,
                     *         "likes": 99,
                     *         "ids": {
                     *           "trakt": 1337,
                     *           "slug": "incredible-thoughts"
                     *         },
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get all people for a movie": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "cast": [
                     *         {
                     *           "characters": [
                     *             "Sam Flynn"
                     *           ],
                     *           "person": {
                     *             "name": "Garrett Hedlund",
                     *             "ids": {
                     *               "trakt": 1,
                     *               "slug": "garrett-hedlund",
                     *               "imdb": "nm1330560",
                     *               "tmdb": 9828
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Kevin Flynn",
                     *             "Clu"
                     *           ],
                     *           "person": {
                     *             "name": "Jeff Bridges",
                     *             "ids": {
                     *               "trakt": 2,
                     *               "slug": "jeff-bridges",
                     *               "imdb": "nm0000313",
                     *               "tmdb": 1229
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Quorra"
                     *           ],
                     *           "person": {
                     *             "name": "Olivia Wilde",
                     *             "ids": {
                     *               "trakt": 3,
                     *               "slug": "olivia-wilde",
                     *               "imdb": "nm1312575",
                     *               "tmdb": 59315
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Alan Bradley",
                     *             "Tron"
                     *           ],
                     *           "person": {
                     *             "name": "Bruce Boxleitner",
                     *             "ids": {
                     *               "trakt": 4,
                     *               "slug": "bruce-boxleitner",
                     *               "imdb": "nm0000310",
                     *               "tmdb": 2547
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Siren"
                     *           ],
                     *           "person": {
                     *             "name": "Yaya DaCosta",
                     *             "ids": {
                     *               "trakt": 5,
                     *               "slug": "yaya-dacosta",
                     *               "imdb": "",
                     *               "tmdb": 60033
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Siren"
                     *           ],
                     *           "person": {
                     *             "name": "Serinda Swan",
                     *             "ids": {
                     *               "trakt": 6,
                     *               "slug": "serinda-swan",
                     *               "imdb": "",
                     *               "tmdb": 86268
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Siren"
                     *           ],
                     *           "person": {
                     *             "name": "Beau Garrett",
                     *             "ids": {
                     *               "trakt": 7,
                     *               "slug": "beau-garrett",
                     *               "imdb": "nm1683768",
                     *               "tmdb": 20403
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Siren"
                     *           ],
                     *           "person": {
                     *             "name": "Elizabeth Mathis",
                     *             "ids": {
                     *               "trakt": 8,
                     *               "slug": "elizabeth-mathis",
                     *               "imdb": "",
                     *               "tmdb": 130108
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Jarvis"
                     *           ],
                     *           "person": {
                     *             "name": "James Frain",
                     *             "ids": {
                     *               "trakt": 9,
                     *               "slug": "james-frain",
                     *               "imdb": "nm0289656",
                     *               "tmdb": 22063
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Young Mrs. Flynn"
                     *           ],
                     *           "person": {
                     *             "name": "Amy Esterle",
                     *             "ids": {
                     *               "trakt": 10,
                     *               "slug": "amy-esterle",
                     *               "imdb": "",
                     *               "tmdb": 86269
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Sobel"
                     *           ],
                     *           "person": {
                     *             "name": "Brandon Jay McLaren",
                     *             "ids": {
                     *               "trakt": 11,
                     *               "slug": "brandon-jay-mclaren",
                     *               "imdb": "",
                     *               "tmdb": 58371
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Castor",
                     *             "Zuse"
                     *           ],
                     *           "person": {
                     *             "name": "Michael Sheen",
                     *             "ids": {
                     *               "trakt": 12,
                     *               "slug": "michael-sheen",
                     *               "imdb": "nm0790688",
                     *               "tmdb": 3968
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Young Sam"
                     *           ],
                     *           "person": {
                     *             "name": "Owen Best",
                     *             "ids": {
                     *               "trakt": 13,
                     *               "slug": "owen-best",
                     *               "imdb": "",
                     *               "tmdb": 109205
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Green Light Cycle Rider"
                     *           ],
                     *           "person": {
                     *             "name": "Michael Teigen",
                     *             "ids": {
                     *               "trakt": 14,
                     *               "slug": "michael-teigen",
                     *               "imdb": "nm1083137",
                     *               "tmdb": 37980
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Masked DJ's"
                     *           ],
                     *           "person": {
                     *             "name": "Daft Punk",
                     *             "ids": {
                     *               "trakt": 15,
                     *               "slug": "daft-punk",
                     *               "imdb": "",
                     *               "tmdb": 67931
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Chattering Homeless Man"
                     *           ],
                     *           "person": {
                     *             "name": "Ron Selmour",
                     *             "ids": {
                     *               "trakt": 16,
                     *               "slug": "ron-selmour",
                     *               "imdb": "",
                     *               "tmdb": 10874
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Bartik"
                     *           ],
                     *           "person": {
                     *             "name": "Conrad Coates",
                     *             "ids": {
                     *               "trakt": 17,
                     *               "slug": "conrad-coates",
                     *               "imdb": "",
                     *               "tmdb": 43263
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "characters": [
                     *             "Half Faced Man (as Yurij Kis)"
                     *           ],
                     *           "person": {
                     *             "name": "Kis Yurij",
                     *             "ids": {
                     *               "trakt": 18,
                     *               "slug": "kis-yurij",
                     *               "imdb": "",
                     *               "tmdb": 145110
                     *             }
                     *           }
                     *         }
                     *       ],
                     *       "crew": {
                     *         "production": [
                     *           {
                     *             "jobs": [
                     *               "Casting"
                     *             ],
                     *             "person": {
                     *               "name": "Heike Brandstatter",
                     *               "ids": {
                     *                 "trakt": 19,
                     *                 "slug": "heike-brandstatter",
                     *                 "imdb": "nm0104840",
                     *                 "tmdb": 5362
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Casting"
                     *             ],
                     *             "person": {
                     *               "name": "Sarah Finn",
                     *               "ids": {
                     *                 "trakt": 20,
                     *                 "slug": "sarah-finn",
                     *                 "imdb": "nm0278168",
                     *                 "tmdb": 7232
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Casting"
                     *             ],
                     *             "person": {
                     *               "name": "Coreen Mayrs",
                     *               "ids": {
                     *                 "trakt": 21,
                     *                 "slug": "coreen-mayrs",
                     *                 "imdb": "nm0563042",
                     *                 "tmdb": 5363
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Producer"
                     *             ],
                     *             "person": {
                     *               "name": "Sean Bailey",
                     *               "ids": {
                     *                 "trakt": 34,
                     *                 "slug": "sean-bailey",
                     *                 "imdb": "",
                     *                 "tmdb": 39387
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Producer"
                     *             ],
                     *             "person": {
                     *               "name": "Steven Lisberger",
                     *               "ids": {
                     *                 "trakt": 33,
                     *                 "slug": "steven-lisberger",
                     *                 "imdb": "",
                     *                 "tmdb": 12859
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Producer"
                     *             ],
                     *             "person": {
                     *               "name": "Jeffrey Silver",
                     *               "ids": {
                     *                 "trakt": 35,
                     *                 "slug": "jeffrey-silver",
                     *                 "imdb": "",
                     *                 "tmdb": 20908
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Producer"
                     *             ],
                     *             "person": {
                     *               "name": "Bruce Franklin",
                     *               "ids": {
                     *                 "trakt": 36,
                     *                 "slug": "bruce-franklin",
                     *                 "imdb": "",
                     *                 "tmdb": 113981
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Producer"
                     *             ],
                     *             "person": {
                     *               "name": "Steve Gaub",
                     *               "ids": {
                     *                 "trakt": 37,
                     *                 "slug": "steve-gaub",
                     *                 "imdb": "",
                     *                 "tmdb": 63289
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Producer"
                     *             ],
                     *             "person": {
                     *               "name": "Justis Greene",
                     *               "ids": {
                     *                 "trakt": 38,
                     *                 "slug": "justis-greene",
                     *                 "imdb": "",
                     *                 "tmdb": 113982
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Producer"
                     *             ],
                     *             "person": {
                     *               "name": "Julien Lemaitre",
                     *               "ids": {
                     *                 "trakt": 39,
                     *                 "slug": "julien-lemaitre",
                     *                 "imdb": "",
                     *                 "tmdb": 113983
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "job": [
                     *               "Executive Producer"
                     *             ],
                     *             "person": {
                     *               "name": "Donald Kushner",
                     *               "ids": {
                     *                 "trakt": 40,
                     *                 "slug": "donald-kushner",
                     *                 "imdb": "",
                     *                 "tmdb": 6889
                     *               }
                     *             }
                     *           }
                     *         ],
                     *         "art": [
                     *           {
                     *             "jobs": [
                     *               "Production Design"
                     *             ],
                     *             "person": {
                     *               "name": "Darren Gilford",
                     *               "ids": {
                     *                 "trakt": 22,
                     *                 "slug": "darren-gilford",
                     *                 "imdb": "",
                     *                 "tmdb": 411385
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Set Decoration"
                     *             ],
                     *             "person": {
                     *               "name": "Lin MacDonald",
                     *               "ids": {
                     *                 "trakt": 25,
                     *                 "slug": "lin-macdonald",
                     *                 "imdb": "nm0003106",
                     *                 "tmdb": 12384
                     *               }
                     *             }
                     *           }
                     *         ],
                     *         "crew": [
                     *           {
                     *             "jobs": [
                     *               "Supervising Art Director"
                     *             ],
                     *             "person": {
                     *               "name": "Kevin Ishioka",
                     *               "ids": {
                     *                 "trakt": 23,
                     *                 "slug": "kevin-ishioka",
                     *                 "imdb": "nm0411131",
                     *                 "tmdb": 6878
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Supervising Art Director"
                     *             ],
                     *             "person": {
                     *               "name": "Mark W. Mansbridge",
                     *               "ids": {
                     *                 "trakt": 24,
                     *                 "slug": "mark-w-mansbridge",
                     *                 "imdb": "nm0543729",
                     *                 "tmdb": 21070
                     *               }
                     *             }
                     *           }
                     *         ],
                     *         "costume & make-up": [
                     *           {
                     *             "jobs": [
                     *               "Costume Design"
                     *             ],
                     *             "person": {
                     *               "name": "Michael Wilkinson",
                     *               "ids": {
                     *                 "trakt": 26,
                     *                 "slug": "michael-wilkinson",
                     *                 "imdb": "nm0929452",
                     *                 "tmdb": 5392
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Makeup Department Head"
                     *             ],
                     *             "person": {
                     *               "name": "Rosalina Da Silva",
                     *               "ids": {
                     *                 "trakt": 27,
                     *                 "slug": "rosalina-da-silva",
                     *                 "imdb": "nm0196301",
                     *                 "tmdb": 75294
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Costume Supervisor"
                     *             ],
                     *             "person": {
                     *               "name": "Tangi Crawford",
                     *               "ids": {
                     *                 "trakt": 28,
                     *                 "slug": "tangi-crawford",
                     *                 "imdb": "",
                     *                 "tmdb": 1323289
                     *               }
                     *             }
                     *           }
                     *         ],
                     *         "directing": [
                     *           {
                     *             "jobs": [
                     *               "Director"
                     *             ],
                     *             "person": {
                     *               "name": "Joseph Kosinski",
                     *               "ids": {
                     *                 "trakt": 29,
                     *                 "slug": "joseph-kosinski",
                     *                 "imdb": "nm2676052",
                     *                 "tmdb": 86270
                     *               }
                     *             }
                     *           }
                     *         ],
                     *         "writing": [
                     *           {
                     *             "jobs": [
                     *               "Screenplay"
                     *             ],
                     *             "person": {
                     *               "name": "Adam Horowitz",
                     *               "ids": {
                     *                 "trakt": 30,
                     *                 "slug": "adam-horowitz",
                     *                 "imdb": "",
                     *                 "tmdb": 44035
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "job": [
                     *               "Screenplay"
                     *             ],
                     *             "person": {
                     *               "name": "Richard Jefferies",
                     *               "ids": {
                     *                 "trakt": 31,
                     *                 "slug": "richard-jefferies",
                     *                 "imdb": "",
                     *                 "tmdb": 73570
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Screenplay"
                     *             ],
                     *             "person": {
                     *               "name": "Edward Kitsis",
                     *               "ids": {
                     *                 "trakt": 32,
                     *                 "slug": "edward-kitsis",
                     *                 "imdb": "",
                     *                 "tmdb": 44034
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "jobs": [
                     *               "Screenplay"
                     *             ],
                     *             "person": {
                     *               "name": "Steven Lisberger",
                     *               "ids": {
                     *                 "trakt": 33,
                     *                 "slug": "steven-lisberger",
                     *                 "imdb": "",
                     *                 "tmdb": 12859
                     *               }
                     *             }
                     *           }
                     *         ],
                     *         "sound": [
                     *           {
                     *             "jobs": [
                     *               "Music"
                     *             ],
                     *             "person": {
                     *               "name": "Daft Punk",
                     *               "ids": {
                     *                 "trakt": 15,
                     *                 "slug": "daft-punk",
                     *                 "imdb": "",
                     *                 "tmdb": 67931
                     *               }
                     *             }
                     *           }
                     *         ],
                     *         "camera": [
                     *           {
                     *             "jobs": [
                     *               "Director of Photography"
                     *             ],
                     *             "person": {
                     *               "name": "Claudio Miranda",
                     *               "ids": {
                     *                 "trakt": 41,
                     *                 "slug": "claudio-miranda",
                     *                 "imdb": "",
                     *                 "tmdb": 51333
                     *               }
                     *             }
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": {
                        cast?: {
                            characters: string[];
                            person: {
                                name?: string;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        crew?: {
                            production?: {
                                jobs: string[];
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                                job?: string[];
                            }[];
                            art?: {
                                jobs: string[];
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            crew?: {
                                jobs: string[];
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            "costume & make-up"?: {
                                jobs: string[];
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            directing?: {
                                jobs?: string[];
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            writing?: {
                                jobs: string[];
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                                job?: string[];
                            }[];
                            sound?: {
                                jobs?: string[];
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            camera?: {
                                jobs?: string[];
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                        };
                    };
                };
            };
        };
    };
    "Get movie ratings": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "rating": 7.33778,
                     *       "votes": 7866,
                     *       "distribution": {
                     *         "1": 298,
                     *         "2": 46,
                     *         "3": 87,
                     *         "4": 178,
                     *         "5": 446,
                     *         "6": 1167,
                     *         "7": 1855,
                     *         "8": 1543,
                     *         "9": 662,
                     *         "10": 1583
                     *       }
                     *     } */
                    "application/json": {
                        rating?: number;
                        votes?: number;
                        distribution?: {
                            1?: number;
                            2?: number;
                            3?: number;
                            4?: number;
                            5?: number;
                            6?: number;
                            7?: number;
                            8?: number;
                            9?: number;
                            10?: number;
                        };
                    };
                };
            };
        };
    };
    "Get related movies": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Jurassic Park",
                     *         "year": 1993,
                     *         "ids": {
                     *           "trakt": 393,
                     *           "slug": "jurassic-park-1993",
                     *           "imdb": "tt0107290",
                     *           "tmdb": 329
                     *         }
                     *       },
                     *       {
                     *         "title": "Back to the Future",
                     *         "year": 1985,
                     *         "ids": {
                     *           "trakt": 308,
                     *           "slug": "back-to-the-future-1985",
                     *           "imdb": "tt0088763",
                     *           "tmdb": 105
                     *         }
                     *       },
                     *       {
                     *         "title": "Kick-Ass",
                     *         "year": 2010,
                     *         "ids": {
                     *           "trakt": 171,
                     *           "slug": "kick-ass-2010",
                     *           "imdb": "tt1250777",
                     *           "tmdb": 23483
                     *         }
                     *       },
                     *       {
                     *         "title": "The Hangover",
                     *         "year": 2009,
                     *         "ids": {
                     *           "trakt": 547,
                     *           "slug": "the-hangover-2009",
                     *           "imdb": "tt1119646",
                     *           "tmdb": 18785
                     *         }
                     *       },
                     *       {
                     *         "title": "Back to the Future Part II",
                     *         "year": 1989,
                     *         "ids": {
                     *           "trakt": 384,
                     *           "slug": "back-to-the-future-part-ii-1989",
                     *           "imdb": "tt0096874",
                     *           "tmdb": 165
                     *         }
                     *       },
                     *       {
                     *         "title": "Zombieland",
                     *         "year": 2009,
                     *         "ids": {
                     *           "trakt": 205,
                     *           "slug": "zombieland-2009",
                     *           "imdb": "tt1156398",
                     *           "tmdb": 19908
                     *         }
                     *       },
                     *       {
                     *         "title": "Inception",
                     *         "year": 2010,
                     *         "ids": {
                     *           "trakt": 108,
                     *           "slug": "inception-2010",
                     *           "imdb": "tt1375666",
                     *           "tmdb": 27205
                     *         }
                     *       },
                     *       {
                     *         "title": "Gladiator",
                     *         "year": 2000,
                     *         "ids": {
                     *           "trakt": 463,
                     *           "slug": "gladiator-2000",
                     *           "imdb": "tt0172495",
                     *           "tmdb": 98
                     *         }
                     *       },
                     *       {
                     *         "title": "Snatch",
                     *         "year": 2000,
                     *         "ids": {
                     *           "trakt": 1473,
                     *           "slug": "snatch-2000",
                     *           "imdb": "tt0208092",
                     *           "tmdb": 107
                     *         }
                     *       },
                     *       {
                     *         "title": "Donnie Darko",
                     *         "year": 2001,
                     *         "ids": {
                     *           "trakt": 114,
                     *           "slug": "donnie-darko-2001",
                     *           "imdb": "tt0246578",
                     *           "tmdb": 141
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
    };
    "Get movie stats": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "watchers": 39204,
                     *       "plays": 51033,
                     *       "collectors": 27379,
                     *       "comments": 36,
                     *       "lists": 4561,
                     *       "votes": 7866,
                     *       "favorited": 54321
                     *     } */
                    "application/json": {
                        watchers?: number;
                        plays?: number;
                        collectors?: number;
                        comments?: number;
                        lists?: number;
                        votes?: number;
                        favorited?: number;
                    };
                };
            };
        };
    };
    "Get movie studios": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "20th Century Fox",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 20,
                     *           "slug": "20th-century-fox",
                     *           "tmdb": 25
                     *         }
                     *       },
                     *       {
                     *         "name": "Marvel Entertainment",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 19,
                     *           "slug": "marvel-entertainment",
                     *           "tmdb": 7505
                     *         }
                     *       },
                     *       {
                     *         "name": "The Donners' Company",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 25,
                     *           "slug": "the-donners-company",
                     *           "tmdb": 431
                     *         }
                     *       },
                     *       {
                     *         "name": "TSG Entertainment",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 22,
                     *           "slug": "tsg-entertainment",
                     *           "tmdb": 22213
                     *         }
                     *       },
                     *       {
                     *         "name": "Genre Films",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 23,
                     *           "slug": "genre-films",
                     *           "tmdb": 28788
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        name: string;
                        country: string;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
    };
    "Get users watching right now": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "username": "justin",
                     *         "private": false,
                     *         "name": "Justin Nemeth",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "justin"
                     *         }
                     *       },
                     *       {
                     *         "username": "sean",
                     *         "private": false,
                     *         "name": "Sean Rudford",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "sean"
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        username: string;
                        private: boolean;
                        name: string;
                        vip: boolean;
                        vip_ep: boolean;
                        ids: {
                            slug?: string;
                        };
                    }[];
                };
            };
        };
    };
    "Get all videos": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Official Trailer # 3",
                     *         "url": "https://youtube.com/watch?v=d4RiUy23e9s",
                     *         "site": "youtube",
                     *         "type": "trailer",
                     *         "size": 1080,
                     *         "official": true,
                     *         "published_at": "2010-11-09T01:07:39.000Z",
                     *         "country": "us",
                     *         "language": "en"
                     *       }
                     *     ] */
                    "application/json": {
                        title?: string;
                        url?: string;
                        site?: string;
                        type?: string;
                        size?: number;
                        official?: boolean;
                        published_at?: string;
                        country?: string;
                        language?: string;
                    }[];
                };
            };
        };
    };
    "Refresh movie metadata": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example tron-legacy-2010
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get networks": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "A&E",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 44,
                     *           "tmdb": 129
                     *         }
                     *       },
                     *       {
                     *         "name": "ABC",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 16,
                     *           "tmdb": 2
                     *         }
                     *       },
                     *       {
                     *         "name": "AMC",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 107,
                     *           "tmdb": 174
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        name: string;
                        country: string;
                        ids: {
                            trakt?: number;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
    };
    "Add notes": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    movie?: {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    };
                    notes?: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        notes?: string;
                        privacy?: string;
                        spoiler?: boolean;
                        created_at?: string;
                        updated_at?: string;
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Get a note": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific note ID.
                 * @example 193
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Item-ID"?: string;
                    "X-Item-Type"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 193,
                     *       "notes": "I am the danger!",
                     *       "privacy": "private",
                     *       "spoiler": false,
                     *       "created_at": "2023-09-12T20:10:18.000Z",
                     *       "updated_at": "2023-09-12T20:10:56.000Z",
                     *       "user": {
                     *         "username": "justin",
                     *         "private": false,
                     *         "name": "Justin Nemeth",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "justin"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        id?: number;
                        notes?: string;
                        privacy?: string;
                        spoiler?: boolean;
                        created_at?: string;
                        updated_at?: string;
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Update a note": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific note ID.
                 * @example 193
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "notes": "I AM THE DANGER! I AM THE ONE WHO KNOCKS!"
                 *     } */
                "application/json": {
                    notes?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 193,
                     *       "notes": "I AM THE DANGER! I AM THE ONE WHO KNOCKS!",
                     *       "privacy": "private",
                     *       "spoiler": false,
                     *       "created_at": "2023-09-12T20:10:18.000Z",
                     *       "updated_at": "2023-09-13T06:10:56.000Z",
                     *       "user": {
                     *         "username": "justin",
                     *         "private": false,
                     *         "name": "Justin Nemeth",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "justin"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        id?: number;
                        notes?: string;
                        privacy?: string;
                        spoiler?: boolean;
                        created_at?: string;
                        updated_at?: string;
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Delete a note": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific note ID.
                 * @example 193
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get the attached item": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description A specific note ID.
                 * @example 417
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attached to a specific watched history item. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        attached_to?: {
                            type?: string;
                        };
                        type?: string;
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    } | {
                        attached_to?: {
                            type?: string;
                            id?: number;
                        };
                        type?: string;
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    };
                };
            };
        };
    };
    "Get recently updated people": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Updated since this date and time.
                 * @example 2020-11-27T00:00:00Z
                 */
                start_date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "updated_at": "2022-11-03T18:58:09.000Z",
                     *         "person": {
                     *           "name": "Charlie Cox",
                     *           "ids": {
                     *             "trakt": 417084,
                     *             "slug": "charlie-cox",
                     *             "imdb": "nm1214435",
                     *             "tmdb": 23458
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "updated_at": "2022-11-03T18:58:09.000Z",
                     *         "person": {
                     *           "name": "Deborah Ann Woll",
                     *           "ids": {
                     *             "trakt": 451773,
                     *             "slug": "deborah-ann-woll",
                     *             "imdb": "nm2832695",
                     *             "tmdb": 212154
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        updated_at: string;
                        person: {
                            name?: string;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get recently updated people Trakt IDs": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Updated since this date and time.
                 * @example 2020-11-27T00:00:00Z
                 */
                start_date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       1,
                     *       20,
                     *       34,
                     *       50
                     *     ] */
                    "application/json": number[];
                };
            };
        };
    };
    "Get a single person": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example bryan-cranston
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /people/bryan-cranston?extended=full
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name?: string;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    } | {
                        name?: string;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                        social_ids?: {
                            twitter?: string;
                            facebook?: string;
                            instagram?: string;
                            wikipedia?: unknown;
                        };
                        biography?: string;
                        birthday?: string;
                        death?: unknown;
                        birthplace?: string;
                        homepage?: string;
                        gender?: string;
                        known_for_department?: string;
                        updated_at?: string;
                    };
                };
            };
        };
    };
    "Get movie credits": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example bryan-cranston
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "cast": [
                     *         {
                     *           "characters": [
                     *             "Joe Brody"
                     *           ],
                     *           "movie": {
                     *             "title": "Godzilla",
                     *             "year": 2014,
                     *             "ids": {
                     *               "trakt": 24,
                     *               "slug": "godzilla-2014",
                     *               "imdb": "tt0831387",
                     *               "tmdb": 124905
                     *             }
                     *           }
                     *         }
                     *       ],
                     *       "crew": {
                     *         "directing": [
                     *           {
                     *             "jobs": [
                     *               "Director"
                     *             ],
                     *             "movie": {
                     *               "title": "Godzilla",
                     *               "year": 2014,
                     *               "ids": {
                     *                 "trakt": 24,
                     *                 "slug": "godzilla-2014",
                     *                 "imdb": "tt0831387",
                     *                 "tmdb": 124905
                     *               }
                     *             }
                     *           }
                     *         ],
                     *         "writing": [
                     *           {
                     *             "jobs": [
                     *               "Screenplay"
                     *             ],
                     *             "movie": {
                     *               "title": "Godzilla",
                     *               "year": 2014,
                     *               "ids": {
                     *                 "trakt": 24,
                     *                 "slug": "godzilla-2014",
                     *                 "imdb": "tt0831387",
                     *                 "tmdb": 124905
                     *               }
                     *             }
                     *           }
                     *         ],
                     *         "producing": [
                     *           {
                     *             "jobs": [
                     *               "Producer"
                     *             ],
                     *             "movie": {
                     *               "title": "Godzilla",
                     *               "year": 2014,
                     *               "ids": {
                     *                 "trakt": 24,
                     *                 "slug": "godzilla-2014",
                     *                 "imdb": "tt0831387",
                     *                 "tmdb": 124905
                     *               }
                     *             }
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": {
                        cast?: {
                            characters?: string[];
                            movie?: {
                                title?: string;
                                year?: number;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        crew?: {
                            directing?: {
                                jobs?: string[];
                                movie?: {
                                    title?: string;
                                    year?: number;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            writing?: {
                                jobs?: string[];
                                movie?: {
                                    title?: string;
                                    year?: number;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            producing?: {
                                jobs?: string[];
                                movie?: {
                                    title?: string;
                                    year?: number;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                        };
                    };
                };
            };
        };
    };
    "Get show credits": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example bryan-cranston
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "cast": [
                     *         {
                     *           "characters": [
                     *             "Walter White"
                     *           ],
                     *           "episode_count": 62,
                     *           "series_regular": true,
                     *           "show": {
                     *             "title": "Breaking Bad",
                     *             "year": 2008,
                     *             "ids": {
                     *               "trakt": 1,
                     *               "slug": "breaking-bad",
                     *               "tvdb": 81189,
                     *               "imdb": "tt0903747",
                     *               "tmdb": 1396
                     *             }
                     *           }
                     *         }
                     *       ],
                     *       "crew": {
                     *         "production": [
                     *           {
                     *             "jobs": [
                     *               "Producer"
                     *             ],
                     *             "show": {
                     *               "title": "Breaking Bad",
                     *               "year": 2008,
                     *               "ids": {
                     *                 "trakt": 1,
                     *                 "slug": "breaking-bad",
                     *                 "tvdb": 81189,
                     *                 "imdb": "tt0903747",
                     *                 "tmdb": 1396
                     *               }
                     *             }
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": {
                        cast?: {
                            characters?: string[];
                            episode_count?: number;
                            series_regular?: boolean;
                            show?: {
                                title?: string;
                                year?: number;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    tvdb?: number;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        crew?: {
                            production?: {
                                jobs?: string[];
                                show?: {
                                    title?: string;
                                    year?: number;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        tvdb?: number;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                        };
                    };
                };
            };
        };
    };
    "Get lists containing this person": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example bryan-cranston
                 */
                id: string;
                /**
                 * @description Filter for a specific list type
                 * @example personal
                 */
                type: "all" | "personal" | "official";
                /**
                 * @description How to sort
                 * @example popular
                 */
                sort: "popular" | "likes" | "comments" | "items" | "added" | "updated";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "Incredible Thoughts",
                     *         "description": "How could my brain conceive them?",
                     *         "privacy": "public",
                     *         "share_link": "https://trakt.tv/lists/1337",
                     *         "type": "personal",
                     *         "display_numbers": true,
                     *         "allow_comments": true,
                     *         "sort_by": "rank",
                     *         "sort_how": "asc",
                     *         "created_at": "2014-10-11T17:00:54.000Z",
                     *         "updated_at": "2014-10-11T17:00:54.000Z",
                     *         "item_count": 50,
                     *         "comment_count": 10,
                     *         "likes": 99,
                     *         "ids": {
                     *           "trakt": 1337,
                     *           "slug": "incredible-thoughts"
                     *         },
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Refresh person metadata": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example bryan-cranston
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get movie recommendations": {
        parameters: {
            query?: {
                /**
                 * @description filter out collected movies
                 * @example false
                 */
                ignore_collected?: "true" | "false";
                /**
                 * @description filter out watchlisted movies
                 * @example false
                 */
                ignore_watchlisted?: "true" | "false";
            };
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Blackfish",
                     *         "year": 2013,
                     *         "ids": {
                     *           "trakt": 58,
                     *           "slug": "blackfish-2013",
                     *           "imdb": "tt2545118",
                     *           "tmdb": 158999
                     *         },
                     *         "favorited_by": [
                     *           {
                     *             "user": {
                     *               "username": "justin",
                     *               "private": false,
                     *               "name": "Justin Nemeth",
                     *               "vip": true,
                     *               "vip_ep": false,
                     *               "ids": {
                     *                 "slug": "sean"
                     *               }
                     *             },
                     *             "notes": "This is a great documentary about killer whales."
                     *           }
                     *         ]
                     *       },
                     *       {
                     *         "title": "Waiting for Superman",
                     *         "year": 2010,
                     *         "ids": {
                     *           "trakt": 289,
                     *           "slug": "waiting-for-superman-2010",
                     *           "imdb": "tt1566648",
                     *           "tmdb": 39440
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "Inside Job",
                     *         "year": 2010,
                     *         "ids": {
                     *           "trakt": 329,
                     *           "slug": "inside-job-2010",
                     *           "imdb": "tt1645089",
                     *           "tmdb": 44639
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "School of Rock",
                     *         "year": 2003,
                     *         "ids": {
                     *           "trakt": 503,
                     *           "slug": "school-of-rock-2003",
                     *           "imdb": "tt0332379",
                     *           "tmdb": 1584
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "The Lincoln Lawyer",
                     *         "year": 2011,
                     *         "ids": {
                     *           "trakt": 513,
                     *           "slug": "the-lincoln-lawyer-2011",
                     *           "imdb": "tt1189340",
                     *           "tmdb": 50348
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "The Change-Up",
                     *         "year": 2011,
                     *         "ids": {
                     *           "trakt": 822,
                     *           "slug": "the-change-up-2011",
                     *           "imdb": "tt1488555",
                     *           "tmdb": 49520
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "50/50",
                     *         "year": 2011,
                     *         "ids": {
                     *           "trakt": 907,
                     *           "slug": "50-50-2011",
                     *           "imdb": "tt1306980",
                     *           "tmdb": 40807
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "Moneyball",
                     *         "year": 2011,
                     *         "ids": {
                     *           "trakt": 945,
                     *           "slug": "moneyball-2011",
                     *           "imdb": "tt1210166",
                     *           "tmdb": 60308
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "Killer at Large",
                     *         "year": 2008,
                     *         "ids": {
                     *           "trakt": 3549,
                     *           "slug": "killer-at-large-2008",
                     *           "imdb": "tt0903660",
                     *           "tmdb": 37312
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "Green Day: Bullet in a Bible",
                     *         "year": 2005,
                     *         "ids": {
                     *           "trakt": 3770,
                     *           "slug": "green-day-bullet-in-a-bible-2005",
                     *           "imdb": "tt0485773",
                     *           "tmdb": 26627
                     *         },
                     *         "favorited_by": []
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                        favorited_by: {
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                            notes?: string;
                        }[];
                    }[];
                };
            };
        };
    };
    "Hide a movie recommendation": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example 922
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get show recommendations": {
        parameters: {
            query?: {
                /**
                 * @description filter out collected shows
                 * @example false
                 */
                ignore_collected?: "true" | "false";
                /**
                 * @description filter out watchlisted movies
                 * @example false
                 */
                ignore_watchlisted?: "true" | "false";
            };
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "The Biggest Loser",
                     *         "year": 2004,
                     *         "ids": {
                     *           "trakt": 9,
                     *           "slug": "the-biggest-loser",
                     *           "tvdb": 75166,
                     *           "imdb": "tt0429318",
                     *           "tmdb": 579
                     *         },
                     *         "favorited_by": [
                     *           {
                     *             "user": {
                     *               "username": "justin",
                     *               "private": false,
                     *               "name": "Justin Nemeth",
                     *               "vip": true,
                     *               "vip_ep": false,
                     *               "ids": {
                     *                 "slug": "sean"
                     *               }
                     *             },
                     *             "notes": "This show is inspiring!"
                     *           }
                     *         ]
                     *       },
                     *       {
                     *         "title": "Shark Tank",
                     *         "year": 2009,
                     *         "ids": {
                     *           "trakt": 36,
                     *           "slug": "shark-tank",
                     *           "tvdb": 100981,
                     *           "imdb": "tt1442550",
                     *           "tmdb": 30703
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "Hell's Kitchen",
                     *         "year": 2005,
                     *         "ids": {
                     *           "trakt": 40,
                     *           "slug": "hell-s-kitchen",
                     *           "tvdb": 74897,
                     *           "imdb": "tt0437005",
                     *           "tmdb": 2370
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "The Big C",
                     *         "year": 2010,
                     *         "ids": {
                     *           "trakt": 51,
                     *           "slug": "the-big-c",
                     *           "tvdb": 161501,
                     *           "imdb": "tt1515193",
                     *           "tmdb": 32406
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "United States of Tara",
                     *         "year": 2009,
                     *         "ids": {
                     *           "trakt": 69,
                     *           "slug": "united-states-of-tara",
                     *           "tvdb": 83463,
                     *           "imdb": "tt1001482",
                     *           "tmdb": 7097
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "Hung",
                     *         "year": 2009,
                     *         "ids": {
                     *           "trakt": 168,
                     *           "slug": "hung",
                     *           "tvdb": 82091,
                     *           "imdb": "tt1229413",
                     *           "tmdb": 18614
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "Big Love",
                     *         "year": 2006,
                     *         "ids": {
                     *           "trakt": 272,
                     *           "slug": "big-love",
                     *           "tvdb": 74156,
                     *           "imdb": "tt0421030",
                     *           "tmdb": 4392
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "Brooklyn Nine-Nine",
                     *         "year": 2013,
                     *         "ids": {
                     *           "trakt": 599,
                     *           "slug": "brooklyn-nine-nine",
                     *           "tvdb": 269586,
                     *           "imdb": "tt2467372",
                     *           "tmdb": 48891
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "FlashForward",
                     *         "year": 2009,
                     *         "ids": {
                     *           "trakt": 677,
                     *           "slug": "flashforward",
                     *           "tvdb": 84024,
                     *           "imdb": "tt1441135",
                     *           "tmdb": 19092
                     *         },
                     *         "favorited_by": []
                     *       },
                     *       {
                     *         "title": "Roswell",
                     *         "year": 1999,
                     *         "ids": {
                     *           "trakt": 717,
                     *           "slug": "roswell",
                     *           "tvdb": 73965,
                     *           "imdb": "tt0201391",
                     *           "tmdb": 4624
                     *         },
                     *         "favorited_by": []
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        favorited_by: {
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                            notes?: string;
                        }[];
                    }[];
                };
            };
        };
    };
    "Hide a show recommendation": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example 922
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Start watching in a media center": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    movie?: {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    };
                    progress?: number;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        action?: string;
                        progress?: number;
                        sharing?: {
                            twitter?: boolean;
                            mastodon?: boolean;
                            tumblr?: boolean;
                        };
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    } | {
                        id?: number;
                        action?: string;
                        progress?: number;
                        sharing?: {
                            twitter?: boolean;
                            mastodon?: boolean;
                            tumblr?: boolean;
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    } | {
                        id?: number;
                        action?: string;
                        progress?: number;
                        sharing?: {
                            twitter?: boolean;
                            mastodon?: boolean;
                            tumblr?: boolean;
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: unknown;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    };
                };
            };
        };
    };
    "Pause watching in a media center": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movie": {
                 *         "title": "Guardians of the Galaxy",
                 *         "year": 2014,
                 *         "ids": {
                 *           "trakt": 28,
                 *           "slug": "guardians-of-the-galaxy-2014",
                 *           "imdb": "tt2015381",
                 *           "tmdb": 118340
                 *         }
                 *       },
                 *       "progress": 75
                 *     } */
                "application/json": {
                    movie?: {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    };
                    progress?: number;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1337,
                     *       "action": "pause",
                     *       "progress": 75,
                     *       "sharing": {
                     *         "twitter": false,
                     *         "mastodon": false,
                     *         "tumblr": false
                     *       },
                     *       "movie": {
                     *         "title": "Guardians of the Galaxy",
                     *         "year": 2014,
                     *         "ids": {
                     *           "trakt": 28,
                     *           "slug": "guardians-of-the-galaxy-2014",
                     *           "imdb": "tt2015381",
                     *           "tmdb": 118340
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        id?: number;
                        action?: string;
                        progress?: number;
                        sharing?: {
                            twitter?: boolean;
                            mastodon?: boolean;
                            tumblr?: boolean;
                        };
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    };
                };
            };
        };
    };
    "Stop or finish watching in a media center": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    movie?: {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    };
                    progress?: number;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        action?: string;
                        progress?: number;
                        sharing?: {
                            twitter?: boolean;
                            mastodon?: boolean;
                            tumblr?: boolean;
                        };
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    } | {
                        id?: number;
                        action?: string;
                        progress?: number;
                        sharing?: {
                            twitter?: boolean;
                            mastodon?: boolean;
                            tumblr?: boolean;
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    } | {
                        id?: number;
                        action?: string;
                        progress?: number;
                        sharing?: {
                            twitter?: boolean;
                            mastodon?: boolean;
                            tumblr?: boolean;
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: unknown;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    };
                };
            };
            /** @description The same item was recently scrobbled. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "watched_at": "2014-10-15T22:21:29.000Z",
                     *       "expires_at": "2014-10-15T23:21:29.000Z"
                     *     } */
                    "application/json": {
                        watched_at?: string;
                        expires_at?: string;
                    };
                };
            };
        };
    };
    "Get text query results": {
        parameters: {
            query: {
                /**
                 * @description Search all text based fields.
                 * @example tron
                 */
                query: string;
                /**
                 * @description Specific text fields.
                 * @example title
                 */
                fields?: "title" | "tagline" | "overview" | "people" | "translations" | "aliases" | "name" | "biography" | "description";
            };
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Search type.
                 * @example movie
                 */
                type: "movie" | "show" | "episode" | "person" | "list";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /search/movie,show,episode,person,list?query=tron
             *     ``` */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "type": "movie",
                     *         "score": 26.019499,
                     *         "movie": {
                     *           "title": "TRON: Legacy",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 12601,
                     *             "slug": "tron-legacy-2010",
                     *             "imdb": "tt1104001",
                     *             "tmdb": 20526
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "show",
                     *         "score": 19.533358,
                     *         "show": {
                     *           "title": "Tron: Uprising",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 34209,
                     *             "slug": "tron-uprising",
                     *             "tvdb": 258480,
                     *             "imdb": "tt1812523",
                     *             "tmdb": 34356
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "episode",
                     *         "score": 42.50835,
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 1,
                     *           "title": "The Renegade (1)",
                     *           "ids": {
                     *             "trakt": 793693,
                     *             "tvdb": 4318713,
                     *             "imdb": null,
                     *             "tmdb": 786460
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Tron: Uprising",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 34209,
                     *             "slug": "tron-uprising",
                     *             "tvdb": 258480,
                     *             "imdb": "tt1812523",
                     *             "tmdb": 34356
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "person",
                     *         "score": 53.421608,
                     *         "person": {
                     *           "name": "Jeff Bridges",
                     *           "ids": {
                     *             "trakt": 4173,
                     *             "slug": "jeff-bridges",
                     *             "imdb": "nm0000313",
                     *             "tmdb": 1229
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "list",
                     *         "score": 38.643196,
                     *         "list": {
                     *           "name": "Open Your Eyes",
                     *           "description": "Let food be thy medicine and medicine be thy food.",
                     *           "privacy": "public",
                     *           "share_link": "https://trakt.tv/lists/2180135",
                     *           "type": "personal",
                     *           "display_numbers": true,
                     *           "allow_comments": true,
                     *           "sort_by": "rank",
                     *           "sort_how": "asc",
                     *           "created_at": "2016-04-22T05:54:55.000Z",
                     *           "updated_at": "2016-06-29T09:47:40.000Z",
                     *           "item_count": 22,
                     *           "comment_count": 0,
                     *           "likes": 6,
                     *           "ids": {
                     *             "trakt": 2180135,
                     *             "slug": "open-your-eyes"
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin Nemeth",
                     *             "vip": true,
                     *             "vip_ep": true,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        type: string;
                        score: number;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: number;
                            };
                        };
                        person?: {
                            name?: string;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        list?: {
                            name?: string;
                            description?: string;
                            privacy?: string;
                            share_link?: string;
                            type?: string;
                            display_numbers?: boolean;
                            allow_comments?: boolean;
                            sort_by?: string;
                            sort_how?: string;
                            created_at?: string;
                            updated_at?: string;
                            item_count?: number;
                            comment_count?: number;
                            likes?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                            };
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get ID lookup results": {
        parameters: {
            query?: {
                /**
                 * @description Search type.
                 * @example movie
                 */
                type?: "movie" | "show" | "episode" | "person" | "list";
            };
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Type of ID to lookup.
                 * @example imdb
                 */
                id_type: "trakt" | "imdb" | "tmdb" | "tvdb";
                /**
                 * @description ID that matches with the type.
                 * @example tt0848228
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /search/trakt/12601?type=movie
             *     /search/imdb/tt1104001
             *     ``` */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "type": "movie",
                     *         "score": null,
                     *         "movie": {
                     *           "title": "TRON: Legacy",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 12601,
                     *             "slug": "tron-legacy-2010",
                     *             "imdb": "tt1104001",
                     *             "tmdb": 20526
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        type?: string;
                        score?: unknown;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get trending shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    "X-Trending-User-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "watchers": 541,
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watchers": 432,
                     *         "show": {
                     *           "title": "The Walking Dead",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 2,
                     *             "slug": "the-walking-dead",
                     *             "tvdb": 153021,
                     *             "imdb": "tt1520211",
                     *             "tmdb": 1402
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        watchers: number;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get popular shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Community",
                     *         "year": 2009,
                     *         "ids": {
                     *           "trakt": 41,
                     *           "slug": "community",
                     *           "tvdb": 94571,
                     *           "imdb": "tt1439629",
                     *           "tmdb": 18347
                     *         }
                     *       },
                     *       {
                     *         "title": "The Walking Dead",
                     *         "year": 2010,
                     *         "ids": {
                     *           "trakt": 2,
                     *           "slug": "the-walking-dead",
                     *           "tvdb": 153021,
                     *           "imdb": "tt1520211",
                     *           "tmdb": 1402
                     *         }
                     *       },
                     *       {
                     *         "title": "Dexter",
                     *         "year": 2006,
                     *         "ids": {
                     *           "trakt": 19,
                     *           "slug": "dexter",
                     *           "tvdb": 79349,
                     *           "imdb": "tt0773262",
                     *           "tmdb": 1405
                     *         }
                     *       },
                     *       {
                     *         "title": "The Simpsons",
                     *         "year": 1989,
                     *         "ids": {
                     *           "trakt": 91,
                     *           "slug": "the-simpsons",
                     *           "tvdb": 71663,
                     *           "imdb": "tt0096697",
                     *           "tmdb": 456
                     *         }
                     *       },
                     *       {
                     *         "title": "Game of Thrones",
                     *         "year": 2011,
                     *         "ids": {
                     *           "trakt": 353,
                     *           "slug": "game-of-thrones",
                     *           "tvdb": 121361,
                     *           "imdb": "tt0944947",
                     *           "tmdb": 1399
                     *         }
                     *       },
                     *       {
                     *         "title": "Lost",
                     *         "year": 2004,
                     *         "ids": {
                     *           "trakt": 511,
                     *           "slug": "lost",
                     *           "tvdb": 73739,
                     *           "imdb": "tt0411008",
                     *           "tmdb": 4607
                     *         }
                     *       },
                     *       {
                     *         "title": "24",
                     *         "year": 2001,
                     *         "ids": {
                     *           "trakt": 460,
                     *           "slug": "24",
                     *           "tvdb": 76290,
                     *           "imdb": "tt0285331",
                     *           "tmdb": 1973
                     *         }
                     *       },
                     *       {
                     *         "title": "Battlestar Galactica",
                     *         "year": 2005,
                     *         "ids": {
                     *           "trakt": 331,
                     *           "slug": "battlestar-galactica",
                     *           "tvdb": 73545,
                     *           "imdb": "tt0407362",
                     *           "tmdb": 1972
                     *         }
                     *       },
                     *       {
                     *         "title": "Breaking Bad",
                     *         "year": 2008,
                     *         "ids": {
                     *           "trakt": 1,
                     *           "slug": "breaking-bad",
                     *           "tvdb": 81189,
                     *           "imdb": "tt0903747",
                     *           "tmdb": 1396
                     *         }
                     *       },
                     *       {
                     *         "title": "Firefly",
                     *         "year": 2002,
                     *         "ids": {
                     *           "trakt": 329,
                     *           "slug": "firefly",
                     *           "tvdb": 78874,
                     *           "imdb": "tt0303461",
                     *           "tmdb": 1437
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
    };
    "Get the most favorited shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Time period.
                 * @example weekly
                 */
                period: "daily" | "weekly" | "monthly" | "all";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "user_count": 155291,
                     *         "show": {
                     *           "title": "The Big Bang Theory",
                     *           "year": 2007,
                     *           "ids": {
                     *             "trakt": 1409,
                     *             "slug": "the-big-bang-theory",
                     *             "tvdb": 80379,
                     *             "imdb": "tt0898266",
                     *             "tmdb": 1418
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "user_count": 46170,
                     *         "show": {
                     *           "title": "Grey's Anatomy",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1407,
                     *             "slug": "grey-s-anatomy",
                     *             "tvdb": 73762,
                     *             "imdb": "tt0413573",
                     *             "tmdb": 1416
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "user_count": 203742,
                     *         "show": {
                     *           "title": "Game of Thrones",
                     *           "year": 2011,
                     *           "ids": {
                     *             "trakt": 1390,
                     *             "slug": "game-of-thrones",
                     *             "tvdb": 121361,
                     *             "imdb": "tt0944947",
                     *             "tmdb": 1399
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        user_count: number;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get the most played shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Time period.
                 * @example weekly
                 */
                period: "daily" | "weekly" | "monthly" | "all";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "watcher_count": 155291,
                     *         "play_count": 23542030,
                     *         "collected_count": 6635583,
                     *         "collector_count": 54953,
                     *         "show": {
                     *           "title": "The Big Bang Theory",
                     *           "year": 2007,
                     *           "ids": {
                     *             "trakt": 1409,
                     *             "slug": "the-big-bang-theory",
                     *             "tvdb": 80379,
                     *             "imdb": "tt0898266",
                     *             "tmdb": 1418
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 100242,
                     *         "play_count": 19787304,
                     *         "collected_count": 4529880,
                     *         "collector_count": 32335,
                     *         "show": {
                     *           "title": "How I Met Your Mother",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1095,
                     *             "slug": "how-i-met-your-mother",
                     *             "tvdb": 75760,
                     *             "imdb": "tt0460649",
                     *             "tmdb": 1100
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 56216,
                     *         "play_count": 19286818,
                     *         "collected_count": 7427018,
                     *         "collector_count": 23876,
                     *         "show": {
                     *           "title": "The Simpsons",
                     *           "year": 1989,
                     *           "ids": {
                     *             "trakt": 455,
                     *             "slug": "the-simpsons",
                     *             "tvdb": 71663,
                     *             "imdb": "tt0096697",
                     *             "tmdb": 456
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 8050,
                     *         "play_count": 17845449,
                     *         "collected_count": 3550246,
                     *         "collector_count": 4511,
                     *         "show": {
                     *           "title": "The Daily Show with Jon Stewart",
                     *           "year": 1996,
                     *           "ids": {
                     *             "trakt": 2211,
                     *             "slug": "the-daily-show-with-jon-stewart",
                     *             "tvdb": 71256,
                     *             "imdb": "tt0115147",
                     *             "tmdb": 2224
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 53775,
                     *         "play_count": 12379465,
                     *         "collected_count": 3347336,
                     *         "collector_count": 16230,
                     *         "show": {
                     *           "title": "Friends",
                     *           "year": 1994,
                     *           "ids": {
                     *             "trakt": 1657,
                     *             "slug": "friends",
                     *             "tvdb": 79168,
                     *             "imdb": "tt0108778",
                     *             "tmdb": 1668
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 68267,
                     *         "play_count": 11294835,
                     *         "collected_count": 3119930,
                     *         "collector_count": 24399,
                     *         "show": {
                     *           "title": "Supernatural",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1611,
                     *             "slug": "supernatural",
                     *             "tvdb": 78901,
                     *             "imdb": "tt0460681",
                     *             "tmdb": 1622
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 163097,
                     *         "play_count": 9945882,
                     *         "collected_count": 2423833,
                     *         "collector_count": 57617,
                     *         "show": {
                     *           "title": "The Walking Dead",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 1393,
                     *             "slug": "the-walking-dead",
                     *             "tvdb": 153021,
                     *             "imdb": "tt1520211",
                     *             "tmdb": 1402
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 46170,
                     *         "play_count": 9766448,
                     *         "collected_count": 2251539,
                     *         "collector_count": 17682,
                     *         "show": {
                     *           "title": "Grey's Anatomy",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1407,
                     *             "slug": "grey-s-anatomy",
                     *             "tvdb": 73762,
                     *             "imdb": "tt0413573",
                     *             "tmdb": 1416
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 54604,
                     *         "play_count": 8986802,
                     *         "collected_count": 2546116,
                     *         "collector_count": 20113,
                     *         "show": {
                     *           "title": "House",
                     *           "year": 2004,
                     *           "ids": {
                     *             "trakt": 1399,
                     *             "slug": "house",
                     *             "tvdb": 73255,
                     *             "imdb": "tt0412142",
                     *             "tmdb": 1408
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 203742,
                     *         "play_count": 8784154,
                     *         "collected_count": 2436824,
                     *         "collector_count": 73224,
                     *         "show": {
                     *           "title": "Game of Thrones",
                     *           "year": 2011,
                     *           "ids": {
                     *             "trakt": 1390,
                     *             "slug": "game-of-thrones",
                     *             "tvdb": 121361,
                     *             "imdb": "tt0944947",
                     *             "tmdb": 1399
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        watcher_count: number;
                        play_count: number;
                        collected_count: number;
                        collector_count: number;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get the most watched shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Time period.
                 * @example weekly
                 */
                period: "daily" | "weekly" | "monthly" | "all";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "watcher_count": 203742,
                     *         "play_count": 8784154,
                     *         "collected_count": 2436824,
                     *         "collector_count": 73224,
                     *         "show": {
                     *           "title": "Game of Thrones",
                     *           "year": 2011,
                     *           "ids": {
                     *             "trakt": 1390,
                     *             "slug": "game-of-thrones",
                     *             "tvdb": 121361,
                     *             "imdb": "tt0944947",
                     *             "tmdb": 1399
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 163097,
                     *         "play_count": 9945882,
                     *         "collected_count": 2423833,
                     *         "collector_count": 57617,
                     *         "show": {
                     *           "title": "The Walking Dead",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 1393,
                     *             "slug": "the-walking-dead",
                     *             "tvdb": 153021,
                     *             "imdb": "tt1520211",
                     *             "tmdb": 1402
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 155291,
                     *         "play_count": 23542030,
                     *         "collected_count": 6635583,
                     *         "collector_count": 54953,
                     *         "show": {
                     *           "title": "The Big Bang Theory",
                     *           "year": 2007,
                     *           "ids": {
                     *             "trakt": 1409,
                     *             "slug": "the-big-bang-theory",
                     *             "tvdb": 80379,
                     *             "imdb": "tt0898266",
                     *             "tmdb": 1418
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 140725,
                     *         "play_count": 8576210,
                     *         "collected_count": 2471061,
                     *         "collector_count": 49385,
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1388,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 123797,
                     *         "play_count": 6173692,
                     *         "collected_count": 1856666,
                     *         "collector_count": 43351,
                     *         "show": {
                     *           "title": "Arrow",
                     *           "year": 2012,
                     *           "ids": {
                     *             "trakt": 1403,
                     *             "slug": "arrow",
                     *             "tvdb": 257655,
                     *             "imdb": "tt2193021",
                     *             "tmdb": 1412
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 100242,
                     *         "play_count": 19787304,
                     *         "collected_count": 4529880,
                     *         "collector_count": 32335,
                     *         "show": {
                     *           "title": "How I Met Your Mother",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1095,
                     *             "slug": "how-i-met-your-mother",
                     *             "tvdb": 75760,
                     *             "imdb": "tt0460649",
                     *             "tmdb": 1100
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 94282,
                     *         "play_count": 912066,
                     *         "collected_count": 260713,
                     *         "collector_count": 34077,
                     *         "show": {
                     *           "title": "Sherlock",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 19792,
                     *             "slug": "sherlock",
                     *             "tvdb": 176941,
                     *             "imdb": "tt1475582",
                     *             "tmdb": 19885
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 89242,
                     *         "play_count": 3375660,
                     *         "collected_count": 1299956,
                     *         "collector_count": 39724,
                     *         "show": {
                     *           "title": "Homeland",
                     *           "year": 2011,
                     *           "ids": {
                     *             "trakt": 1398,
                     *             "slug": "homeland",
                     *             "tvdb": 247897,
                     *             "imdb": "tt1796960",
                     *             "tmdb": 1407
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 87059,
                     *         "play_count": 7799337,
                     *         "collected_count": 2239477,
                     *         "collector_count": 33424,
                     *         "show": {
                     *           "title": "Dexter",
                     *           "year": 2006,
                     *           "ids": {
                     *             "trakt": 1396,
                     *             "slug": "dexter",
                     *             "tvdb": 79349,
                     *             "imdb": "tt0773262",
                     *             "tmdb": 1405
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 83087,
                     *         "play_count": 2795758,
                     *         "collected_count": 881552,
                     *         "collector_count": 31982,
                     *         "show": {
                     *           "title": "Marvel's Agents of S.H.I.E.L.D.",
                     *           "year": 2013,
                     *           "ids": {
                     *             "trakt": 1394,
                     *             "slug": "marvel-s-agents-of-s-h-i-e-l-d",
                     *             "tvdb": 263365,
                     *             "imdb": "tt2364582",
                     *             "tmdb": 1403
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        watcher_count: number;
                        play_count: number;
                        collected_count: number;
                        collector_count: number;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get the most collected shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Time period.
                 * @example weekly
                 */
                period: "daily" | "weekly" | "monthly" | "all";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "watcher_count": 56216,
                     *         "play_count": 19286818,
                     *         "collected_count": 7427018,
                     *         "collector_count": 23876,
                     *         "show": {
                     *           "title": "The Simpsons",
                     *           "year": 1989,
                     *           "ids": {
                     *             "trakt": 455,
                     *             "slug": "the-simpsons",
                     *             "tvdb": 71663,
                     *             "imdb": "tt0096697",
                     *             "tmdb": 456
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 155291,
                     *         "play_count": 23542030,
                     *         "collected_count": 6635583,
                     *         "collector_count": 54953,
                     *         "show": {
                     *           "title": "The Big Bang Theory",
                     *           "year": 2007,
                     *           "ids": {
                     *             "trakt": 1409,
                     *             "slug": "the-big-bang-theory",
                     *             "tvdb": 80379,
                     *             "imdb": "tt0898266",
                     *             "tmdb": 1418
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 100242,
                     *         "play_count": 19787304,
                     *         "collected_count": 4529880,
                     *         "collector_count": 32335,
                     *         "show": {
                     *           "title": "How I Met Your Mother",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1095,
                     *             "slug": "how-i-met-your-mother",
                     *             "tvdb": 75760,
                     *             "imdb": "tt0460649",
                     *             "tmdb": 1100
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 8050,
                     *         "play_count": 17845449,
                     *         "collected_count": 3550246,
                     *         "collector_count": 4511,
                     *         "show": {
                     *           "title": "The Daily Show with Jon Stewart",
                     *           "year": 1996,
                     *           "ids": {
                     *             "trakt": 2211,
                     *             "slug": "the-daily-show-with-jon-stewart",
                     *             "tvdb": 71256,
                     *             "imdb": "tt0115147",
                     *             "tmdb": 2224
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 53775,
                     *         "play_count": 12379465,
                     *         "collected_count": 3347336,
                     *         "collector_count": 16230,
                     *         "show": {
                     *           "title": "Friends",
                     *           "year": 1994,
                     *           "ids": {
                     *             "trakt": 1657,
                     *             "slug": "friends",
                     *             "tvdb": 79168,
                     *             "imdb": "tt0108778",
                     *             "tmdb": 1668
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 48984,
                     *         "play_count": 7879681,
                     *         "collected_count": 3273255,
                     *         "collector_count": 23114,
                     *         "show": {
                     *           "title": "Family Guy",
                     *           "year": 1999,
                     *           "ids": {
                     *             "trakt": 1425,
                     *             "slug": "family-guy",
                     *             "tvdb": 75978,
                     *             "imdb": "tt0182576",
                     *             "tmdb": 1434
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 68267,
                     *         "play_count": 11294835,
                     *         "collected_count": 3119930,
                     *         "collector_count": 24399,
                     *         "show": {
                     *           "title": "Supernatural",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1611,
                     *             "slug": "supernatural",
                     *             "tvdb": 78901,
                     *             "imdb": "tt0460681",
                     *             "tmdb": 1622
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 41844,
                     *         "play_count": 7267474,
                     *         "collected_count": 2965842,
                     *         "collector_count": 19450,
                     *         "show": {
                     *           "title": "South Park",
                     *           "year": 1997,
                     *           "ids": {
                     *             "trakt": 2177,
                     *             "slug": "south-park",
                     *             "tvdb": 75897,
                     *             "imdb": "tt0121955",
                     *             "tmdb": 2190
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 72285,
                     *         "play_count": 7997522,
                     *         "collected_count": 2570535,
                     *         "collector_count": 28446,
                     *         "show": {
                     *           "title": "Modern Family",
                     *           "year": 2009,
                     *           "ids": {
                     *             "trakt": 1412,
                     *             "slug": "modern-family",
                     *             "tvdb": 95011,
                     *             "imdb": "tt1442437",
                     *             "tmdb": 1421
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "watcher_count": 54604,
                     *         "play_count": 8986802,
                     *         "collected_count": 2546116,
                     *         "collector_count": 20113,
                     *         "show": {
                     *           "title": "House",
                     *           "year": 2004,
                     *           "ids": {
                     *             "trakt": 1399,
                     *             "slug": "house",
                     *             "tvdb": 73255,
                     *             "imdb": "tt0412142",
                     *             "tmdb": 1408
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        watcher_count: number;
                        play_count: number;
                        collected_count: number;
                        collector_count: number;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get the most anticipated shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "list_count": 5383,
                     *         "show": {
                     *           "title": "Supergirl",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 99046,
                     *             "slug": "supergirl",
                     *             "tvdb": 295759,
                     *             "imdb": "tt4016454",
                     *             "tmdb": 62688
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 3132,
                     *         "show": {
                     *           "title": "Marvel's Jessica Jones",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 79385,
                     *             "slug": "marvel-s-jessica-jones",
                     *             "tvdb": 284190,
                     *             "imdb": "tt2357547",
                     *             "tmdb": 38472
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 3095,
                     *         "show": {
                     *           "title": "Lucifer",
                     *           "year": 2016,
                     *           "ids": {
                     *             "trakt": 98990,
                     *             "slug": "lucifer",
                     *             "tvdb": 295685,
                     *             "imdb": "tt4052886",
                     *             "tmdb": 63174
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 1704,
                     *         "show": {
                     *           "title": "Ash vs Evil Dead",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 99460,
                     *             "slug": "ash-vs-evil-dead",
                     *             "tvdb": 296295,
                     *             "imdb": "tt4189022",
                     *             "tmdb": 62264
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 1655,
                     *         "show": {
                     *           "title": "The Expanse",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 77199,
                     *             "slug": "the-expanse",
                     *             "tvdb": 280619,
                     *             "imdb": "tt3230854",
                     *             "tmdb": null
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 1481,
                     *         "show": {
                     *           "title": "Into the Badlands",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 82217,
                     *             "slug": "into-the-badlands",
                     *             "tvdb": 289079,
                     *             "imdb": "tt3865236",
                     *             "tmdb": 47450
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 1332,
                     *         "show": {
                     *           "title": "Colony",
                     *           "year": 2016,
                     *           "ids": {
                     *             "trakt": 95966,
                     *             "slug": "colony",
                     *             "tvdb": 284210,
                     *             "imdb": "tt4209256",
                     *             "tmdb": 62858
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 1060,
                     *         "show": {
                     *           "title": "Wicked City",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 98888,
                     *             "slug": "wicked-city",
                     *             "tvdb": 295518,
                     *             "imdb": "tt4428124",
                     *             "tmdb": 62927
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 982,
                     *         "show": {
                     *           "title": "Marvel's Luke Cage",
                     *           "year": 2016,
                     *           "ids": {
                     *             "trakt": 79382,
                     *             "slug": "marvel-s-luke-cage",
                     *             "tvdb": 284192,
                     *             "imdb": "tt3322314",
                     *             "tmdb": 62126
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "list_count": 838,
                     *         "show": {
                     *           "title": "Dr. Ken",
                     *           "year": 2015,
                     *           "ids": {
                     *             "trakt": 98913,
                     *             "slug": "dr-ken-1969",
                     *             "tvdb": 295557,
                     *             "imdb": "tt3216608",
                     *             "tmdb": 62776
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        list_count: number;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number | null;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get recently updated shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Updated since this date and time.
                 * @example 2020-11-27T00:00:00Z
                 */
                start_date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "updated_at": "2014-09-22T21:56:03.000Z",
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "updated_at": "2014-09-23T21:56:03.000Z",
                     *         "show": {
                     *           "title": "The Walking Dead",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 2,
                     *             "slug": "the-walking-dead",
                     *             "tvdb": 153021,
                     *             "imdb": "tt1520211",
                     *             "tmdb": 1402
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        updated_at: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get recently updated show Trakt IDs": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Updated since this date and time.
                 * @example 2020-11-27T00:00:00Z
                 */
                start_date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Start-Date"?: string;
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       1,
                     *       20,
                     *       34,
                     *       50
                     *     ] */
                    "application/json": number[];
                };
            };
        };
    };
    "Get a single show": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /shows/game-of-thrones?extended=full
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    } | {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        tagline?: string;
                        overview?: string;
                        first_aired?: string;
                        airs?: {
                            day?: string;
                            time?: string;
                            timezone?: string;
                        };
                        runtime?: number;
                        certification?: string;
                        network?: string;
                        country?: string;
                        updated_at?: string;
                        trailer?: unknown;
                        homepage?: string;
                        status?: string;
                        rating?: number;
                        votes?: number;
                        comment_count?: number;
                        languages?: string[];
                        available_translations?: string[];
                        genres?: string[];
                        aired_episodes?: number;
                        original_title?: string;
                    };
                };
            };
        };
    };
    "Get all show aliases": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "冰與火之歌：權力遊戲",
                     *         "country": "tw"
                     *       },
                     *       {
                     *         "title": "A Guerra dos Tronos",
                     *         "country": "br"
                     *       },
                     *       {
                     *         "title": "Game of Thrones- Das Lied von Eis und Feuer",
                     *         "country": "de"
                     *       },
                     *       {
                     *         "title": "Παιχνίδι Του Στέμματος",
                     *         "country": "gr"
                     *       },
                     *       {
                     *         "title": "Game of Thrones - Das Lied von Eis und Feuer",
                     *         "country": "de"
                     *       },
                     *       {
                     *         "title": "Le Trône de fer",
                     *         "country": "fr"
                     *       },
                     *       {
                     *         "title": "Urzeala Tronurilor",
                     *         "country": "ro"
                     *       },
                     *       {
                     *         "title": "صراع العروش",
                     *         "country": "sa"
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        country: string;
                    }[];
                };
            };
        };
    };
    "Get all show certifications": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "certification": "TV-MA",
                     *         "country": "us"
                     *       },
                     *       {
                     *         "certification": "12",
                     *         "country": "de"
                     *       },
                     *       {
                     *         "certification": "15",
                     *         "country": "kr"
                     *       },
                     *       {
                     *         "certification": "15",
                     *         "country": "gb"
                     *       },
                     *       {
                     *         "certification": "16",
                     *         "country": "br"
                     *       },
                     *       {
                     *         "certification": "12",
                     *         "country": "nl"
                     *       },
                     *       {
                     *         "certification": "18",
                     *         "country": "pt"
                     *       }
                     *     ] */
                    "application/json": {
                        certification: string;
                        country: string;
                    }[];
                };
            };
        };
    };
    "Get all show translations": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description 2 character language code
                 * @example es
                 */
                language: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Breaking Bad",
                     *         "overview": "Breaking Bad is an American crime drama television series created and produced by Vince Gilligan. Set and produced in Albuquerque, New Mexico, Breaking Bad is the story of Walter White, a struggling high school chemistry teacher who is diagnosed with inoperable lung cancer at the beginning of the series. He turns to a life of crime, producing and selling methamphetamine, in order to secure his family's financial future before he dies, teaming with his former student, Jesse Pinkman. Heavily serialized, the series is known for positioning its characters in seemingly inextricable corners and has been labeled a contemporary western by its creator.",
                     *         "tagline": "Change the equation.",
                     *         "language": "en",
                     *         "country": "us"
                     *       },
                     *       {
                     *         "title": "Breaking Bad",
                     *         "overview": "...",
                     *         "tagline": "...",
                     *         "language": "tr",
                     *         "country": "tr"
                     *       },
                     *       {
                     *         "title": "Perníkový tatko",
                     *         "overview": "",
                     *         "tagline": null,
                     *         "language": "sk",
                     *         "country": "sk"
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        overview: string;
                        tagline: string | null;
                        language: string;
                        country: string;
                    }[];
                };
            };
        };
    };
    "Get all show comments": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description how to sort
                 * @example newest
                 */
                sort: "newest" | "oldest" | "likes" | "replies" | "highest" | "lowest" | "plays" | "watched";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 8,
                     *         "parent_id": 0,
                     *         "created_at": "2011-03-25T22:35:17.000Z",
                     *         "updated_at": "2011-03-25T22:35:17.000Z",
                     *         "comment": "Great show!",
                     *         "spoiler": false,
                     *         "review": false,
                     *         "replies": 1,
                     *         "likes": 0,
                     *         "user_stats": {
                     *           "rating": 8,
                     *           "play_count": 1,
                     *           "completed_count": 1
                     *         },
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: number;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get lists containing this show": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description Filter for a specific list type
                 * @example personal
                 */
                type: "all" | "personal" | "official" | "watchlists" | "favorites";
                /**
                 * @description How to sort
                 * @example popular
                 */
                sort: "popular" | "likes" | "comments" | "items" | "added" | "updated";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "Incredible Thoughts",
                     *         "description": "How could my brain conceive them?",
                     *         "privacy": "public",
                     *         "share_link": "https://trakt.tv/lists/1337",
                     *         "type": "personal",
                     *         "display_numbers": true,
                     *         "allow_comments": true,
                     *         "sort_by": "rank",
                     *         "sort_how": "asc",
                     *         "created_at": "2014-10-11T17:00:54.000Z",
                     *         "updated_at": "2014-10-11T17:00:54.000Z",
                     *         "item_count": 50,
                     *         "comment_count": 10,
                     *         "likes": 99,
                     *         "ids": {
                     *           "trakt": 1337,
                     *           "slug": "incredible-thoughts"
                     *         },
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get show collection progress": {
        parameters: {
            query: {
                /**
                 * @description include any hidden seasons
                 * @example false
                 */
                hidden?: string;
                /**
                 * @description include specials as season 0
                 * @example false
                 */
                specials?: string;
                /**
                 * @description count specials in the overall stats (only applies if specials are included)
                 * @example true
                 */
                count_specials?: string;
                "last_activity (optional, string, `aired`) ... used to calculate last_episode and next_episode": "aired" | "collected";
            };
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "aired": 8,
                     *       "completed": 6,
                     *       "last_collected_at": "2015-03-21T19:03:58.000Z",
                     *       "seasons": [
                     *         {
                     *           "number": 1,
                     *           "title": "The first Hodor.",
                     *           "aired": 8,
                     *           "completed": 6,
                     *           "episodes": [
                     *             {
                     *               "number": 1,
                     *               "completed": true,
                     *               "collected_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 2,
                     *               "completed": true,
                     *               "collected_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 3,
                     *               "completed": true,
                     *               "collected_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 4,
                     *               "completed": true,
                     *               "collected_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 5,
                     *               "completed": true,
                     *               "collected_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 6,
                     *               "completed": true,
                     *               "collected_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 7,
                     *               "completed": false,
                     *               "collected_at": null
                     *             },
                     *             {
                     *               "number": 8,
                     *               "completed": false,
                     *               "collected_at": null
                     *             }
                     *           ]
                     *         }
                     *       ],
                     *       "hidden_seasons": [
                     *         {
                     *           "number": 2,
                     *           "ids": {
                     *             "trakt": 3051,
                     *             "tvdb": 498968,
                     *             "tmdb": 53334
                     *           }
                     *         }
                     *       ],
                     *       "next_episode": {
                     *         "season": 1,
                     *         "number": 7,
                     *         "title": "Water",
                     *         "ids": {
                     *           "trakt": 62315,
                     *           "tvdb": 4849873,
                     *           "imdb": null,
                     *           "tmdb": null
                     *         }
                     *       },
                     *       "last_episode": {
                     *         "season": 1,
                     *         "number": 6,
                     *         "title": "Fire",
                     *         "ids": {
                     *           "trakt": 62314,
                     *           "tvdb": 4849872,
                     *           "imdb": null,
                     *           "tmdb": null
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        aired?: number;
                        completed?: number;
                        last_collected_at?: string;
                        seasons?: {
                            number?: number;
                            title?: string;
                            aired?: number;
                            completed?: number;
                            episodes?: {
                                number: number;
                                completed: boolean;
                                collected_at: string | null;
                            }[];
                        }[];
                        hidden_seasons?: {
                            number?: number;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                tmdb?: number;
                            };
                        }[];
                        next_episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: unknown;
                            };
                        };
                        last_episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: unknown;
                            };
                        };
                    };
                };
            };
        };
    };
    "Get show watched progress": {
        parameters: {
            query: {
                /**
                 * @description include any hidden seasons
                 * @example false
                 */
                hidden?: string;
                /**
                 * @description include specials as season 0
                 * @example false
                 */
                specials?: string;
                /**
                 * @description count specials in the overall stats (only applies if specials are included)
                 * @example true
                 */
                count_specials?: string;
                "last_activity (optional, string, `aired`) ... used to calculate last_episode and next_episode": "aired" | "watched";
            };
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "aired": 8,
                     *       "completed": 6,
                     *       "last_watched_at": "2015-03-21T19:03:58.000Z",
                     *       "reset_at": null,
                     *       "seasons": [
                     *         {
                     *           "number": 1,
                     *           "title": "The first Hodor.",
                     *           "aired": 8,
                     *           "completed": 6,
                     *           "episodes": [
                     *             {
                     *               "number": 1,
                     *               "completed": true,
                     *               "last_watched_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 2,
                     *               "completed": true,
                     *               "last_watched_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 3,
                     *               "completed": true,
                     *               "last_watched_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 4,
                     *               "completed": true,
                     *               "last_watched_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 5,
                     *               "completed": true,
                     *               "last_watched_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 6,
                     *               "completed": true,
                     *               "last_watched_at": "2015-03-21T19:03:58.000Z"
                     *             },
                     *             {
                     *               "number": 7,
                     *               "completed": false,
                     *               "last_watched_at": null
                     *             },
                     *             {
                     *               "number": 8,
                     *               "completed": false,
                     *               "last_watched_at": null
                     *             }
                     *           ]
                     *         }
                     *       ],
                     *       "hidden_seasons": [
                     *         {
                     *           "number": 2,
                     *           "ids": {
                     *             "trakt": 3051,
                     *             "tvdb": 498968,
                     *             "tmdb": 53334
                     *           }
                     *         }
                     *       ],
                     *       "next_episode": {
                     *         "season": 1,
                     *         "number": 7,
                     *         "title": "Water",
                     *         "ids": {
                     *           "trakt": 62315,
                     *           "tvdb": 4849873,
                     *           "imdb": null,
                     *           "tmdb": null
                     *         }
                     *       },
                     *       "last_episode": {
                     *         "season": 1,
                     *         "number": 6,
                     *         "title": "Fire",
                     *         "ids": {
                     *           "trakt": 62314,
                     *           "tvdb": 4849872,
                     *           "imdb": null,
                     *           "tmdb": null
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        aired?: number;
                        completed?: number;
                        last_watched_at?: string;
                        reset_at?: unknown;
                        seasons?: {
                            number?: number;
                            title?: string;
                            aired?: number;
                            completed?: number;
                            episodes?: {
                                number: number;
                                completed: boolean;
                                last_watched_at: string | null;
                            }[];
                        }[];
                        hidden_seasons?: {
                            number?: number;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                tmdb?: number;
                            };
                        }[];
                        next_episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: unknown;
                            };
                        };
                        last_episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: unknown;
                            };
                        };
                    };
                };
            };
        };
    };
    "Reset show progress": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "reset_at": "2021-07-01T00:00:000Z"
                     *     } */
                    "application/json": {
                        reset_at?: string;
                    };
                };
            };
        };
    };
    "Undo reset show progress": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get all people for a show": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /shows/game-of-thrones/people?extended=guest_stars
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        cast?: {
                            characters: string[];
                            episode_count: number;
                            person: {
                                name?: string;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        crew?: {
                            art?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            production?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            sound?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            "visual effects"?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            "costume & make-up"?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            writing?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            directing?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                        };
                    } | {
                        cast?: {
                            characters: string[];
                            episode_count: number;
                            person: {
                                name?: string;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        guest_stars?: {
                            characters: string[];
                            episode_count: number;
                            person: {
                                name?: string;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        crew?: {
                            art?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            production?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            sound?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            "visual effects"?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            "costume & make-up"?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            writing?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            directing?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                        };
                    };
                };
            };
        };
    };
    "Get show ratings": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "rating": 9.38363,
                     *       "votes": 51065,
                     *       "distribution": {
                     *         "1": 320,
                     *         "2": 77,
                     *         "3": 73,
                     *         "4": 131,
                     *         "5": 300,
                     *         "6": 514,
                     *         "7": 1560,
                     *         "8": 4399,
                     *         "9": 9648,
                     *         "10": 34042
                     *       }
                     *     } */
                    "application/json": {
                        rating?: number;
                        votes?: number;
                        distribution?: {
                            1?: number;
                            2?: number;
                            3?: number;
                            4?: number;
                            5?: number;
                            6?: number;
                            7?: number;
                            8?: number;
                            9?: number;
                            10?: number;
                        };
                    };
                };
            };
        };
    };
    "Get related shows": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Battlestar Galactica",
                     *         "year": 2005,
                     *         "ids": {
                     *           "trakt": 331,
                     *           "slug": "battlestar-galactica",
                     *           "tvdb": 73545,
                     *           "imdb": "tt0407362",
                     *           "tmdb": 1972
                     *         }
                     *       },
                     *       {
                     *         "title": "Game of Thrones",
                     *         "year": 2011,
                     *         "ids": {
                     *           "trakt": 353,
                     *           "slug": "game-of-thrones",
                     *           "tvdb": 121361,
                     *           "imdb": "tt0944947",
                     *           "tmdb": 1399
                     *         }
                     *       },
                     *       {
                     *         "title": "Firefly",
                     *         "year": 2002,
                     *         "ids": {
                     *           "trakt": 329,
                     *           "slug": "firefly",
                     *           "tvdb": 78874,
                     *           "imdb": "tt0303461",
                     *           "tmdb": 1437
                     *         }
                     *       },
                     *       {
                     *         "title": "The Newsroom",
                     *         "year": 2012,
                     *         "ids": {
                     *           "trakt": 497,
                     *           "slug": "the-newsroom",
                     *           "tvdb": 256227,
                     *           "imdb": "tt1870479",
                     *           "tmdb": 15621
                     *         }
                     *       },
                     *       {
                     *         "title": "Dollhouse",
                     *         "year": 2009,
                     *         "ids": {
                     *           "trakt": 395,
                     *           "slug": "dollhouse",
                     *           "tvdb": 82046,
                     *           "imdb": "tt1135300",
                     *           "tmdb": 14956
                     *         }
                     *       },
                     *       {
                     *         "title": "Sons of Anarchy",
                     *         "year": 2008,
                     *         "ids": {
                     *           "trakt": 23,
                     *           "slug": "sons-of-anarchy",
                     *           "tvdb": 82696,
                     *           "imdb": "tt1124373",
                     *           "tmdb": 1409
                     *         }
                     *       },
                     *       {
                     *         "title": "Hannibal",
                     *         "year": 2013,
                     *         "ids": {
                     *           "trakt": 567,
                     *           "slug": "hannibal",
                     *           "tvdb": 259063,
                     *           "imdb": "tt2243973",
                     *           "tmdb": 40008
                     *         }
                     *       },
                     *       {
                     *         "title": "True Blood",
                     *         "year": 2008,
                     *         "ids": {
                     *           "trakt": 122,
                     *           "slug": "true-blood",
                     *           "tvdb": 82283,
                     *           "imdb": "tt0844441",
                     *           "tmdb": 10545
                     *         }
                     *       },
                     *       {
                     *         "title": "The Walking Dead",
                     *         "year": 2010,
                     *         "ids": {
                     *           "trakt": 2,
                     *           "slug": "the-walking-dead",
                     *           "tvdb": 153021,
                     *           "imdb": "tt1520211",
                     *           "tmdb": 1402
                     *         }
                     *       },
                     *       {
                     *         "title": "The Shield",
                     *         "year": 2002,
                     *         "ids": {
                     *           "trakt": 486,
                     *           "slug": "the-shield",
                     *           "tvdb": 78261,
                     *           "imdb": "tt0286486",
                     *           "tmdb": 1414
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
    };
    "Get show stats": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "watchers": 355422,
                     *       "plays": 18278737,
                     *       "collectors": 159266,
                     *       "collected_episodes": 7144637,
                     *       "comments": 257,
                     *       "lists": 149488,
                     *       "votes": 51065,
                     *       "favorited": 54321
                     *     } */
                    "application/json": {
                        watchers?: number;
                        plays?: number;
                        collectors?: number;
                        collected_episodes?: number;
                        comments?: number;
                        lists?: number;
                        votes?: number;
                        favorited?: number;
                    };
                };
            };
        };
    };
    "Get show studios": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "ABC Studios",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 1,
                     *           "slug": "abc-studios",
                     *           "tmdb": 19366
                     *         }
                     *       },
                     *       {
                     *         "name": "DeKnight Productions",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 2,
                     *           "slug": "deknight-productions",
                     *           "tmdb": 51963
                     *         }
                     *       },
                     *       {
                     *         "name": "Goddard Textiles",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 3,
                     *           "slug": "goddard-textiles",
                     *           "tmdb": 51964
                     *         }
                     *       },
                     *       {
                     *         "name": "Marvel Television",
                     *         "country": "us",
                     *         "ids": {
                     *           "trakt": 4,
                     *           "slug": "marvel-television",
                     *           "tmdb": 38679
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        name: string;
                        country: string;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
    };
    "Get users watching right now": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "username": "justin",
                     *         "private": false,
                     *         "name": "Justin Nemeth",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "justin"
                     *         }
                     *       },
                     *       {
                     *         "username": "sean",
                     *         "private": false,
                     *         "name": "Sean Rudford",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "sean"
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        username: string;
                        private: boolean;
                        name: string;
                        vip: boolean;
                        vip_ep: boolean;
                        ids: {
                            slug?: string;
                        };
                    }[];
                };
            };
        };
    };
    "Get next episode": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "season": 7,
                     *       "number": 1,
                     *       "title": "TBA",
                     *       "ids": {
                     *         "trakt": 2279059,
                     *         "tvdb": 5773656,
                     *         "imdb": null,
                     *         "tmdb": null
                     *       }
                     *     } */
                    "application/json": {
                        season?: number;
                        number?: number;
                        title?: string;
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: unknown;
                            tmdb?: unknown;
                        };
                    };
                };
            };
        };
    };
    "Get last episode": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "season": 6,
                     *       "number": 10,
                     *       "title": "The Winds of Winter",
                     *       "ids": {
                     *         "trakt": 1989031,
                     *         "tvdb": 5624261,
                     *         "imdb": "tt4283094",
                     *         "tmdb": 1187405
                     *       }
                     *     } */
                    "application/json": {
                        season?: number;
                        number?: number;
                        title?: string;
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    };
                };
            };
        };
    };
    "Get all videos": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Official Trailer # 3",
                     *         "url": "https://youtube.com/watch?v=d4RiUy23e9s",
                     *         "site": "youtube",
                     *         "type": "trailer",
                     *         "size": 1080,
                     *         "official": true,
                     *         "published_at": "2010-11-09T01:07:39.000Z",
                     *         "country": "us",
                     *         "language": "en"
                     *       }
                     *     ] */
                    "application/json": {
                        title?: string;
                        url?: string;
                        site?: string;
                        type?: string;
                        size?: number;
                        official?: boolean;
                        published_at?: string;
                        country?: string;
                        language?: string;
                    }[];
                };
            };
        };
    };
    "Refresh show metadata": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get all seasons for a show": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /shows/game-of-thrones/seasons?extended=episodes
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        number: number;
                        ids: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[] | {
                        number: number;
                        ids: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                        rating: number;
                        votes: number;
                        episode_count: number;
                        aired_episodes: number;
                        title: string;
                        overview: string | null;
                        first_aired: string;
                        udpated_at: string;
                        network: string;
                        original_title: string | null;
                    }[] | {
                        number: number;
                        ids: {
                            trakt?: number;
                            tvdb?: number | null;
                            tmdb?: number;
                        };
                        episodes: {
                            season: number;
                            number: number;
                            title: string;
                            ids: {
                                trakt?: number;
                                tvdb?: number | null;
                                imdb?: string;
                                tmdb?: number;
                            };
                        }[];
                    }[];
                };
            };
        };
    };
    "Get single seasons for a show": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /shows/game-of-thrones/seasons/1/info?extended=full
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        number?: number;
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    } | {
                        number?: number;
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                        rating?: number;
                        votes?: number;
                        episode_count?: number;
                        aired_episodes?: number;
                        title?: string;
                        overview?: string;
                        first_aired?: string;
                        udpated_at?: string;
                        network?: string;
                        original_title?: string;
                    };
                };
            };
        };
    };
    "Get all episodes for a single season": {
        parameters: {
            query?: {
                /**
                 * @description include episode translations
                 * @example es
                 */
                translations?: string;
            };
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "season": 1,
                     *         "number": 1,
                     *         "title": "Winter Is Coming",
                     *         "ids": {
                     *           "trakt": 456,
                     *           "tvdb": 3254641,
                     *           "imdb": "tt1480055",
                     *           "tmdb": 63056
                     *         }
                     *       },
                     *       {
                     *         "season": 1,
                     *         "number": 2,
                     *         "title": "The Kingsroad",
                     *         "ids": {
                     *           "trakt": 457,
                     *           "tvdb": 3436411,
                     *           "imdb": "tt1668746",
                     *           "tmdb": 63057
                     *         }
                     *       },
                     *       {
                     *         "season": 1,
                     *         "number": 3,
                     *         "title": "Lord Snow",
                     *         "ids": {
                     *           "trakt": 458,
                     *           "tvdb": 3436421,
                     *           "imdb": "tt1829962",
                     *           "tmdb": 63058
                     *         }
                     *       },
                     *       {
                     *         "season": 1,
                     *         "number": 4,
                     *         "title": "Cripples, Bastards, and Broken Things",
                     *         "ids": {
                     *           "trakt": 459,
                     *           "tvdb": 3436431,
                     *           "imdb": "tt1829963",
                     *           "tmdb": 63059
                     *         }
                     *       },
                     *       {
                     *         "season": 1,
                     *         "number": 5,
                     *         "title": "The Wolf and the Lion",
                     *         "ids": {
                     *           "trakt": 460,
                     *           "tvdb": 3436441,
                     *           "imdb": "tt1829964",
                     *           "tmdb": 63060
                     *         }
                     *       },
                     *       {
                     *         "season": 1,
                     *         "number": 6,
                     *         "title": "A Golden Crown",
                     *         "ids": {
                     *           "trakt": 461,
                     *           "tvdb": 3436451,
                     *           "imdb": "tt1837862",
                     *           "tmdb": 63061
                     *         }
                     *       },
                     *       {
                     *         "season": 1,
                     *         "number": 7,
                     *         "title": "You Win or You Die",
                     *         "ids": {
                     *           "trakt": 462,
                     *           "tvdb": 3436461,
                     *           "imdb": "tt1837863",
                     *           "tmdb": 63062
                     *         }
                     *       },
                     *       {
                     *         "season": 1,
                     *         "number": 8,
                     *         "title": "The Pointy End",
                     *         "ids": {
                     *           "trakt": 463,
                     *           "tvdb": 3360391,
                     *           "imdb": "tt1837864",
                     *           "tmdb": 63063
                     *         }
                     *       },
                     *       {
                     *         "season": 1,
                     *         "number": 9,
                     *         "title": "Baelor",
                     *         "ids": {
                     *           "trakt": 464,
                     *           "tvdb": 4063481,
                     *           "imdb": "tt1851398",
                     *           "tmdb": 63064
                     *         }
                     *       },
                     *       {
                     *         "season": 1,
                     *         "number": 10,
                     *         "title": "Fire and Blood",
                     *         "ids": {
                     *           "trakt": 465,
                     *           "tvdb": 4063491,
                     *           "imdb": "tt1851397",
                     *           "tmdb": 63065
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        season: number;
                        number: number;
                        title: string;
                        ids: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
    };
    "Get all season translations": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description 2 character language code
                 * @example es
                 */
                language: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "시즌 1",
                     *         "overview": "웨스테로스 북부 지방 윈터펠을 다스리는 에다드 스타크. 스타크 가문은 '겨울이 오고 있다'를 가언으로 몇 년, 때론 남은 일생 동안 계속 될지도 모르는 혹독한 겨울을 대비하며 지낸다. 그러던 중 에다드는 현재 왕좌에 있는 바라테온 가문의 로버트 왕의 핸드로서 왕을 보좌하기 위해 수도 킹스랜딩에 오게 된다. 바라테온 가문과 라니스터 가문, 왕좌를 빼앗긴 타르가옌 가문 등 칠왕국 안의 가문들은 욕망과 명예를 향한 열망으로 피 튀기는 암투를 시작하는데...",
                     *         "language": "ko",
                     *         "country": "ko"
                     *       },
                     *       {
                     *         "title": "Seizoen 1",
                     *         "overview": "Het eerste seizoen van de epische fantasy tv- drama-serie Game of Thrones ging in première op HBO op 17 april 2011 en eindigde op 19 juni 2011, uitgezonden in de Verenigde Staten . Het bestaat uit 10 afleveringen , elke aflevering duurt ongeveer 55 minuten. Game of Thrones is gebaseerd op de roman A Game of Thrones , de eerste vermelding in Een Lied van IJs en Vuur serie van George RR Martin . Het verhaal speelt zich af in een fictieve wereld , in de eerste plaats op een continent genaamd Westeros . The Noble House Stark , onder leiding van Lord Eddard \" Ned \" Stark wordt betrokken in regelingen tegen koning Robert Baratheon wanneer de Hand van de Koning Jon Arryn op mysterieuze wijze sterft .",
                     *         "language": "nl",
                     *         "country": "nl"
                     *       },
                     *       {
                     *         "title": "Sesong 1",
                     *         "overview": "Sesong 1 av Game of Thrones hadde premiere 17 Mai, 2011.",
                     *         "language": "no",
                     *         "country": "no"
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        overview: string;
                        language: string;
                        country: string;
                    }[];
                };
            };
        };
    };
    "Get all season comments": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description how to sort
                 * @example newest
                 */
                sort: "newest" | "oldest" | "likes" | "replies" | "highest" | "lowest" | "plays" | "watched";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 8,
                     *         "parent_id": 0,
                     *         "created_at": "2011-03-25T22:35:17.000Z",
                     *         "updated_at": "2011-03-25T22:35:17.000Z",
                     *         "comment": "Great season!",
                     *         "spoiler": false,
                     *         "review": false,
                     *         "replies": 1,
                     *         "likes": 0,
                     *         "user_stats": {
                     *           "rating": 8,
                     *           "play_count": 1,
                     *           "completed_count": 1
                     *         },
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: number;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get lists containing this season": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description Filter for a specific list type
                 * @example personal
                 */
                type: "all" | "personal" | "official" | "watchlists";
                /**
                 * @description How to sort
                 * @example popular
                 */
                sort: "popular" | "likes" | "comments" | "items" | "added" | "updated";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "Incredible Thoughts",
                     *         "description": "How could my brain conceive them?",
                     *         "privacy": "public",
                     *         "share_link": "https://trakt.tv/lists/1337",
                     *         "type": "personal",
                     *         "display_numbers": true,
                     *         "allow_comments": true,
                     *         "sort_by": "rank",
                     *         "sort_how": "asc",
                     *         "created_at": "2014-10-11T17:00:54.000Z",
                     *         "updated_at": "2014-10-11T17:00:54.000Z",
                     *         "item_count": 50,
                     *         "comment_count": 10,
                     *         "likes": 99,
                     *         "ids": {
                     *           "trakt": 1337,
                     *           "slug": "incredible-thoughts"
                     *         },
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get all people for a season": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /shows/game-of-thrones/seasons/1/people?extended=guest_stars
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        cast?: {
                            characters: string[];
                            episode_count: number;
                            person: {
                                name?: string;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        crew?: {
                            production?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            sound?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            "costume & make-up"?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            writing?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            art?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            directing?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                        };
                    } | {
                        cast?: {
                            characters: string[];
                            episode_count: number;
                            person: {
                                name?: string;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        guest_stars?: {
                            characters: string[];
                            episode_count: number;
                            person: {
                                name?: string;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        crew?: {
                            production?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            sound?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            "costume & make-up"?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            writing?: {
                                jobs?: string[];
                                episode_count?: number;
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            art?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            directing?: {
                                jobs: string[];
                                episode_count: number;
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                        };
                    };
                };
            };
        };
    };
    "Get season ratings": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "rating": 9,
                     *       "votes": 3,
                     *       "distribution": {
                     *         "1": 0,
                     *         "2": 0,
                     *         "3": 0,
                     *         "4": 0,
                     *         "5": 0,
                     *         "6": 0,
                     *         "7": 0,
                     *         "8": 0,
                     *         "9": 1,
                     *         "10": 2
                     *       }
                     *     } */
                    "application/json": {
                        rating?: number;
                        votes?: number;
                        distribution?: {
                            1?: number;
                            2?: number;
                            3?: number;
                            4?: number;
                            5?: number;
                            6?: number;
                            7?: number;
                            8?: number;
                            9?: number;
                            10?: number;
                        };
                    };
                };
            };
        };
    };
    "Get season stats": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "watchers": 30521,
                     *       "plays": 37986,
                     *       "collectors": 12899,
                     *       "collected_episodes": 87991,
                     *       "comments": 115,
                     *       "lists": 309,
                     *       "votes": 25655
                     *     } */
                    "application/json": {
                        watchers?: number;
                        plays?: number;
                        collectors?: number;
                        collected_episodes?: number;
                        comments?: number;
                        lists?: number;
                        votes?: number;
                    };
                };
            };
        };
    };
    "Get users watching right now": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "username": "justin",
                     *         "private": false,
                     *         "name": "Justin Nemeth",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "justin"
                     *         }
                     *       },
                     *       {
                     *         "username": "sean",
                     *         "private": false,
                     *         "name": "Sean Rudford",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "sean"
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        username: string;
                        private: boolean;
                        name: string;
                        vip: boolean;
                        vip_ep: boolean;
                        ids: {
                            slug?: string;
                        };
                    }[];
                };
            };
        };
    };
    "Get all videos": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Game Of Thrones - Season 1 Recap - Official HBO UK",
                     *         "url": "https://youtube.com/watch?v=e0Y8KpQpW8c",
                     *         "site": "youtube",
                     *         "type": "recap",
                     *         "size": 1080,
                     *         "official": true,
                     *         "published_at": "2015-05-19T16:31:23.000Z",
                     *         "country": "us",
                     *         "language": "en"
                     *       }
                     *     ] */
                    "application/json": {
                        title?: string;
                        url?: string;
                        site?: string;
                        type?: string;
                        size?: number;
                        official?: boolean;
                        published_at?: string;
                        country?: string;
                        language?: string;
                    }[];
                };
            };
        };
    };
    "Get a single episode for a show": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description episode number
                 * @example 1
                 */
                episode: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /shows/game-of-thrones/seasons/1/episodes/1?extended=full
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "season": 1,
                     *       "number": 1,
                     *       "title": "Winter Is Coming",
                     *       "ids": {
                     *         "trakt": 36440,
                     *         "tvdb": 3254641,
                     *         "imdb": "tt1480055",
                     *         "tmdb": 63056
                     *       }
                     *     } */
                    "application/json": {
                        season?: number;
                        number?: number;
                        title?: string;
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    };
                };
            };
        };
    };
    "Get all episode translations": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description episode number
                 * @example 1
                 */
                episode: number;
                /**
                 * @description 2 character language code
                 * @example es
                 */
                language: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Winter Is Coming",
                     *         "overview": "Jon Arryn, the Hand of the King, is dead. King Robert Baratheon plans to ask his oldest friend, Eddard Stark, to take Jon's place. Across the sea, Viserys Targaryen plans to wed his sister to a nomadic warlord in exchange for an army.",
                     *         "language": "en",
                     *         "country": "us"
                     *       },
                     *       {
                     *         "title": "Se acerca el invierno",
                     *         "overview": "El Lord Ned Stark está preocupado por los perturbantes reportes de un desertor del Nights Watch; El Rey Robert y los Lannisters llegan a Winterfell; el exiliado Viserys Targaryen forja una nueva y poderosa alianza.",
                     *         "language": "es",
                     *         "country": "es"
                     *       },
                     *       {
                     *         "title": "凛冬将至",
                     *         "overview": "一名守夜人军团的逃兵在临冬城外被抓获，领主艾德（奈德）·史塔克下令将其处斩。奈德对绝境长城之外的形势忧心忡忡。行刑结束后，奈德回到城中，他的夫人凯特琳带来一个令人震惊的消息：奈德的良师益友、现任首相琼恩·艾林在都城离奇死亡，罗伯特国王正启程赶往北方，希望奈德接替琼恩·艾林出任国王之手。与此同时，在狭海对岸的潘托斯，韦赛里斯·坦格利安正计划与多斯拉克游牧民族的一位重要首领卓戈卡奥结盟，凭借多斯拉克人的力量夺回本属于他的铁王座。他妹妹丹妮莉斯的终身幸福成了他手中最重要的筹码。罗伯特国王带着瑟曦·兰尼斯特王后及兰尼斯特家族的重要成员抵达临冬城。他的随行人员包括：王后的弟弟詹姆和提力昂，他们一个英俊潇洒，一个却是侏儒；12岁的乔佛里王子，王位的继承人。奈德无法拒绝国王的盛情邀请，决定南下君临城帮助国王稳定国内局势。就在罗伯特和奈德动身之前，奈德的私生子琼恩·雪诺决定北上黑城堡加盟守夜人军团，对守夜人颇为好奇的提力昂打算和雪诺一同前往。厄运突然降临到奈德的次子布兰身上，奈德和琼恩都被迫推迟了行程。",
                     *         "language": "zh",
                     *         "country": "tw"
                     *       }
                     *     ] */
                    "application/json": {
                        title: string;
                        overview: string;
                        language: string;
                        country: string;
                    }[];
                };
            };
        };
    };
    "Get all episode comments": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description episode number
                 * @example 1
                 */
                episode: number;
                /**
                 * @description how to sort
                 * @example newest
                 */
                sort: "newest" | "oldest" | "likes" | "replies" | "highest" | "lowest" | "plays";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 8,
                     *         "parent_id": 0,
                     *         "created_at": "2011-03-25T22:35:17.000Z",
                     *         "updated_at": "2011-03-25T22:35:17.000Z",
                     *         "comment": "Great episode!",
                     *         "spoiler": false,
                     *         "review": false,
                     *         "replies": 1,
                     *         "likes": 0,
                     *         "user_stats": {
                     *           "rating": 8,
                     *           "play_count": 1,
                     *           "completed_count": 1
                     *         },
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: number;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get lists containing this episode": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description episode number
                 * @example 1
                 */
                episode: number;
                /**
                 * @description Filter for a specific list type
                 * @example personal
                 */
                type: "all" | "personal" | "official" | "watchlists";
                /**
                 * @description How to sort
                 * @example popular
                 */
                sort: "popular" | "likes" | "comments" | "items" | "added" | "updated";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "Incredible Thoughts",
                     *         "description": "How could my brain conceive them?",
                     *         "privacy": "public",
                     *         "share_link": "https://trakt.tv/lists/1337",
                     *         "type": "personal",
                     *         "display_numbers": true,
                     *         "allow_comments": true,
                     *         "sort_by": "rank",
                     *         "sort_how": "asc",
                     *         "created_at": "2014-10-11T17:00:54.000Z",
                     *         "updated_at": "2014-10-11T17:00:54.000Z",
                     *         "item_count": 50,
                     *         "comment_count": 10,
                     *         "likes": 99,
                     *         "ids": {
                     *           "trakt": 1337,
                     *           "slug": "incredible-thoughts"
                     *         },
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get all people for an episode": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description episode number
                 * @example 1
                 */
                episode: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /shows/game-of-thrones/seasons/1/episodes/1/people?extended=guest_stars
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        cast?: {
                            characters: string[];
                            person: {
                                name?: string;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        crew?: {
                            writing?: {
                                jobs: string[];
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            directing?: {
                                jobs?: string[];
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            camera?: {
                                jobs?: string[];
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            editing?: {
                                jobs?: string[];
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                        };
                    } | {
                        cast?: {
                            characters: string[];
                            person: {
                                name?: string;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        guest_stars?: {
                            characters: string[];
                            person: {
                                name?: string;
                                ids?: {
                                    trakt?: number;
                                    slug?: string;
                                    imdb?: string | null;
                                    tmdb?: number;
                                };
                            };
                        }[];
                        crew?: {
                            writing?: {
                                jobs: string[];
                                person: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            directing?: {
                                jobs?: string[];
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            camera?: {
                                jobs?: string[];
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                            editing?: {
                                jobs?: string[];
                                person?: {
                                    name?: string;
                                    ids?: {
                                        trakt?: number;
                                        slug?: string;
                                        imdb?: string;
                                        tmdb?: number;
                                    };
                                };
                            }[];
                        };
                    };
                };
            };
        };
    };
    "Get episode ratings": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description episode number
                 * @example 12
                 */
                episode: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "rating": 9,
                     *       "votes": 3,
                     *       "distribution": {
                     *         "1": 0,
                     *         "2": 0,
                     *         "3": 0,
                     *         "4": 0,
                     *         "5": 0,
                     *         "6": 0,
                     *         "7": 0,
                     *         "8": 0,
                     *         "9": 1,
                     *         "10": 2
                     *       }
                     *     } */
                    "application/json": {
                        rating?: number;
                        votes?: number;
                        distribution?: {
                            1?: number;
                            2?: number;
                            3?: number;
                            4?: number;
                            5?: number;
                            6?: number;
                            7?: number;
                            8?: number;
                            9?: number;
                            10?: number;
                        };
                    };
                };
            };
        };
    };
    "Get episode stats": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description episode number
                 * @example 1
                 */
                episode: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "watchers": 30521,
                     *       "plays": 37986,
                     *       "collectors": 12899,
                     *       "collected_episodes": 87991,
                     *       "comments": 115,
                     *       "lists": 309,
                     *       "votes": 25655
                     *     } */
                    "application/json": {
                        watchers?: number;
                        plays?: number;
                        collectors?: number;
                        collected_episodes?: number;
                        comments?: number;
                        lists?: number;
                        votes?: number;
                    };
                };
            };
        };
    };
    "Get all videos": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Trakt ID, Trakt slug, or IMDB ID
                 * @example game-of-thrones
                 */
                id: string;
                /**
                 * @description season number
                 * @example 1
                 */
                season: number;
                /**
                 * @description episode number
                 * @example 1
                 */
                episode: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "title": "Game of Thrones: Season 1 - Episode 2 Clip #1 (HBO)",
                     *         "url": "https://youtube.com/watch?v=kPrW3Swrp4E",
                     *         "site": "youtube",
                     *         "type": "clip",
                     *         "size": 720,
                     *         "official": true,
                     *         "published_at": "2011-04-21T20:16:51.000Z",
                     *         "country": "us",
                     *         "language": "en"
                     *       }
                     *     ] */
                    "application/json": {
                        title?: string;
                        url?: string;
                        site?: string;
                        type?: string;
                        size?: number;
                        official?: boolean;
                        published_at?: string;
                        country?: string;
                        language?: string;
                    }[];
                };
            };
        };
    };
    "Get last activity": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "all": "2014-11-20T07:01:32.000Z",
                     *       "movies": {
                     *         "watched_at": "2014-11-19T21:42:41.000Z",
                     *         "collected_at": "2014-11-20T06:51:30.000Z",
                     *         "rated_at": "2014-11-19T18:32:29.000Z",
                     *         "watchlisted_at": "2014-11-19T21:42:41.000Z",
                     *         "favorited_at": "2014-11-19T21:42:41.000Z",
                     *         "commented_at": "2014-11-20T06:51:30.000Z",
                     *         "paused_at": "2014-11-20T06:51:30.000Z",
                     *         "hidden_at": "2016-08-20T06:51:30.000Z"
                     *       },
                     *       "episodes": {
                     *         "watched_at": "2014-11-20T06:51:30.000Z",
                     *         "collected_at": "2014-11-19T22:02:41.000Z",
                     *         "rated_at": "2014-11-20T06:51:30.000Z",
                     *         "watchlisted_at": "2014-11-20T06:51:30.000Z",
                     *         "commented_at": "2014-11-20T06:51:30.000Z",
                     *         "paused_at": "2014-11-20T06:51:30.000Z"
                     *       },
                     *       "shows": {
                     *         "rated_at": "2014-11-19T19:50:58.000Z",
                     *         "watchlisted_at": "2014-11-20T06:51:30.000Z",
                     *         "favorited_at": "2014-11-20T06:51:30.000Z",
                     *         "commented_at": "2014-11-20T06:51:30.000Z",
                     *         "hidden_at": "2016-08-20T06:51:30.000Z",
                     *         "dropped_at": "2025-03-13T01:23:45.000Z"
                     *       },
                     *       "seasons": {
                     *         "rated_at": "2014-11-19T19:54:24.000Z",
                     *         "watchlisted_at": "2014-11-20T06:51:30.000Z",
                     *         "commented_at": "2014-11-20T06:51:30.000Z",
                     *         "hidden_at": "2016-08-20T06:51:30.000Z"
                     *       },
                     *       "comments": {
                     *         "liked_at": "2014-11-20T03:38:09.000Z",
                     *         "blocked_at": "2022-02-22T03:38:09.000Z"
                     *       },
                     *       "lists": {
                     *         "liked_at": "2014-11-20T00:36:48.000Z",
                     *         "updated_at": "2014-11-20T06:52:18.000Z",
                     *         "commented_at": "2014-11-20T06:51:30.000Z"
                     *       },
                     *       "watchlist": {
                     *         "updated_at": "2014-11-20T06:52:18.000Z"
                     *       },
                     *       "favorites": {
                     *         "updated_at": "2014-11-20T06:52:18.000Z"
                     *       },
                     *       "account": {
                     *         "settings_at": "2020-03-04T03:38:09.000Z",
                     *         "followed_at": "2020-03-04T03:38:09.000Z",
                     *         "following_at": "2020-03-04T03:38:09.000Z",
                     *         "pending_at": "2020-03-04T03:38:09.000Z",
                     *         "requested_at": "2022-04-27T03:38:09.000Z"
                     *       },
                     *       "saved_filters": {
                     *         "updated_at": "2022-06-14T06:52:18.000Z"
                     *       },
                     *       "notes": {
                     *         "updated_at": "2023-08-31T17:18:19.000Z"
                     *       }
                     *     } */
                    "application/json": {
                        all?: string;
                        movies?: {
                            watched_at?: string;
                            collected_at?: string;
                            rated_at?: string;
                            watchlisted_at?: string;
                            favorited_at?: string;
                            commented_at?: string;
                            paused_at?: string;
                            hidden_at?: string;
                        };
                        episodes?: {
                            watched_at?: string;
                            collected_at?: string;
                            rated_at?: string;
                            watchlisted_at?: string;
                            commented_at?: string;
                            paused_at?: string;
                        };
                        shows?: {
                            rated_at?: string;
                            watchlisted_at?: string;
                            favorited_at?: string;
                            commented_at?: string;
                            hidden_at?: string;
                            dropped_at?: string;
                        };
                        seasons?: {
                            rated_at?: string;
                            watchlisted_at?: string;
                            commented_at?: string;
                            hidden_at?: string;
                        };
                        comments?: {
                            liked_at?: string;
                            blocked_at?: string;
                        };
                        lists?: {
                            liked_at?: string;
                            updated_at?: string;
                            commented_at?: string;
                        };
                        watchlist?: {
                            updated_at?: string;
                        };
                        favorites?: {
                            updated_at?: string;
                        };
                        account?: {
                            settings_at?: string;
                            followed_at?: string;
                            following_at?: string;
                            pending_at?: string;
                            requested_at?: string;
                        };
                        saved_filters?: {
                            updated_at?: string;
                        };
                        notes?: {
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    "Get playback progress": {
        parameters: {
            query?: {
                /**
                 * @description Starting date.
                 * @example 2016-06-01T00:00:00.000Z
                 */
                start_at?: string;
                /**
                 * @description Ending date.
                 * @example 2016-07-01T23:59:59.000Z
                 */
                end_at?: string;
            };
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example movies */
                type: "movies" | "episodes";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "progress": 10,
                     *         "paused_at": "2015-01-25T22:01:32.000Z",
                     *         "id": 13,
                     *         "type": "movie",
                     *         "movie": {
                     *           "title": "Batman Begins",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "batman-begins-2005",
                     *             "imdb": "tt0372784",
                     *             "tmdb": 272
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "progress": 65.5,
                     *         "paused_at": "2015-01-25T22:01:32.000Z",
                     *         "id": 37,
                     *         "type": "episode",
                     *         "episode": {
                     *           "season": 0,
                     *           "number": 1,
                     *           "title": "Good Cop Bad Cop",
                     *           "ids": {
                     *             "trakt": 1,
                     *             "tvdb": 3859781,
                     *             "imdb": "",
                     *             "tmdb": 62131
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        progress: number;
                        paused_at: string;
                        id: number;
                        type: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Remove a playback item": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description playback ID
                 * @example 13
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get collection": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example movies */
                type: "movies" | "shows";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /sync/collection/shows?extended=metadata
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        collected_at: string;
                        updated_at: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        collected_at: string;
                        updated_at: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        metadata: {
                            media_type?: string;
                            resolution?: string;
                            hdr?: string;
                            audio?: string;
                            audio_channels?: string;
                            "3d"?: boolean;
                        };
                    }[] | {
                        last_collected_at: string;
                        last_updated_at: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        seasons: {
                            number: number;
                            episodes: {
                                number: number;
                                collected_at: string;
                            }[];
                        }[];
                    }[] | {
                        last_collected_at: string;
                        last_updated_at: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        seasons: {
                            number: number;
                            episodes: {
                                number: number;
                                collected_at: string;
                                metadata: {
                                    media_type?: string;
                                    resolution?: string;
                                    hdr?: string;
                                    audio?: string;
                                    audio_channels?: string;
                                    "3d"?: boolean;
                                };
                            }[];
                        }[];
                    }[];
                };
            };
        };
    };
    "Add items to collection": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "collected_at": "2014-09-01T09:10:11.000Z",
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           },
                 *           "media_type": "digital",
                 *           "resolution": "uhd_4k",
                 *           "hdr": "dolby_vision",
                 *           "audio": "dts_ma",
                 *           "audio_channels": "5.1"
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           }
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 3
                 *             }
                 *           ]
                 *         },
                 *         {
                 *           "title": "Mad Men",
                 *           "year": 2007,
                 *           "ids": {
                 *             "trakt": 4,
                 *             "slug": "mad-men",
                 *             "tvdb": 80337,
                 *             "imdb": "tt0804503",
                 *             "tmdb": 1104
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 1,
                 *               "episodes": [
                 *                 {
                 *                   "number": 1,
                 *                   "media_type": "bluray",
                 *                   "resolution": "hd_1080p",
                 *                   "audio": "dolby_digital_plus",
                 *                   "audio_channels": "5.1"
                 *                 },
                 *                 {
                 *                   "number": 2
                 *                 }
                 *               ]
                 *             }
                 *           ]
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "ids": {
                 *             "trakt": 140912,
                 *             "tvdb": 703353,
                 *             "tmdb": 81266
                 *           }
                 *         }
                 *       ],
                 *       "episodes": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1061,
                 *             "tvdb": 1555111,
                 *             "imdb": "tt007404",
                 *             "tmdb": 422183
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        collected_at?: string;
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                        media_type?: string;
                        resolution?: string;
                        hdr?: string;
                        audio?: string;
                        audio_channels?: string;
                    }[];
                    shows?: {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        seasons: {
                            number: number;
                            episodes?: {
                                number: number;
                                media_type?: string;
                                resolution?: string;
                                audio?: string;
                                audio_channels?: string;
                            }[];
                        }[];
                    }[];
                    seasons?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[];
                    episodes?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "added": {
                     *         "movies": 1,
                     *         "episodes": 12
                     *       },
                     *       "updated": {
                     *         "movies": 0,
                     *         "episodes": 0
                     *       },
                     *       "existing": {
                     *         "movies": 0,
                     *         "episodes": 0
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "episodes": []
                     *       }
                     *     } */
                    "application/json": {
                        added?: {
                            movies?: number;
                            episodes?: number;
                        };
                        updated?: {
                            movies?: number;
                            episodes?: number;
                        };
                        existing?: {
                            movies?: number;
                            episodes?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            episodes?: unknown[];
                        };
                    };
                };
            };
        };
    };
    "Remove items from collection": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           }
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           }
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 3
                 *             }
                 *           ]
                 *         },
                 *         {
                 *           "title": "Mad Men",
                 *           "year": 2007,
                 *           "ids": {
                 *             "trakt": 4,
                 *             "slug": "mad-men",
                 *             "tvdb": 80337,
                 *             "imdb": "tt0804503",
                 *             "tmdb": 1104
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 1,
                 *               "episodes": [
                 *                 {
                 *                   "number": 1
                 *                 },
                 *                 {
                 *                   "number": 2
                 *                 }
                 *               ]
                 *             }
                 *           ]
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "ids": {
                 *             "trakt": 140912,
                 *             "tvdb": 703353,
                 *             "tmdb": 81266
                 *           }
                 *         }
                 *       ],
                 *       "episodes": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1061,
                 *             "tvdb": 1555111,
                 *             "imdb": "tt007404",
                 *             "tmdb": 422183
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    shows?: {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        seasons: {
                            number: number;
                            episodes?: {
                                number: number;
                            }[];
                        }[];
                    }[];
                    seasons?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[];
                    episodes?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "deleted": {
                     *         "movies": 1,
                     *         "episodes": 12
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "episodes": []
                     *       }
                     *     } */
                    "application/json": {
                        deleted?: {
                            movies?: number;
                            episodes?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            episodes?: unknown[];
                        };
                    };
                };
            };
        };
    };
    "Get watched": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example movies */
                type: "movies" | "shows";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /sync/watched/shows?extended=noseasons
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        plays: number;
                        last_watched_at: string;
                        last_updated_at: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        plays: number;
                        last_watched_at: string;
                        last_updated_at: string;
                        reset_at?: unknown;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        seasons: {
                            number: number;
                            episodes: {
                                number: number;
                                plays: number;
                                last_watched_at: string;
                            }[];
                        }[];
                    }[] | {
                        plays: number;
                        last_watched_at: string;
                        last_updated_at: string;
                        reset_at: string | null;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get watched history": {
        parameters: {
            query?: {
                /**
                 * @description Starting date.
                 * @example 2016-06-01T00:00:00.000Z
                 */
                start_at?: string;
                /**
                 * @description Ending date.
                 * @example 2016-07-01T23:59:59.000Z
                 */
                end_at?: string;
            };
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example movies */
                type: "movies" | "shows" | "seasons" | "episodes";
                /**
                 * @description Trakt ID for a specific item.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /sync/history/episodes
             *     ``` */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        watched_at: string;
                        action: string;
                        type: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: number;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        id: number;
                        watched_at: string;
                        action: string;
                        type: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        id: number;
                        watched_at: string;
                        action: string;
                        type: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Add items to watched history": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "watched_at": "2014-09-01T09:10:11.000Z",
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           }
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           }
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           },
                 *           "seasons": [
                 *             {
                 *               "watched_at": "2014-09-01T09:10:11.000Z",
                 *               "number": 3
                 *             }
                 *           ]
                 *         },
                 *         {
                 *           "title": "Mad Men",
                 *           "year": 2007,
                 *           "ids": {
                 *             "trakt": 4,
                 *             "slug": "mad-men",
                 *             "tvdb": 80337,
                 *             "imdb": "tt0804503",
                 *             "tmdb": 1104
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 1,
                 *               "episodes": [
                 *                 {
                 *                   "watched_at": "2014-09-01T09:10:11.000Z",
                 *                   "number": 1
                 *                 },
                 *                 {
                 *                   "number": 2
                 *                 }
                 *               ]
                 *             }
                 *           ]
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "watched_at": "2019-01-02T09:10:11.000Z",
                 *           "ids": {
                 *             "trakt": 140912,
                 *             "tvdb": 703353,
                 *             "tmdb": 81266
                 *           }
                 *         }
                 *       ],
                 *       "episodes": [
                 *         {
                 *           "watched_at": "2014-09-01T09:10:11.000Z",
                 *           "ids": {
                 *             "trakt": 1061,
                 *             "tvdb": 1555111,
                 *             "imdb": "tt007404",
                 *             "tmdb": 422183
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        watched_at?: string;
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    shows?: {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        seasons: {
                            watched_at?: string;
                            number: number;
                            episodes?: {
                                watched_at?: string;
                                number: number;
                            }[];
                        }[];
                    }[];
                    seasons?: {
                        watched_at?: string;
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[];
                    episodes?: {
                        watched_at?: string;
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "added": {
                     *         "movies": 2,
                     *         "episodes": 72
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "episodes": []
                     *       }
                     *     } */
                    "application/json": {
                        added?: {
                            movies?: number;
                            episodes?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            episodes?: unknown[];
                        };
                    };
                };
            };
        };
    };
    "Remove items from history": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           }
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           }
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 3
                 *             }
                 *           ]
                 *         },
                 *         {
                 *           "title": "Mad Men",
                 *           "year": 2007,
                 *           "ids": {
                 *             "trakt": 4,
                 *             "slug": "mad-men",
                 *             "tvdb": 80337,
                 *             "imdb": "tt0804503",
                 *             "tmdb": 1104
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 1,
                 *               "episodes": [
                 *                 {
                 *                   "number": 1
                 *                 },
                 *                 {
                 *                   "number": 2
                 *                 }
                 *               ]
                 *             }
                 *           ]
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "ids": {
                 *             "trakt": 140912,
                 *             "tvdb": 703353,
                 *             "tmdb": 81266
                 *           }
                 *         }
                 *       ],
                 *       "episodes": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1061,
                 *             "tvdb": 1555111,
                 *             "imdb": "tt007404",
                 *             "tmdb": 422183
                 *           }
                 *         }
                 *       ],
                 *       "ids": [
                 *         4,
                 *         8,
                 *         15,
                 *         16,
                 *         23,
                 *         42
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    shows?: {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        seasons: {
                            number: number;
                            episodes?: {
                                number: number;
                            }[];
                        }[];
                    }[];
                    seasons?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[];
                    episodes?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    ids?: number[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "deleted": {
                     *         "movies": 2,
                     *         "episodes": 72
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "episodes": [],
                     *         "ids": [
                     *           23,
                     *           42
                     *         ]
                     *       }
                     *     } */
                    "application/json": {
                        deleted?: {
                            movies?: number;
                            episodes?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            episodes?: unknown[];
                            ids?: number[];
                        };
                    };
                };
            };
        };
    };
    "Get ratings": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example movies */
                type: "movies" | "shows" | "seasons" | "episodes" | "all";
                /**
                 * @description Filter for a specific rating.
                 * @example 9
                 */
                rating: "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /sync/ratings/episodes
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rated_at: string;
                        rating: number;
                        type: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rated_at: string;
                        rating: number;
                        type: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rated_at: string;
                        rating: number;
                        type: string;
                        season: {
                            number?: number;
                            ids?: {
                                tvdb?: number;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rated_at: string;
                        rating: number;
                        type: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Add new ratings": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "rated_at": "2014-09-01T09:10:11.000Z",
                 *           "rating": 5,
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           }
                 *         },
                 *         {
                 *           "rating": 10,
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "rating": 10,
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           }
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           },
                 *           "seasons": [
                 *             {
                 *               "rating": 9,
                 *               "number": 3
                 *             }
                 *           ]
                 *         },
                 *         {
                 *           "title": "Mad Men",
                 *           "year": 2007,
                 *           "ids": {
                 *             "trakt": 4,
                 *             "slug": "mad-men",
                 *             "tvdb": 80337,
                 *             "imdb": "tt0804503",
                 *             "tmdb": 1104
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 1,
                 *               "episodes": [
                 *                 {
                 *                   "rating": 8,
                 *                   "number": 1
                 *                 },
                 *                 {
                 *                   "rating": 8,
                 *                   "number": 2
                 *                 }
                 *               ]
                 *             }
                 *           ]
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "rating": 10,
                 *           "ids": {
                 *             "trakt": 140912,
                 *             "tvdb": 703353,
                 *             "tmdb": 81266
                 *           }
                 *         }
                 *       ],
                 *       "episodes": [
                 *         {
                 *           "rating": 7,
                 *           "ids": {
                 *             "trakt": 1061,
                 *             "tvdb": 1555111,
                 *             "imdb": "tt007404",
                 *             "tmdb": 422183
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        rated_at?: string;
                        rating: number;
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    shows?: {
                        rating?: number;
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        seasons: {
                            rating?: number;
                            number: number;
                            episodes?: {
                                rating: number;
                                number: number;
                            }[];
                        }[];
                    }[];
                    seasons?: {
                        rating?: number;
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[];
                    episodes?: {
                        rating?: number;
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "added": {
                     *         "movies": 1,
                     *         "shows": 1,
                     *         "seasons": 1,
                     *         "episodes": 2
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "rating": 10,
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "episodes": []
                     *       }
                     *     } */
                    "application/json": {
                        added?: {
                            movies?: number;
                            shows?: number;
                            seasons?: number;
                            episodes?: number;
                        };
                        not_found?: {
                            movies?: {
                                rating?: number;
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            episodes?: unknown[];
                        };
                    };
                };
            };
        };
    };
    "Remove ratings": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           }
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           }
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 3
                 *             }
                 *           ]
                 *         },
                 *         {
                 *           "title": "Mad Men",
                 *           "year": 2007,
                 *           "ids": {
                 *             "trakt": 4,
                 *             "slug": "mad-men",
                 *             "tvdb": 80337,
                 *             "imdb": "tt0804503",
                 *             "tmdb": 1104
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 1,
                 *               "episodes": [
                 *                 {
                 *                   "number": 1
                 *                 },
                 *                 {
                 *                   "number": 2
                 *                 }
                 *               ]
                 *             }
                 *           ]
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "ids": {
                 *             "trakt": 140912,
                 *             "tvdb": 703353,
                 *             "tmdb": 81266
                 *           }
                 *         }
                 *       ],
                 *       "episodes": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1061,
                 *             "tvdb": 1555111,
                 *             "imdb": "tt007404",
                 *             "tmdb": 422183
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    shows?: {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        seasons: {
                            number: number;
                            episodes?: {
                                number: number;
                            }[];
                        }[];
                    }[];
                    seasons?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[];
                    episodes?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "deleted": {
                     *         "movies": 1,
                     *         "shows": 1,
                     *         "seasons": 1,
                     *         "episodes": 2
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "episodes": []
                     *       }
                     *     } */
                    "application/json": {
                        deleted?: {
                            movies?: number;
                            shows?: number;
                            seasons?: number;
                            episodes?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            episodes?: unknown[];
                        };
                    };
                };
            };
        };
    };
    "Get watchlist": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Filter for a specific item type
                 * @example all
                 */
                type: "all" | "movies" | "shows" | "seasons" | "episodes";
                /**
                 * @description Sort by a specific property
                 * @example rank
                 */
                sort_by: "rank" | "added" | "title" | "released" | "runtime" | "popularity" | "random" | "percentage" | "imdb_rating" | "tmdb_rating" | "rt_tomatometer" | "rt_audience" | "metascore" | "votes" | "imdb_votes" | "tmdb_votes" | "my_rating" | "watched" | "collected";
                /**
                 * @description Sort direction
                 * @example asc
                 */
                sort_how: "asc" | "desc";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /sync/watchlist/episodes
             *     ``` */
            200: {
                headers: {
                    "X-Sort-By"?: string;
                    "X-Sort-How"?: string;
                    "X-List-ID"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: string;
                        type: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: string | null;
                        type: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: unknown;
                        type: string;
                        season: {
                            number?: number;
                            ids?: {
                                tvdb?: number;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: unknown;
                        type: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Update watchlist": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "description": "This is my watchlist!",
                 *       "sort_by": "runtime",
                 *       "sort_how": "desc"
                 *     } */
                "application/json": {
                    description?: string;
                    sort_by?: string;
                    sort_how?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "name": "Watchlist",
                     *       "description": "This is my watchlist!",
                     *       "privacy": "public",
                     *       "share_link": "https://trakt.tv/lists/1",
                     *       "type": "watchlist",
                     *       "display_numbers": false,
                     *       "allow_comments": false,
                     *       "sort_by": "runtime",
                     *       "sort_how": "desc",
                     *       "created_at": "2014-10-11T17:00:54.000Z",
                     *       "updated_at": "2023-10-11T17:00:54.000Z",
                     *       "item_count": 5,
                     *       "comment_count": 0,
                     *       "likes": 0,
                     *       "ids": {
                     *         "trakt": 1,
                     *         "slug": null
                     *       },
                     *       "user": {
                     *         "username": "sean",
                     *         "private": false,
                     *         "name": "Sean Rudford",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "sean"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: unknown;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Add items to watchlist": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           },
                 *           "notes": "One of Chritian Bale's most iconic roles."
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           },
                 *           "notes": "I AM THE DANGER!"
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 3
                 *             }
                 *           ]
                 *         },
                 *         {
                 *           "title": "Mad Men",
                 *           "year": 2007,
                 *           "ids": {
                 *             "trakt": 4,
                 *             "slug": "mad-men",
                 *             "tvdb": 80337,
                 *             "imdb": "tt0804503",
                 *             "tmdb": 1104
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 1,
                 *               "episodes": [
                 *                 {
                 *                   "number": 1
                 *                 },
                 *                 {
                 *                   "number": 2
                 *                 }
                 *               ]
                 *             }
                 *           ]
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "ids": {
                 *             "trakt": 140912,
                 *             "tvdb": 703353,
                 *             "tmdb": 81266
                 *           }
                 *         }
                 *       ],
                 *       "episodes": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1061,
                 *             "tvdb": 1555111,
                 *             "imdb": "tt007404",
                 *             "tmdb": 422183
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                        notes?: string;
                    }[];
                    shows?: {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        notes?: string;
                        seasons: {
                            number: number;
                            episodes?: {
                                number: number;
                            }[];
                        }[];
                    }[];
                    seasons?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[];
                    episodes?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "added": {
                     *         "movies": 1,
                     *         "shows": 1,
                     *         "seasons": 1,
                     *         "episodes": 2
                     *       },
                     *       "existing": {
                     *         "movies": 0,
                     *         "shows": 0,
                     *         "seasons": 0,
                     *         "episodes": 0
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "episodes": []
                     *       },
                     *       "list": {
                     *         "updated_at": "2022-04-27T21:40:41.000Z",
                     *         "item_count": 5
                     *       }
                     *     } */
                    "application/json": {
                        added?: {
                            movies?: number;
                            shows?: number;
                            seasons?: number;
                            episodes?: number;
                        };
                        existing?: {
                            movies?: number;
                            shows?: number;
                            seasons?: number;
                            episodes?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            episodes?: unknown[];
                        };
                        list?: {
                            updated_at?: string;
                            item_count?: number;
                        };
                    };
                };
            };
            420: {
                headers: {
                    "X-Upgrade-URL"?: string;
                    "X-VIP-User"?: string;
                    "X-Account-Limit"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Remove items from watchlist": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           }
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           }
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 3
                 *             }
                 *           ]
                 *         },
                 *         {
                 *           "title": "Mad Men",
                 *           "year": 2007,
                 *           "ids": {
                 *             "trakt": 4,
                 *             "slug": "mad-men",
                 *             "tvdb": 80337,
                 *             "imdb": "tt0804503",
                 *             "tmdb": 1104
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 1,
                 *               "episodes": [
                 *                 {
                 *                   "number": 1
                 *                 },
                 *                 {
                 *                   "number": 2
                 *                 }
                 *               ]
                 *             }
                 *           ]
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "ids": {
                 *             "trakt": 140912,
                 *             "tvdb": 703353,
                 *             "tmdb": 81266
                 *           }
                 *         }
                 *       ],
                 *       "episodes": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1061,
                 *             "tvdb": 1555111,
                 *             "imdb": "tt007404",
                 *             "tmdb": 422183
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    shows?: {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        seasons: {
                            number: number;
                            episodes?: {
                                number: number;
                            }[];
                        }[];
                    }[];
                    seasons?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[];
                    episodes?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "deleted": {
                     *         "movies": 1,
                     *         "shows": 1,
                     *         "seasons": 1,
                     *         "episodes": 2
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "episodes": []
                     *       },
                     *       "list": {
                     *         "updated_at": "2022-04-27T21:40:41.000Z",
                     *         "item_count": 0
                     *       }
                     *     } */
                    "application/json": {
                        deleted?: {
                            movies?: number;
                            shows?: number;
                            seasons?: number;
                            episodes?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            episodes?: unknown[];
                        };
                        list?: {
                            updated_at?: string;
                            item_count?: number;
                        };
                    };
                };
            };
        };
    };
    "Reorder watchlist items": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "rank": [
                 *         923,
                 *         324,
                 *         98768,
                 *         456456,
                 *         345,
                 *         12,
                 *         990
                 *       ]
                 *     } */
                "application/json": {
                    rank?: number[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "updated": 6,
                     *       "skipped_ids": [
                     *         12
                     *       ],
                     *       "list": {
                     *         "updated_at": "2022-04-27T21:40:41.000Z",
                     *         "item_count": 5
                     *       }
                     *     } */
                    "application/json": {
                        updated?: number;
                        skipped_ids?: number[];
                        list?: {
                            updated_at?: string;
                            item_count?: number;
                        };
                    };
                };
            };
        };
    };
    "Update a watchlist item": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description List Item ID
                 * @example 1337
                 */
                list_item_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "notes": "This is a great movie!"
                 *     } */
                "application/json": {
                    notes?: string;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get favorites": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description Filter for a specific item type
                 * @example all
                 */
                type: "all" | "movies" | "shows";
                /**
                 * @description Sort by a specific property
                 * @example rank
                 */
                sort_by: "rank" | "added" | "title" | "released" | "runtime" | "popularity" | "random" | "percentage" | "imdb_rating" | "tmdb_rating" | "rt_tomatometer" | "rt_audience" | "metascore" | "votes" | "imdb_votes" | "tmdb_votes" | "my_rating" | "watched" | "collected";
                /**
                 * @description Sort direction
                 * @example asc
                 */
                sort_how: "asc" | "desc";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /sync/favorites/shows
             *     ``` */
            200: {
                headers: {
                    "X-Sort-By"?: string;
                    "X-Sort-How"?: string;
                    "X-List-ID"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: string;
                        type: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: string;
                        type: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Update favorites": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "description": "These are my favorites!",
                 *       "sort_by": "runtime",
                 *       "sort_how": "desc"
                 *     } */
                "application/json": {
                    description?: string;
                    sort_by?: string;
                    sort_how?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "name": "Favorites",
                     *       "description": "These are my favorites!",
                     *       "privacy": "public",
                     *       "share_link": "https://trakt.tv/lists/2",
                     *       "type": "favorites",
                     *       "display_numbers": false,
                     *       "allow_comments": false,
                     *       "sort_by": "runtime",
                     *       "sort_how": "desc",
                     *       "created_at": "2014-10-11T17:00:54.000Z",
                     *       "updated_at": "2023-10-11T17:00:54.000Z",
                     *       "item_count": 5,
                     *       "comment_count": 0,
                     *       "likes": 0,
                     *       "ids": {
                     *         "trakt": 2,
                     *         "slug": null
                     *       },
                     *       "user": {
                     *         "username": "sean",
                     *         "private": false,
                     *         "name": "Sean Rudford",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "sean"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: unknown;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Add items to favorites": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           },
                 *           "notes": "One of Chritian Bale's most iconic roles."
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           },
                 *           "notes": "I AM THE DANGER!"
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                        notes?: string;
                    }[];
                    shows?: {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        notes?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "added": {
                     *         "movies": 1,
                     *         "shows": 2
                     *       },
                     *       "existing": {
                     *         "movies": 0,
                     *         "shows": 0
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": []
                     *       },
                     *       "list": {
                     *         "updated_at": "2022-04-27T21:40:41.000Z",
                     *         "item_count": 3
                     *       }
                     *     } */
                    "application/json": {
                        added?: {
                            movies?: number;
                            shows?: number;
                        };
                        existing?: {
                            movies?: number;
                            shows?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                        };
                        list?: {
                            updated_at?: string;
                            item_count?: number;
                        };
                    };
                };
            };
        };
    };
    "Remove items from favorites": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           }
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    shows?: {
                        title?: string;
                        year?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "deleted": {
                     *         "movies": 1,
                     *         "shows": 1
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": []
                     *       },
                     *       "list": {
                     *         "updated_at": "2022-04-27T21:40:41.000Z",
                     *         "item_count": 0
                     *       }
                     *     } */
                    "application/json": {
                        deleted?: {
                            movies?: number;
                            shows?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                        };
                        list?: {
                            updated_at?: string;
                            item_count?: number;
                        };
                    };
                };
            };
        };
    };
    "Reorder favorited items": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "rank": [
                 *         923,
                 *         324,
                 *         98768,
                 *         456456,
                 *         345,
                 *         12,
                 *         990
                 *       ]
                 *     } */
                "application/json": {
                    rank?: number[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "updated": 6,
                     *       "skipped_ids": [
                     *         12
                     *       ],
                     *       "list": {
                     *         "updated_at": "2022-04-27T21:40:41.000Z",
                     *         "item_count": 3
                     *       }
                     *     } */
                    "application/json": {
                        updated?: number;
                        skipped_ids?: number[];
                        list?: {
                            updated_at?: string;
                            item_count?: number;
                        };
                    };
                };
            };
        };
    };
    "Update a favorite item": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description List Item ID
                 * @example 1337
                 */
                list_item_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "notes": "This is a great movie!"
                 *     } */
                "application/json": {
                    notes?: string;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Retrieve settings": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "user": {
                     *         "username": "justin",
                     *         "private": false,
                     *         "name": "Justin Nemeth",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "justin",
                     *           "uuid": "b6589fc6ab0dc82cf12099d1c2d40ab994e8410c"
                     *         },
                     *         "joined_at": "2010-09-25T17:49:25.000Z",
                     *         "location": "San Diego, CA",
                     *         "about": "Co-founder of trakt.",
                     *         "gender": "male",
                     *         "age": 32,
                     *         "images": {
                     *           "avatar": {
                     *             "full": "https://secure.gravatar.com/avatar/30c2f0dfbc39e48656f40498aa871e33?r=pg&s=256"
                     *           }
                     *         },
                     *         "vip_og": true,
                     *         "vip_years": 5
                     *       },
                     *       "account": {
                     *         "timezone": "America/Los_Angeles",
                     *         "date_format": "mdy",
                     *         "time_24hr": false,
                     *         "cover_image": "https://walter-r2.trakt.tv/images/movies/000/001/545/fanarts/original/0abb604492.jpg"
                     *       },
                     *       "connections": {
                     *         "facebook": false,
                     *         "twitter": true,
                     *         "mastodon": true,
                     *         "google": true,
                     *         "tumblr": false,
                     *         "medium": false,
                     *         "slack": false,
                     *         "apple": false,
                     *         "dropbox": false,
                     *         "microsoft": false
                     *       },
                     *       "sharing_text": {
                     *         "watching": "I'm watching [item]",
                     *         "watched": "I just watched [item]",
                     *         "rated": "[item] [stars]"
                     *       },
                     *       "limits": {
                     *         "list": {
                     *           "count": 2,
                     *           "item_count": 100
                     *         },
                     *         "watchlist": {
                     *           "item_count": 100
                     *         },
                     *         "favorites": {
                     *           "item_count": 100
                     *         },
                     *         "search": {
                     *           "recent_count": 5
                     *         },
                     *         "collection": {
                     *           "item_count": 100
                     *         },
                     *         "notes": {
                     *           "item_count": 100
                     *         }
                     *       },
                     *       "permissions": {
                     *         "commenting": true,
                     *         "liking": true,
                     *         "following": true
                     *       }
                     *     } */
                    "application/json": {
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                                uuid?: string;
                            };
                            joined_at?: string;
                            location?: string;
                            about?: string;
                            gender?: string;
                            age?: number;
                            images?: {
                                avatar?: {
                                    full?: string;
                                };
                            };
                            vip_og?: boolean;
                            vip_years?: number;
                        };
                        account?: {
                            timezone?: string;
                            date_format?: string;
                            time_24hr?: boolean;
                            cover_image?: string;
                        };
                        connections?: {
                            facebook?: boolean;
                            twitter?: boolean;
                            mastodon?: boolean;
                            google?: boolean;
                            tumblr?: boolean;
                            medium?: boolean;
                            slack?: boolean;
                            apple?: boolean;
                            dropbox?: boolean;
                            microsoft?: boolean;
                        };
                        sharing_text?: {
                            watching?: string;
                            watched?: string;
                            rated?: string;
                        };
                        limits?: {
                            list?: {
                                count?: number;
                                item_count?: number;
                            };
                            watchlist?: {
                                item_count?: number;
                            };
                            favorites?: {
                                item_count?: number;
                            };
                            search?: {
                                recent_count?: number;
                            };
                            collection?: {
                                item_count?: number;
                            };
                            notes?: {
                                item_count?: number;
                            };
                        };
                        permissions?: {
                            commenting?: boolean;
                            liking?: boolean;
                            following?: boolean;
                        };
                    };
                };
            };
        };
    };
    "Get pending following requests": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 3,
                     *         "requested_at": "2014-09-22T04:23:48.000Z",
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        requested_at?: string;
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get follow requests": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 3,
                     *         "requested_at": "2014-09-22T04:23:48.000Z",
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        requested_at?: string;
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Approve follow request": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description ID of the follower request.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "followed_at": "2014-09-22T05:38:54.083Z",
                     *       "user": {
                     *         "username": "sean",
                     *         "private": false,
                     *         "name": "Sean Rudford",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "sean"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        followed_at?: string;
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Deny follow request": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description ID of the follower request.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get saved filters": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example movies */
                section: "movies" | "shows" | "calendars" | "search";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "rank": 1,
                     *         "id": 101,
                     *         "section": "movies",
                     *         "name": "Movies: IMDB + TMDB ratings",
                     *         "path": "/movies/favorited/weekly",
                     *         "query": "imdb_ratings=6.9-10.0&tmdb_ratings=4.2-10.0",
                     *         "updated_at": "2022-06-15T11:15:06.000Z"
                     *       },
                     *       {
                     *         "rank": 2,
                     *         "id": 102,
                     *         "section": "shows",
                     *         "name": "Shows: US + Disney+",
                     *         "path": "/shows/popular",
                     *         "query": "watchnow=disney_plus&countries=us",
                     *         "updated_at": "2022-06-15T12:15:06.000Z"
                     *       },
                     *       {
                     *         "rank": 3,
                     *         "id": 103,
                     *         "section": "calendars",
                     *         "name": "On Netflix",
                     *         "path": "/calendars/my/shows",
                     *         "query": "network_ids=53",
                     *         "updated_at": "2022-06-15T13:15:06.000Z"
                     *       },
                     *       {
                     *         "rank": 4,
                     *         "id": 104,
                     *         "section": "search",
                     *         "name": "Action & Adventure",
                     *         "path": "/search/movie,show",
                     *         "query": "genres=+action,+adventure",
                     *         "updated_at": "2022-06-15T14:15:06.000Z"
                     *       }
                     *     ] */
                    "application/json": {
                        rank: number;
                        id: number;
                        section: string;
                        name: string;
                        path: string;
                        query: string;
                        updated_at: string;
                    }[];
                };
            };
        };
    };
    "Get hidden items": {
        parameters: {
            query?: {
                /** @description Narrow down by element type. */
                type?: "movie" | "show" | "season" | "user";
            };
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example calendar */
                section: "calendar" | "progress_watched" | "progress_watched_reset" | "progress_collected" | "recommendations" | "comments" | "dropped";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "hidden_at": "2015-03-30T23:18:42.000Z",
                     *         "type": "show",
                     *         "show": {
                     *           "title": "Gossip Girl",
                     *           "year": 2007,
                     *           "ids": {
                     *             "trakt": 48,
                     *             "slug": "gossip-girl",
                     *             "tvdb": 80547,
                     *             "imdb": "tt0397442",
                     *             "tmdb": 1395
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "hidden_at": "2015-03-30T23:19:33.000Z",
                     *         "type": "show",
                     *         "show": {
                     *           "title": "Bitten",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 839,
                     *             "slug": "bitten",
                     *             "tvdb": 269550,
                     *             "imdb": "tt2365946",
                     *             "tmdb": 60556
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        hidden_at: string;
                        type: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Add hidden items": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example calendar */
                section: "calendar" | "progress_watched" | "progress_collected" | "recommendations" | "dropped";
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           }
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "hidden_at": "2015-03-30T23:18:42.000Z",
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           }
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 3
                 *             }
                 *           ]
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1337
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    shows?: {
                        hidden_at?: string;
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        seasons?: {
                            number?: number;
                        }[];
                    }[];
                    seasons?: {
                        ids?: {
                            trakt?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "added": {
                     *         "movies": 1,
                     *         "shows": 2,
                     *         "seasons": 2,
                     *         "users": 0
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "users": []
                     *       }
                     *     } */
                    "application/json": {
                        added?: {
                            movies?: number;
                            shows?: number;
                            seasons?: number;
                            users?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            users?: unknown[];
                        };
                    };
                };
            };
        };
    };
    "Remove hidden items": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /** @example calendar */
                section: "calendar" | "progress_watched" | "progress_collected" | "recommendations" | "comments" | "dropped";
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "title": "Batman Begins",
                 *           "year": 2005,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "batman-begins-2005",
                 *             "imdb": "tt0372784",
                 *             "tmdb": 272
                 *           }
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "title": "Breaking Bad",
                 *           "year": 2008,
                 *           "ids": {
                 *             "trakt": 1,
                 *             "slug": "breaking-bad",
                 *             "tvdb": 81189,
                 *             "imdb": "tt0903747",
                 *             "tmdb": 1396
                 *           }
                 *         },
                 *         {
                 *           "title": "The Walking Dead",
                 *           "year": 2010,
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "the-walking-dead",
                 *             "tvdb": 153021,
                 *             "imdb": "tt1520211",
                 *             "tmdb": 1402
                 *           },
                 *           "seasons": [
                 *             {
                 *               "number": 3
                 *             }
                 *           ]
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1337
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        title?: string;
                        year?: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    shows?: {
                        title: string;
                        year: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                        seasons?: {
                            number?: number;
                        }[];
                    }[];
                    seasons?: {
                        ids?: {
                            trakt?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "deleted": {
                     *         "movies": 1,
                     *         "shows": 2,
                     *         "seasons": 2,
                     *         "users": 0
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "users": []
                     *       }
                     *     } */
                    "application/json": {
                        deleted?: {
                            movies?: number;
                            shows?: number;
                            seasons?: number;
                            users?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            users?: unknown[];
                        };
                    };
                };
            };
        };
    };
    "Get user profile": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /users/sean?extended=vip
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        username?: string;
                        private?: boolean;
                        name?: string;
                        vip?: boolean;
                        vip_ep?: boolean;
                        ids?: {
                            slug?: string;
                        };
                    } | {
                        username?: string;
                        private?: boolean;
                        ids?: {
                            slug?: string;
                        };
                    } | {
                        username?: string;
                        private?: boolean;
                        name?: string;
                        vip?: boolean;
                        vip_ep?: boolean;
                        ids?: {
                            slug?: string;
                        };
                        joined_at?: string;
                        location?: string;
                        about?: string;
                        gender?: string;
                        age?: number;
                        images?: {
                            avatar?: {
                                full?: string;
                            };
                        };
                    } | {
                        username?: string;
                        private?: boolean;
                        name?: string;
                        vip?: boolean;
                        vip_ep?: boolean;
                        ids?: {
                            slug?: string;
                        };
                        vip_og?: boolean;
                        vip_years?: number;
                        vip_cover_image?: string;
                    };
                };
            };
        };
    };
    "Get likes": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                type: "comments" | "lists";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /users/sean/likes/lists
             *     ``` */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        liked_at?: string;
                        type?: string;
                        comment?: {
                            id?: number;
                            parent_id?: number;
                            created_at?: string;
                            updated_at?: string;
                            comment?: string;
                            spoiler?: boolean;
                            review?: boolean;
                            replies?: number;
                            likes?: number;
                            user_stats?: {
                                rating?: unknown;
                                play_count?: number;
                                completed_count?: number;
                            };
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                        };
                    }[] | {
                        liked_at?: string;
                        type?: string;
                        comment?: {
                            id?: number;
                            parent_id?: number;
                            created_at?: string;
                            updated_at?: string;
                            comment?: string;
                            spoiler?: boolean;
                            review?: boolean;
                            replies?: number;
                            likes?: number;
                            user_stats?: {
                                rating?: unknown;
                                play_count?: number;
                                completed_count?: number;
                            };
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                        };
                        comment_type?: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        liked_at?: string;
                        type?: string;
                        list?: {
                            name?: string;
                            description?: string;
                            privacy?: string;
                            share_link?: string;
                            display_numbers?: boolean;
                            allow_comments?: boolean;
                            updated_at?: string;
                            item_count?: number;
                            comment_count?: number;
                            likes?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                            };
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get collection": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /** @example movies */
                type: "movies" | "shows";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /users/sean/collection/shows?extended=metadata
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        collected_at: string;
                        updated_at: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        collected_at: string;
                        updated_at: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        metadata: {
                            media_type?: string;
                            resolution?: string;
                            hdr?: string;
                            audio?: string;
                            audio_channels?: string;
                            "3d"?: boolean;
                        };
                    }[] | {
                        last_collected_at: string;
                        last_updated_at: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        seasons: {
                            number: number;
                            episodes: {
                                number: number;
                                collected_at: string;
                            }[];
                        }[];
                    }[] | {
                        last_collected_at: string;
                        last_updated_at: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        seasons: {
                            number: number;
                            episodes: {
                                number: number;
                                collected_at: string;
                                metadata: {
                                    media_type?: string;
                                    resolution?: string;
                                    hdr?: string;
                                    audio?: string;
                                    audio_channels?: string;
                                    "3d"?: boolean;
                                };
                            }[];
                        }[];
                    }[];
                };
            };
        };
    };
    "Get comments": {
        parameters: {
            query?: {
                /**
                 * @description include comment replies
                 * @example false
                 */
                include_replies?: "true" | "false" | "only";
            };
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /** @example all */
                comment_type: "all" | "reviews" | "shouts";
                /** @example all */
                type: "all" | "movies" | "shows" | "seasons" | "episodes" | "lists";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /users/sean/comments
             *     ``` */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "type": "movie",
                     *         "movie": {
                     *           "title": "Batman Begins",
                     *           "year": 2005,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "batman-begins-2005",
                     *             "imdb": "tt0372784",
                     *             "tmdb": 272
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 267,
                     *           "comment": "Great kickoff to a new Batman trilogy!",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-25T00:14:57.000Z",
                     *           "updated_at": "2015-04-25T00:14:57.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 10,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "show",
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 199,
                     *           "comment": "Skyler, I AM THE DANGER.",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-02-18T06:02:30.000Z",
                     *           "updated_at": "2015-02-18T06:02:30.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 10,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "season",
                     *         "season": {
                     *           "number": 1,
                     *           "ids": {
                     *             "trakt": 3958,
                     *             "tvdb": 274431,
                     *             "tmdb": 60394
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Gotham",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 869,
                     *             "slug": "gotham",
                     *             "tvdb": 274431,
                     *             "imdb": "tt3749900",
                     *             "tmdb": 60708
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 220,
                     *           "comment": "Kicking off season 1 for a new Batman show.",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-21T06:53:25.000Z",
                     *           "updated_at": "2015-04-21T06:53:25.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 8,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "episode",
                     *         "episode": {
                     *           "season": 1,
                     *           "number": 1,
                     *           "title": "Jim Gordon",
                     *           "ids": {
                     *             "trakt": 63958,
                     *             "tvdb": 4768720,
                     *             "imdb": "tt3216414",
                     *             "tmdb": 975968
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Gotham",
                     *           "year": 2014,
                     *           "ids": {
                     *             "trakt": 869,
                     *             "slug": "gotham",
                     *             "tvdb": 274431,
                     *             "imdb": "tt3749900",
                     *             "tmdb": 60708
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 229,
                     *           "comment": "Is this the OC?",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2015-04-21T15:42:31.000Z",
                     *           "updated_at": "2015-04-21T15:42:31.000Z",
                     *           "replies": 1,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": 7,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "type": "list",
                     *         "list": {
                     *           "name": "Star Wars",
                     *           "description": "The complete Star Wars saga!",
                     *           "privacy": "public",
                     *           "share_link": "https://trakt.tv/lists/51",
                     *           "display_numbers": false,
                     *           "allow_comments": true,
                     *           "updated_at": "2015-04-22T22:01:39.000Z",
                     *           "item_count": 8,
                     *           "comment_count": 0,
                     *           "likes": 0,
                     *           "ids": {
                     *             "trakt": 51,
                     *             "slug": "star-wars"
                     *           }
                     *         },
                     *         "comment": {
                     *           "id": 268,
                     *           "comment": "May the 4th be with you!",
                     *           "spoiler": false,
                     *           "review": false,
                     *           "parent_id": 0,
                     *           "created_at": "2014-12-08T17:34:51.000Z",
                     *           "updated_at": "2014-12-08T17:34:51.000Z",
                     *           "replies": 0,
                     *           "likes": 0,
                     *           "user_stats": {
                     *             "rating": null,
                     *             "play_count": 1,
                     *             "completed_count": 1
                     *           },
                     *           "user": {
                     *             "username": "justin",
                     *             "private": false,
                     *             "name": "Justin N.",
                     *             "vip": true,
                     *             "vip_ep": false,
                     *             "ids": {
                     *               "slug": "justin"
                     *             }
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        type: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        comment: {
                            id?: number;
                            comment?: string;
                            spoiler?: boolean;
                            review?: boolean;
                            parent_id?: number;
                            created_at?: string;
                            updated_at?: string;
                            replies?: number;
                            likes?: number;
                            user_stats?: {
                                rating?: number | null;
                                play_count?: number;
                                completed_count?: number;
                            };
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                };
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        season?: {
                            number?: number;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                tmdb?: number;
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        list?: {
                            name?: string;
                            description?: string;
                            privacy?: string;
                            share_link?: string;
                            display_numbers?: boolean;
                            allow_comments?: boolean;
                            updated_at?: string;
                            item_count?: number;
                            comment_count?: number;
                            likes?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get notes": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /** @example all */
                type: "all" | "movies" | "shows" | "seasons" | "episodes" | "people" | "history" | "collection" | "ratings";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /users/sean/notes/ratings
             *     ``` */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        attached_to: {
                            type?: string;
                        };
                        type: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        note: {
                            id?: number;
                            notes?: string;
                            privacy?: string;
                            spoiler?: boolean;
                            created_at?: string;
                            updated_at?: string;
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                    trakt?: number;
                                };
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        attached_to?: {
                            type?: string;
                            id?: number;
                        };
                        type?: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        note?: {
                            id?: number;
                            notes?: string;
                            privacy?: string;
                            spoiler?: boolean;
                            created_at?: string;
                            updated_at?: string;
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                    trakt?: number;
                                };
                            };
                        };
                    }[] | {
                        attached_to?: {
                            type?: string;
                        };
                        type?: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        note?: {
                            id?: number;
                            notes?: string;
                            privacy?: string;
                            spoiler?: boolean;
                            created_at?: string;
                            updated_at?: string;
                            user?: {
                                username?: string;
                                private?: boolean;
                                name?: string;
                                vip?: boolean;
                                vip_ep?: boolean;
                                ids?: {
                                    slug?: string;
                                    trakt?: number;
                                };
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get a user's personal lists": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "Star Wars in machete order",
                     *         "description": "Next time you want to introduce someone to Star Wars for the first time, watch the films with them in this order: IV, V, II, III, VI.",
                     *         "privacy": "public",
                     *         "share_link": "https://trakt.tv/lists/55",
                     *         "type": "personal",
                     *         "display_numbers": true,
                     *         "allow_comments": true,
                     *         "sort_by": "rank",
                     *         "sort_how": "asc",
                     *         "created_at": "2014-10-11T17:00:54.000Z",
                     *         "updated_at": "2014-10-11T17:00:54.000Z",
                     *         "item_count": 5,
                     *         "comment_count": 0,
                     *         "likes": 0,
                     *         "ids": {
                     *           "trakt": 55,
                     *           "slug": "star-wars-in-machete-order"
                     *         }
                     *       },
                     *       {
                     *         "name": "Vampires FTW",
                     *         "description": "These suck, but in a good way!",
                     *         "privacy": "link",
                     *         "share_link": "https://trakt.tv/lists/share/83cea6a8252e6ec9cc74e72ce9d8fde7",
                     *         "type": "personal",
                     *         "display_numbers": false,
                     *         "allow_comments": true,
                     *         "sort_by": "rank",
                     *         "sort_how": "asc",
                     *         "created_at": "2014-10-11T17:00:54.000Z",
                     *         "updated_at": "2014-10-11T17:00:54.000Z",
                     *         "item_count": 5,
                     *         "comment_count": 0,
                     *         "likes": 0,
                     *         "ids": {
                     *           "trakt": 52,
                     *           "slug": "vampires-ftw"
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        name: string;
                        description: string;
                        privacy: string;
                        share_link: string;
                        type: string;
                        display_numbers: boolean;
                        allow_comments: boolean;
                        sort_by: string;
                        sort_how: string;
                        created_at: string;
                        updated_at: string;
                        item_count: number;
                        comment_count: number;
                        likes: number;
                        ids: {
                            trakt?: number;
                            slug?: string;
                        };
                    }[];
                };
            };
        };
    };
    "Create personal list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "Star Wars in machete order",
                 *       "description": "Next time you want to introduce someone to Star Wars for the first time, watch the films with them in this order: IV, V, II, III, VI.",
                 *       "privacy": "public",
                 *       "display_numbers": true,
                 *       "allow_comments": true,
                 *       "sort_by": "rank",
                 *       "sort_how": "asc"
                 *     } */
                "application/json": {
                    name?: string;
                    description?: string;
                    privacy?: string;
                    display_numbers?: boolean;
                    allow_comments?: boolean;
                    sort_by?: string;
                    sort_how?: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "name": "Star Wars in machete order",
                     *       "description": "Next time you want to introduce someone to Star Wars for the first time, watch the films with them in this order: IV, V, II, III, VI.",
                     *       "privacy": "public",
                     *       "share_link": "https://trakt.tv/lists/55",
                     *       "type": "personal",
                     *       "display_numbers": true,
                     *       "allow_comments": true,
                     *       "sort_by": "rank",
                     *       "sort_how": "asc",
                     *       "created_at": "2014-10-11T17:00:54.000Z",
                     *       "updated_at": "2014-10-11T17:00:54.000Z",
                     *       "item_count": 0,
                     *       "comment_count": 0,
                     *       "likes": 0,
                     *       "ids": {
                     *         "trakt": 55,
                     *         "slug": "star-wars-in-machete-order"
                     *       }
                     *     } */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                        };
                    };
                };
            };
            420: {
                headers: {
                    "X-Upgrade-URL"?: string;
                    "X-VIP-User"?: string;
                    "X-Account-Limit"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Reorder a user's lists": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "rank": [
                 *         823,
                 *         224,
                 *         88768,
                 *         356456,
                 *         245,
                 *         2,
                 *         890
                 *       ]
                 *     } */
                "application/json": {
                    rank?: number[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "updated": 6,
                     *       "skipped_ids": [
                     *         2
                     *       ]
                     *     } */
                    "application/json": {
                        updated?: number;
                        skipped_ids?: number[];
                    };
                };
            };
        };
    };
    "Get all lists a user can collaborate on": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "name": "Our Favorite Movies",
                     *         "description": "Hey everyone, add your favorite movies we've all enjoyed together over the years!",
                     *         "privacy": "private",
                     *         "share_link": "https://trakt.tv/lists/2612438",
                     *         "type": "personal",
                     *         "display_numbers": false,
                     *         "allow_comments": true,
                     *         "sort_by": "rank",
                     *         "sort_how": "asc",
                     *         "created_at": "2022-02-16T21:48:18.000Z",
                     *         "updated_at": "2022-06-10T21:55:05.000Z",
                     *         "item_count": 6,
                     *         "comment_count": 0,
                     *         "likes": 1,
                     *         "ids": {
                     *           "trakt": 2612438,
                     *           "slug": "our-favorite-movies"
                     *         },
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean",
                     *             "trakt": 2
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                                trakt?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get personal list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Sort-By"?: string;
                    "X-Sort-How"?: string;
                    "X-List-ID"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "name": "Star Wars in machete order",
                     *       "description": "Next time you want to introduce someone to Star Wars for the first time, watch the films with them in this order: IV, V, II, III, VI.",
                     *       "privacy": "public",
                     *       "share_link": "https://trakt.tv/lists/55",
                     *       "type": "personal",
                     *       "display_numbers": true,
                     *       "allow_comments": true,
                     *       "sort_by": "rank",
                     *       "sort_how": "asc",
                     *       "created_at": "2014-10-11T17:00:54.000Z",
                     *       "updated_at": "2014-10-11T17:00:54.000Z",
                     *       "item_count": 5,
                     *       "comment_count": 0,
                     *       "likes": 0,
                     *       "ids": {
                     *         "trakt": 55,
                     *         "slug": "star-wars-in-machete-order"
                     *       },
                     *       "user": {
                     *         "username": "sean",
                     *         "private": false,
                     *         "name": "Sean Rudford",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "sean"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Update personal list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "Star Wars in NEW machete order",
                 *       "privacy": "private",
                 *       "display_numbers": false,
                 *       "sort_by": "rank",
                 *       "sort_how": "asc"
                 *     } */
                "application/json": {
                    name?: string;
                    privacy?: string;
                    display_numbers?: boolean;
                    sort_by?: string;
                    sort_how?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "name": "Star Wars in NEW machete order",
                     *       "description": "Next time you want to introduce someone to Star Wars for the first time, watch the films with them in this order: IV, V, II, III, VI.",
                     *       "privacy": "private",
                     *       "share_link": "https://trakt.tv/lists/55",
                     *       "type": "personal",
                     *       "display_numbers": true,
                     *       "allow_comments": false,
                     *       "sort_by": "rank",
                     *       "sort_how": "asc",
                     *       "created_at": "2014-10-11T17:00:54.000Z",
                     *       "updated_at": "2014-10-11T17:00:54.000Z",
                     *       "item_count": 5,
                     *       "comment_count": 0,
                     *       "likes": 0,
                     *       "ids": {
                     *         "trakt": 55,
                     *         "slug": "star-wars-in-machete-order"
                     *       },
                     *       "user": {
                     *         "username": "sean",
                     *         "private": false,
                     *         "name": "Sean Rudford",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "sean"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        name?: string;
                        description?: string;
                        privacy?: string;
                        share_link?: string;
                        type?: string;
                        display_numbers?: boolean;
                        allow_comments?: boolean;
                        sort_by?: string;
                        sort_how?: string;
                        created_at?: string;
                        updated_at?: string;
                        item_count?: number;
                        comment_count?: number;
                        likes?: number;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Delete a user's personal list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get all users who liked a list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    "X-List-ID"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "liked_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "liked_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        liked_at: string;
                        user: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Like a list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Remove like on a list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get items on a personal list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
                /**
                 * @description Filter for a specific item type
                 * @example movies
                 */
                type: "movie" | "show" | "season" | "episode" | "person";
                /**
                 * @description Sort by a specific property
                 * @example rank
                 */
                sort_by: "rank" | "added" | "title" | "released" | "runtime" | "popularity" | "random" | "percentage" | "imdb_rating" | "tmdb_rating" | "rt_tomatometer" | "rt_audience" | "metascore" | "votes" | "imdb_votes" | "tmdb_votes" | "my_rating" | "watched" | "collected";
                /**
                 * @description Sort direction
                 * @example asc
                 */
                sort_how: "asc" | "desc";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Private-User"?: string;
                    "X-Sort-By"?: string;
                    "X-Sort-How"?: string;
                    "X-List-ID"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "rank": 1,
                     *         "id": 101,
                     *         "listed_at": "2014-06-16T06:07:12.000Z",
                     *         "notes": "You are part of the rebel alliance and a spy!",
                     *         "type": "movie",
                     *         "movie": {
                     *           "title": "Star Wars: Episode IV - A New Hope",
                     *           "year": 1977,
                     *           "ids": {
                     *             "trakt": 12,
                     *             "slug": "star-wars-episode-iv-a-new-hope-1977",
                     *             "imdb": "tt0076759",
                     *             "tmdb": 11
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "rank": 2,
                     *         "id": 102,
                     *         "listed_at": "2014-06-16T06:07:12.000Z",
                     *         "notes": null,
                     *         "type": "show",
                     *         "show": {
                     *           "title": "The Walking Dead",
                     *           "year": 2010,
                     *           "ids": {
                     *             "trakt": 2,
                     *             "slug": "the-walking-dead",
                     *             "tvdb": 153021,
                     *             "imdb": "tt1520211",
                     *             "tmdb": 1402
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "rank": 3,
                     *         "id": 103,
                     *         "listed_at": "2014-06-16T06:07:12.000Z",
                     *         "notes": null,
                     *         "type": "season",
                     *         "season": {
                     *           "number": 1,
                     *           "ids": {
                     *             "tvdb": 30272,
                     *             "tmdb": 3572
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "rank": 4,
                     *         "id": 104,
                     *         "listed_at": "2014-06-17T06:52:03.000Z",
                     *         "notes": null,
                     *         "type": "episode",
                     *         "episode": {
                     *           "season": 0,
                     *           "number": 2,
                     *           "title": "Wedding Day",
                     *           "ids": {
                     *             "trakt": 2,
                     *             "tvdb": 3859791,
                     *             "imdb": null,
                     *             "tmdb": 62133
                     *           }
                     *         },
                     *         "show": {
                     *           "title": "Breaking Bad",
                     *           "year": 2008,
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "breaking-bad",
                     *             "tvdb": 81189,
                     *             "imdb": "tt0903747",
                     *             "tmdb": 1396
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "rank": 5,
                     *         "id": 105,
                     *         "listed_at": "2014-06-17T06:52:03.000Z",
                     *         "notes": null,
                     *         "type": "person",
                     *         "person": {
                     *           "name": "Garrett Hedlund",
                     *           "ids": {
                     *             "trakt": 1,
                     *             "slug": "garrett-hedlund",
                     *             "imdb": "nm1330560",
                     *             "tmdb": 9828
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: string | null;
                        type: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        season?: {
                            number?: number;
                            ids?: {
                                tvdb?: number;
                                tmdb?: number;
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: number;
                            };
                        };
                        person?: {
                            name?: string;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Add items to personal list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1
                 *           },
                 *           "notes": "Amazing movie!"
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1
                 *           }
                 *         },
                 *         {
                 *           "seasons": [
                 *             {
                 *               "number": 1
                 *             }
                 *           ],
                 *           "ids": {
                 *             "trakt": 1
                 *           },
                 *           "notes": "Best season of this show, don't bother watching the rest."
                 *         },
                 *         {
                 *           "seasons": [
                 *             {
                 *               "number": 1,
                 *               "episodes": [
                 *                 {
                 *                   "number": 1
                 *                 },
                 *                 {
                 *                   "number": 2
                 *                 }
                 *               ]
                 *             }
                 *           ],
                 *           "ids": {
                 *             "trakt": 1
                 *           }
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "ids": {
                 *             "trakt": 140912,
                 *             "tvdb": 703353,
                 *             "tmdb": 81266
                 *           }
                 *         }
                 *       ],
                 *       "episodes": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1061,
                 *             "tvdb": 1555111,
                 *             "imdb": "tt007404",
                 *             "tmdb": 422183
                 *           }
                 *         }
                 *       ],
                 *       "people": [
                 *         {
                 *           "name": "Jeff Bridges",
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "jeff-bridges",
                 *             "imdb": "nm0000313",
                 *             "tmdb": 1229
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        ids: {
                            trakt?: number;
                            imdb?: string;
                        };
                        notes?: string;
                    }[];
                    shows?: {
                        ids: {
                            trakt?: number;
                        };
                        seasons: {
                            number: number;
                            episodes?: {
                                number: number;
                            }[];
                        }[];
                        notes?: string;
                    }[];
                    seasons?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[];
                    episodes?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    people?: {
                        name?: string;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "added": {
                     *         "movies": 1,
                     *         "shows": 1,
                     *         "seasons": 1,
                     *         "episodes": 2,
                     *         "people": 1
                     *       },
                     *       "existing": {
                     *         "movies": 0,
                     *         "shows": 0,
                     *         "seasons": 0,
                     *         "episodes": 0,
                     *         "people": 0
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "episodes": [],
                     *         "people": []
                     *       },
                     *       "list": {
                     *         "updated_at": "2022-04-27T21:40:41.000Z",
                     *         "item_count": 6
                     *       }
                     *     } */
                    "application/json": {
                        added?: {
                            movies?: number;
                            shows?: number;
                            seasons?: number;
                            episodes?: number;
                            people?: number;
                        };
                        existing?: {
                            movies?: number;
                            shows?: number;
                            seasons?: number;
                            episodes?: number;
                            people?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            episodes?: unknown[];
                            people?: unknown[];
                        };
                        list?: {
                            updated_at?: string;
                            item_count?: number;
                        };
                    };
                };
            };
            420: {
                headers: {
                    "X-Upgrade-URL"?: string;
                    "X-VIP-User"?: string;
                    "X-Account-Limit"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Remove items from personal list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "movies": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1
                 *           }
                 *         },
                 *         {
                 *           "ids": {
                 *             "imdb": "tt0000111"
                 *           }
                 *         }
                 *       ],
                 *       "shows": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1
                 *           }
                 *         },
                 *         {
                 *           "seasons": [
                 *             {
                 *               "number": 1
                 *             }
                 *           ],
                 *           "ids": {
                 *             "trakt": 1
                 *           }
                 *         },
                 *         {
                 *           "seasons": [
                 *             {
                 *               "number": 1,
                 *               "episodes": [
                 *                 {
                 *                   "number": 1
                 *                 },
                 *                 {
                 *                   "number": 2
                 *                 }
                 *               ]
                 *             }
                 *           ],
                 *           "ids": {
                 *             "trakt": 1
                 *           }
                 *         }
                 *       ],
                 *       "seasons": [
                 *         {
                 *           "ids": {
                 *             "trakt": 140912,
                 *             "tvdb": 703353,
                 *             "tmdb": 81266
                 *           }
                 *         }
                 *       ],
                 *       "episodes": [
                 *         {
                 *           "ids": {
                 *             "trakt": 1061,
                 *             "tvdb": 1555111,
                 *             "imdb": "tt007404",
                 *             "tmdb": 422183
                 *           }
                 *         }
                 *       ],
                 *       "people": [
                 *         {
                 *           "name": "Jeff Bridges",
                 *           "ids": {
                 *             "trakt": 2,
                 *             "slug": "jeff-bridges",
                 *             "imdb": "nm0000313",
                 *             "tmdb": 1229
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    movies?: {
                        ids: {
                            trakt?: number;
                            imdb?: string;
                        };
                    }[];
                    shows?: {
                        ids: {
                            trakt?: number;
                        };
                        seasons: {
                            number: number;
                            episodes?: {
                                number: number;
                            }[];
                        }[];
                    }[];
                    seasons?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            tmdb?: number;
                        };
                    }[];
                    episodes?: {
                        ids?: {
                            trakt?: number;
                            tvdb?: number;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                    people?: {
                        name?: string;
                        ids?: {
                            trakt?: number;
                            slug?: string;
                            imdb?: string;
                            tmdb?: number;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "deleted": {
                     *         "movies": 1,
                     *         "shows": 1,
                     *         "seasons": 1,
                     *         "episodes": 2,
                     *         "people": 1
                     *       },
                     *       "not_found": {
                     *         "movies": [
                     *           {
                     *             "ids": {
                     *               "imdb": "tt0000111"
                     *             }
                     *           }
                     *         ],
                     *         "shows": [],
                     *         "seasons": [],
                     *         "episodes": [],
                     *         "people": []
                     *       },
                     *       "list": {
                     *         "updated_at": "2022-04-27T21:40:41.000Z",
                     *         "item_count": 0
                     *       }
                     *     } */
                    "application/json": {
                        deleted?: {
                            movies?: number;
                            shows?: number;
                            seasons?: number;
                            episodes?: number;
                            people?: number;
                        };
                        not_found?: {
                            movies?: {
                                ids?: {
                                    imdb?: string;
                                };
                            }[];
                            shows?: unknown[];
                            seasons?: unknown[];
                            episodes?: unknown[];
                            people?: unknown[];
                        };
                        list?: {
                            updated_at?: string;
                            item_count?: number;
                        };
                    };
                };
            };
        };
    };
    "Reorder items on a list": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "rank": [
                 *         923,
                 *         324,
                 *         98768,
                 *         456456,
                 *         345,
                 *         12,
                 *         990
                 *       ]
                 *     } */
                "application/json": {
                    rank?: number[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "updated": 6,
                     *       "skipped_ids": [
                     *         12
                     *       ],
                     *       "list": {
                     *         "updated_at": "2022-04-27T21:40:41.000Z",
                     *         "item_count": 6
                     *       }
                     *     } */
                    "application/json": {
                        updated?: number;
                        skipped_ids?: number[];
                        list?: {
                            updated_at?: string;
                            item_count?: number;
                        };
                    };
                };
            };
        };
    };
    "Update a list item": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
                /**
                 * @description List Item ID
                 * @example 1337
                 */
                list_item_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "notes": "This is a great movie!"
                 *     } */
                "application/json": {
                    notes?: string;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get all list comments": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Trakt ID or Trakt slug
                 * @example star-wars-in-machete-order
                 */
                list_id: string;
                /**
                 * @description how to sort
                 * @example newest
                 */
                sort: "newest" | "oldest" | "likes" | "replies";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    "X-List-ID"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 8,
                     *         "parent_id": 0,
                     *         "created_at": "2011-03-25T22:35:17.000Z",
                     *         "updated_at": "2011-03-25T22:35:17.000Z",
                     *         "comment": "Can't wait to watch everything on this epic list!",
                     *         "spoiler": false,
                     *         "review": false,
                     *         "replies": 0,
                     *         "likes": 0,
                     *         "user_stats": {
                     *           "rating": null,
                     *           "play_count": 1,
                     *           "completed_count": 1
                     *         },
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: unknown;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Follow this user": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "approved_at": "2014-11-15T09:41:34.704Z",
                     *       "user": {
                     *         "username": "sean",
                     *         "private": false,
                     *         "name": "Sean Rudford",
                     *         "vip": true,
                     *         "vip_ep": false,
                     *         "ids": {
                     *           "slug": "sean"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        approved_at?: string;
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "Unfollow this user": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get followers": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "followed_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "followed_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        followed_at: string;
                        user: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get following": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "followed_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "followed_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        followed_at: string;
                        user: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get friends": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "friends_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       },
                     *       {
                     *         "friends_at": "2014-09-01T09:10:11.000Z",
                     *         "user": {
                     *           "username": "justin",
                     *           "private": false,
                     *           "name": "Justin Nemeth",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "justin"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        friends_at: string;
                        user: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get watched history": {
        parameters: {
            query?: {
                /**
                 * @description Starting date.
                 * @example 2016-06-01T00:00:00.000Z
                 */
                start_at?: string;
                /**
                 * @description Ending date.
                 * @example 2016-07-01T23:59:59.000Z
                 */
                end_at?: string;
            };
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /** @example movies */
                type: "movies" | "shows" | "seasons" | "episodes";
                /**
                 * @description Trakt ID for a specific item.
                 * @example 123
                 */
                item_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /users/sean/history/episodes
             *     ``` */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        watched_at: string;
                        action: string;
                        type: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: number;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        id: number;
                        watched_at: string;
                        action: string;
                        type: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        id: number;
                        watched_at: string;
                        action: string;
                        type: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: unknown;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get ratings": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /** @example movies */
                type: "movies" | "shows" | "seasons" | "episodes" | "all";
                /**
                 * @description Filter for a specific rating.
                 * @example 9
                 */
                rating: "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /users/sean/ratings/episodes
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rated_at: string;
                        rating: number;
                        type: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rated_at: string;
                        rating: number;
                        type: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rated_at: string;
                        rating: number;
                        type: string;
                        season: {
                            number?: number;
                            ids?: {
                                tvdb?: number;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rated_at: string;
                        rating: number;
                        type: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get watchlist": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Filter for a specific item type
                 * @example all
                 */
                type: "all" | "movies" | "shows" | "seasons" | "episodes";
                /**
                 * @description Sort by a specific property
                 * @example rank
                 */
                sort_by: "rank" | "added" | "title" | "released" | "runtime" | "popularity" | "random" | "percentage" | "imdb_rating" | "tmdb_rating" | "rt_tomatometer" | "rt_audience" | "metascore" | "votes" | "imdb_votes" | "tmdb_votes" | "my_rating" | "watched" | "collected";
                /**
                 * @description Sort direction
                 * @example asc
                 */
                sort_how: "asc" | "desc";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /users/sean/watchlist/episodes
             *     ``` */
            200: {
                headers: {
                    "X-Private-User"?: string;
                    "X-Sort-By"?: string;
                    "X-Sort-How"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: string;
                        type: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: string | null;
                        type: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: unknown;
                        type: string;
                        season: {
                            number?: number;
                            ids?: {
                                tvdb?: number;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: unknown;
                        type: string;
                        episode: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get all favorites comments": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description how to sort
                 * @example newest
                 */
                sort: "newest" | "oldest" | "likes" | "replies";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 8,
                     *         "parent_id": 0,
                     *         "created_at": "2011-03-25T22:35:17.000Z",
                     *         "updated_at": "2011-03-25T22:35:17.000Z",
                     *         "comment": "Can't wait to watch everything on this epic list!",
                     *         "spoiler": false,
                     *         "review": false,
                     *         "replies": 0,
                     *         "likes": 0,
                     *         "user_stats": {
                     *           "rating": null,
                     *           "play_count": 1,
                     *           "completed_count": 1
                     *         },
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: unknown;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get favorites": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. Bearer [access_token]
                 * @example Bearer [access_token]
                 */
                Authorization?: string;
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description Filter for a specific item type
                 * @example all
                 */
                type: "all" | "movies" | "shows" | "seasons" | "episodes";
                /**
                 * @description Sort by a specific property
                 * @example rank
                 */
                sort_by: "rank" | "added" | "title" | "released" | "runtime" | "popularity" | "random" | "percentage" | "imdb_rating" | "tmdb_rating" | "rt_tomatometer" | "rt_audience" | "metascore" | "votes" | "imdb_votes" | "tmdb_votes" | "my_rating" | "watched" | "collected";
                /**
                 * @description Sort direction
                 * @example asc
                 */
                sort_how: "asc" | "desc";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /users/justin/favorites/shows
             *     ``` */
            200: {
                headers: {
                    "X-Sort-By"?: string;
                    "X-Sort-How"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: string;
                        type: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        rank: number;
                        id: number;
                        listed_at: string;
                        notes: string;
                        type: string;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get all favorites comments": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /**
                 * @description how to sort
                 * @example newest
                 */
                sort: "newest" | "oldest" | "likes" | "replies";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Pagination-Page"?: string;
                    "X-Pagination-Limit"?: string;
                    "X-Pagination-Page-Count"?: string;
                    "X-Pagination-Item-Count"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 8,
                     *         "parent_id": 0,
                     *         "created_at": "2011-03-25T22:35:17.000Z",
                     *         "updated_at": "2011-03-25T22:35:17.000Z",
                     *         "comment": "Can't wait to watch everything on this epic list!",
                     *         "spoiler": false,
                     *         "review": false,
                     *         "replies": 0,
                     *         "likes": 0,
                     *         "user_stats": {
                     *           "rating": null,
                     *           "play_count": 1,
                     *           "completed_count": 1
                     *         },
                     *         "user": {
                     *           "username": "sean",
                     *           "private": false,
                     *           "name": "Sean Rudford",
                     *           "vip": true,
                     *           "vip_ep": false,
                     *           "ids": {
                     *             "slug": "sean"
                     *           }
                     *         }
                     *       }
                     *     ] */
                    "application/json": {
                        id?: number;
                        parent_id?: number;
                        created_at?: string;
                        updated_at?: string;
                        comment?: string;
                        spoiler?: boolean;
                        review?: boolean;
                        replies?: number;
                        likes?: number;
                        user_stats?: {
                            rating?: unknown;
                            play_count?: number;
                            completed_count?: number;
                        };
                        user?: {
                            username?: string;
                            private?: boolean;
                            name?: string;
                            vip?: boolean;
                            vip_ep?: boolean;
                            ids?: {
                                slug?: string;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get watching": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Currently watching a `movie`. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        expires_at?: string;
                        started_at?: string;
                        action?: string;
                        type?: string;
                        episode?: {
                            season?: number;
                            number?: number;
                            title?: string;
                            ids?: {
                                trakt?: number;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        show?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    } | {
                        expires_at?: string;
                        started_at?: string;
                        action?: string;
                        type?: string;
                        movie?: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    };
                };
            };
            /** @description Not watching anything. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get watched": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
                /** @example movies */
                type: "movies" | "shows";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ```
             *     /users/sean/watched/shows?extended=noseasons
             *     ``` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        plays: number;
                        last_watched_at: string;
                        last_updated_at: string;
                        movie: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[] | {
                        plays: number;
                        last_watched_at: string;
                        last_updated_at: string;
                        reset_at?: unknown;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                        seasons: {
                            number: number;
                            episodes: {
                                number: number;
                                plays: number;
                                last_watched_at: string;
                            }[];
                        }[];
                    }[] | {
                        plays: number;
                        last_watched_at: string;
                        last_updated_at: string;
                        reset_at: string | null;
                        show: {
                            title?: string;
                            year?: number;
                            ids?: {
                                trakt?: number;
                                slug?: string;
                                tvdb?: number;
                                imdb?: string;
                                tmdb?: number;
                            };
                        };
                    }[];
                };
            };
        };
    };
    "Get stats": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description e.g. 2
                 * @example 2
                 */
                "trakt-api-version"?: string;
                /**
                 * @description e.g. [client_id]
                 * @example [client_id]
                 */
                "trakt-api-key"?: string;
            };
            path: {
                /**
                 * @description User slug
                 * @example sean
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "movies": {
                     *         "plays": 155,
                     *         "watched": 114,
                     *         "minutes": 15650,
                     *         "collected": 933,
                     *         "ratings": 256,
                     *         "comments": 28
                     *       },
                     *       "shows": {
                     *         "watched": 16,
                     *         "collected": 7,
                     *         "ratings": 63,
                     *         "comments": 20
                     *       },
                     *       "seasons": {
                     *         "ratings": 6,
                     *         "comments": 1
                     *       },
                     *       "episodes": {
                     *         "plays": 552,
                     *         "watched": 534,
                     *         "minutes": 17330,
                     *         "collected": 117,
                     *         "ratings": 64,
                     *         "comments": 14
                     *       },
                     *       "network": {
                     *         "friends": 1,
                     *         "followers": 4,
                     *         "following": 11
                     *       },
                     *       "ratings": {
                     *         "total": 389,
                     *         "distribution": {
                     *           "1": 18,
                     *           "2": 1,
                     *           "3": 4,
                     *           "4": 1,
                     *           "5": 10,
                     *           "6": 9,
                     *           "7": 37,
                     *           "8": 37,
                     *           "9": 57,
                     *           "10": 215
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        movies?: {
                            plays?: number;
                            watched?: number;
                            minutes?: number;
                            collected?: number;
                            ratings?: number;
                            comments?: number;
                        };
                        shows?: {
                            watched?: number;
                            collected?: number;
                            ratings?: number;
                            comments?: number;
                        };
                        seasons?: {
                            ratings?: number;
                            comments?: number;
                        };
                        episodes?: {
                            plays?: number;
                            watched?: number;
                            minutes?: number;
                            collected?: number;
                            ratings?: number;
                            comments?: number;
                        };
                        network?: {
                            friends?: number;
                            followers?: number;
                            following?: number;
                        };
                        ratings?: {
                            total?: number;
                            distribution?: {
                                1?: number;
                                2?: number;
                                3?: number;
                                4?: number;
                                5?: number;
                                6?: number;
                                7?: number;
                                8?: number;
                                9?: number;
                                10?: number;
                            };
                        };
                    };
                };
            };
        };
    };
}
