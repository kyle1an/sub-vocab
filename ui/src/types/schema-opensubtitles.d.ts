/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Create a token to authenticate a user. If response code is ```401 Unathorized``` stop sending further requests with the same credentials, login is "expensive" operation.
         *
         *     Request rate limit is 1 request per 1 second.
         *
         *     Further API requests must continue on returned ```base_url``` host, which can have different cache time for search results and different request rate limits. If ```base_url``` equals ```vip-api.opensubtitles.com``` make sure you always send with every request JWT token (if available), otherwise request might fail with 4xx code.
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Logout
         * @description Destroy a user token to end a session. Bearer token is required for this endpoint.
         */
        delete: operations["logout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infos/formats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subtitle Formats
         * @description List subtitle formats recognized by the API
         */
        get: operations["formats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infos/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Languages
         * @description Get the languages information
         */
        get: operations["languages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infos/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * User Informations
         * @description Gather informations about the user authenticated by a bearer token. User information are already sent when user is authenticated, and the remaining downloads is returned with each download, but you can also get these information here.
         */
        get: operations["userinfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discover/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Popular features
         * @description Discover popular features on opensubtitles.com, according to last 30 days downloads.
         */
        get: operations["popular"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discover/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest subtitles
         * @description Lists 60 latest uploaded subtitles
         */
        get: operations["latest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discover/most_downloaded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Most downloaded subtitles
         * @description Discover popular subtitles, according to last 30 days downloads on opensubtitles.com. This list can be filtered by language code or feature type (movie, episode)
         */
        get: operations["most_downloaded"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for features
         * @description With the "query" parameter, search for a Feature from a simple text input. Typically used for a text search or autocomplete.
         *
         *     With an ID, get basic information and subtitles count for a specific title.
         *
         *     With the "query_match" you can define the matched applied to the query:
         *      - "start" is the default behavior, it will query on the first letter entered to offer suggestions
         *      - "word" will return the match on the word, but not always matching the fulll title, for example searching "roma" will return "holiday in roma"
         *      - "exact" will exactly match the title, so here searching for "roma" will only return the movie(s) named "roma"
         *
         *     With the "full_search" you can extend the search to the translations of the title, so "roma" will also return "rome"
         *
         *     <!-- theme: warning -->
         *
         *     > ### Watch Out!
         *     >
         *     > If you create an autocomplete, don't set a too small refresh limit, remember you must not go over 40 requests per 10 seconds!
         */
        get: operations["features"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subtitles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for subtitles
         * @description Find subtitle for a video file. All parameters can be combined following various logics: searching by a specific external id (imdb, tmdb), a file moviehash, or a simple text query.
         *
         *     <!-- theme: warning -->
         *     > Something wrong? Read about [common mistakes and best practices](docs/2-Best-Practices.md).
         *
         *     > Getting no results? Follow HTTP redirects! ```curl --location``` and use verbose mode
         *
         *     > Use ```imdb_id for``` movie or episode. Use ```parent_imdb_id``` for TV Shows
         *
         *
         *
         *     Implement the logic that best fits your needs, keeping in mind the following guidelines:
         *
         *     - If you can obtain the moviehash from the file, please send it along.
         *     - If you possess the ID, whether it's IMDB or TMDB, send it instead of a query, as an ID provides more precision.
         *     - When searching for TV show episodes, it is recommended to send the parent ID, along with the episode and season number for optimal results.  If you have the unique ID of an episode, only send this ID, excluding the episode or season number.
         *     - Include the filename as a query parameter along with the moviehash for improved results. If your filenames are generally irrelevant, such as dynamically generated filenames from a streaming service, there's no need to include them.
         *     - Consider treating parameters as filters rather than additional criteria. If you have a specific ID and send a query with conflicting data, like a wrong year, it could result in fewer matches.
         *     - Explore querying the /features endpoint to gather the exact list of available episodes.
         *     - Keep in mind that this is a collaborative project where subtitles are submitted by users, filtered by admins, and movie/show results are processed through various APIs. Occasionally, errors may occur, and we depend on user feedback to address and rectify them.
         *
         *
         *     > Avoid http redirection by sending request parameters sorted and without default values, and send all queries in lowercase. Remove leading zeroes in ID parameters (IMDB ID, TMDB ID...)
         *
         *     ### Moviehash
         *     If a ```moviehash``` is sent with a request, a ```moviehash_match``` boolean field will be added to the response.
         *
         *     The matching subtitles will always come first in the response.
         *
         *
         *     ### Ordering
         *
         *     <!-- theme: warning -->
         *     > If possible, don't order results, because sorting on server is "expensive, time consuming operation" and also you have much higher chance to get cached result when not using this function.
         *
         *     You can order the results using the ```order_by``` parameter. Ordering is possible on the following fields:
         *     ```language```, ```download_count```, ```new_download_count```, ```hearing_impaired```, ```hd```, ```fps```, ```votes```, ```points```, ```ratings```, ```from_trusted```, ```foreign_parts_only```, ```ai_translated```, ```machine_translated```, ```upload_date```, ```release```, ```comments```
         *
         *     Change the order direction with *order_direction* (asc/desc)
         *
         *     ### Final notes
         *     ```ai_translated``` (default include in search results) subtitles should be much better quality than ```machine_translated``` subtitles (excluded in search results).
         */
        get: operations["subtitles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Download
         * @description Request a download url for a subtitle. Subtitle file in temporary URL will be always in UTF-8 encoding.
         *
         *     <!-- theme: warning -->
         *
         *     > VERY IMPORTANT: In HTTP request must be both headers: ```Api-Key``` and ```Authorization``` stoplight.io doesn't allow to use in shown example both headers
         *
         *
         *     > The download count is calculated on this action, not the file download itself
         *
         *     > IN and OUT FPS must be indicated for subtitle conversions, we want to make sure you know what you are doing, and therefore collected the current FPS from the subtitle search result, or calculated it somehow.
         *
         *     <!-- theme: warning -->
         *
         *     > The download URL is temporary, and cannot be used more than 3 hours, so do not cache it, but you can download the file more than once if needed.
         */
        post: operations["download"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/utilities/guessit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Guessit
         * @description Extracts as much information as possible from a video filename.
         *
         *     It has a very powerful matcher that allows to guess properties from a video using its filename only. This matcher works with both movies and tv shows episodes.
         *
         *     This is a simple implementation of the python guessit library.
         *     https://guessit-io.github.io/guessit/
         *
         *     Find examples of the returned data.
         *     https://guessit-io.github.io/guessit/properties/
         */
        get: operations["guessit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/translation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * AI Translation
         * @description Available translation APIs and Languages
         */
        get: operations["translation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/transcription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * AI Transcription
         * @description Available transcription APIs and languages
         */
        get: operations["transcription"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/translate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * AI Translate
         * @description **Translate** subtitles using AI from one language to another language.
         *     Credits on user account are needed, they can be bought using https://ai.opensubtitles.com
         *
         *     Method is returning
         *     ```
         *     {
         *       "status": "CREATED",
         *       "correlation_id": "67eda18f52e11"
         *     }
         *     ```
         *     Status possible values:
         *     ```
         *     CREATED     -> Initial state`
         *     PENDING     -> procedure is still running
         *     COMPLETED   -> remote procedure call is completed and has a result
         *     ERROR       -> procedure resulted in an error and is not running anymore
         *     TIMEOUT     -> No matching procedure call found before timeout
         *     ```
         *     Using `correlation_id` can check status of job using GET
         *
         */
        post: operations["translate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/transcribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * AI Transcribe
         * @description **Transcribe** media (audio, video) file using AI into subtitles. Max size of file: 100 MB
         *
         *     Credits on user account are needed, they can be bought using https://ai.opensubtitles.com
         *
         *     Method is returning
         *     ```
         *     {
         *       "status": "CREATED",
         *       "correlation_id": "67eda18f52e11"
         *     }
         *     ```
         *     Status possible values:
         *     ```
         *     CREATED     -> Initial state`
         *     PENDING     -> procedure is still running
         *     COMPLETED   -> remote procedure call is completed and has a result
         *     ERROR       -> procedure resulted in an error and is not running anymore
         *     TIMEOUT     -> No matching procedure call found before timeout
         *     ```
         *     Using `correlation_id` can check status of job using GET
         *
         */
        post: operations["transcribe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/translate/{correlation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description correlation_id */
                correlation_id: string;
            };
            cookie?: never;
        };
        /**
         * AI Translate status
         * @description Get status of **translate** job using `correlation_id`
         */
        get: operations["translate-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/transribe/{correlation_id}_copy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description correlation_id */
                correlation_id: string;
            };
            cookie?: never;
        };
        /**
         * AI Transcribe status
         * @description Get status of **transcribe** job using `correlation_id`
         */
        get: operations["transcribe-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Subtitle: {
            id: string;
            type: string;
            attributes: {
                subtitle_id: string;
                language: string;
                download_count: number;
                new_download_count: number;
                hearing_impaired?: boolean;
                hd?: boolean;
                fps?: number;
                votes?: number;
                points?: number;
                ratings?: number;
                from_trusted: boolean;
                foreign_parts_only: boolean;
                ai_translated: boolean;
                machine_translated: boolean;
                upload_date: string;
                release?: string;
                comments?: string;
                legacy_subtitle_id?: number;
                uploader?: {
                    uploader_id?: number;
                    name?: string;
                    rank?: string;
                };
                feature_details: {
                    feature_id: number;
                    feature_type: string;
                    year?: number;
                    title: string;
                    movie_name: string;
                    imdb_id: number;
                    tmdb_id?: number;
                };
                url: string;
                related_links?: Record<string, never>[];
                files: {
                    file_id: number;
                    cd_number?: number;
                    file_name: string;
                    ""?: string;
                }[];
            };
        };
        "Feature-Tvshow": {
            id: string;
            type: string;
            attributes: {
                title: string;
                original_title: string;
                year: string;
                imdb_id: number;
                tmdb_id: number;
                title_aka: Record<string, never>[];
                feature_id: string;
                url: string;
                img_url: string;
                subtitles_counts: {
                    pl: number;
                    en: number;
                    "pt-BR": number;
                    ro: number;
                    nl: number;
                    "pt-PT": number;
                    es: number;
                    he: number;
                    hu: number;
                    el: number;
                    fr: number;
                    tr: number;
                    cs: number;
                    fi: number;
                    ar: number;
                    hr: number;
                    sl: number;
                    bg: number;
                    sr: number;
                    sv: number;
                    de: number;
                    et: number;
                    da: number;
                    bs: number;
                    it: number;
                    mk: number;
                    ru: number;
                    no: number;
                    th: number;
                    vi: number;
                    ja: number;
                    fa: number;
                    "zh-CN": number;
                    ca: number;
                    id: number;
                    sk: number;
                    ko: number;
                    "zh-TW": number;
                };
                subtitles_count: number;
                seasons: {
                    season_number: number;
                    episodes?: {
                        episode_number: number;
                        title: string;
                        feature_id: number;
                        feature_imdb_id: number;
                    }[];
                }[];
            };
        };
        "Feature-Episode": {
            id: string;
            type: string;
            attributes: {
                title: string;
                original_title?: Record<string, never>;
                year: string;
                parent_imdb_id?: Record<string, never>;
                parent_title: string;
                season_number: number;
                episode_number: number;
                imdb_id: number;
                tmdb_id: number;
                title_aka: Record<string, never>[];
                feature_id: string;
                url: string;
                img_url: string;
                subtitles_counts: {
                    pl: number;
                    en: number;
                    "pt-BR": number;
                    es: number;
                    ro: number;
                    nl: number;
                    tr: number;
                    he: number;
                    "pt-PT": number;
                    cs: number;
                    fi: number;
                    hu: number;
                    ar: number;
                    bg: number;
                    fr: number;
                    sl: number;
                    el: number;
                    hr: number;
                    sr: number;
                    et: number;
                    sv: number;
                    th: number;
                    bs: number;
                    da: number;
                    de: number;
                    mk: number;
                    no: number;
                    ru: number;
                };
                subtitles_count: number;
            };
        };
        "Feature-Movie": {
            id: string;
            type: string;
            attributes: {
                title: string;
                original_title: string;
                year: string;
                subtitles_counts: {
                    en: number;
                    "pt-PT": number;
                    fi: number;
                    "pt-BR": number;
                    es: number;
                    ar: number;
                    pl: number;
                    sr: number;
                    id: number;
                    ro: number;
                    "zh-CN": number;
                    nl: number;
                    el: number;
                    hu: number;
                    fr: number;
                    sl: number;
                    tr: number;
                    et: number;
                    bg: number;
                    cs: number;
                    de: number;
                    he: number;
                    it: number;
                    vi: number;
                    hr: number;
                    ko: number;
                    no: number;
                    sv: number;
                    ta: number;
                    eu: number;
                    da: number;
                    fa: number;
                    sk: number;
                    uk: number;
                    "zh-TW": number;
                    bn: number;
                    ka: number;
                    ja: number;
                    lt: number;
                    mk: number;
                    ml: number;
                    ms: number;
                    ru: number;
                    ze: number;
                };
                subtitles_count: number;
                seasons_count: number;
                parent_title: string;
                season_number: number;
                episode_number?: Record<string, never>;
                imdb_id: number;
                tmdb_id: number;
                parent_imdb_id?: Record<string, never>;
                feature_id: string;
                title_aka: Record<string, never>[];
                feature_type: string;
                url: string;
                img_url: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login: {
        parameters: {
            query?: never;
            header: {
                /** @description application/json */
                "Content-Type": string;
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    username: string;
                    password: string;
                };
            };
        };
        responses: {
            /** @description Create session and token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        user: {
                            allowed_translations: number;
                            allowed_downloads: number;
                            /** @example VIP Member */
                            level: string;
                            user_id: number;
                            ext_installed: boolean;
                            vip: boolean;
                        };
                        /**
                         * Format: hostname
                         * @default api.opensubtitles.com
                         * @example api.opensubtitles.com
                         * @enum {string}
                         */
                        base_url: "api.opensubtitles.com" | "vip-api.opensubtitles.com";
                        token: string;
                        status: number;
                    };
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Destroy session and current token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    formats: {
        parameters: {
            query?: never;
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            output_formats: unknown[];
                        };
                    };
                };
            };
        };
    };
    languages: {
        parameters: {
            query?: never;
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get the languages table containing the codes and names used through the API */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            language_code: string;
                            language_name: string;
                        }[];
                    };
                };
            };
        };
    };
    userinfo: {
        parameters: {
            query?: never;
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get user data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            allowed_downloads: number;
                            level: string;
                            user_id: number;
                            ext_installed: boolean;
                            vip: boolean;
                            downloads_count: number;
                            remaining_downloads: number;
                        };
                    };
                };
            };
        };
    };
    popular: {
        parameters: {
            query?: {
                /** @description Language code, 1 language per query, or "all" */
                language?: string;
                /** @description Type (movie or tvshow) */
                type?: string;
            };
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subtitle"];
                };
            };
        };
    };
    latest: {
        parameters: {
            query?: {
                /** @description Language code, 1 language per query, or "all" */
                language?: string;
                /** @description Type (movie or tvshow) */
                type?: string;
            };
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_pages: number;
                        total_count: number;
                        page: number;
                        data: {
                            id: string;
                            type: string;
                            attributes?: {
                                subtitle_id: string;
                                language: string;
                                download_count: number;
                                new_download_count: number;
                                hearing_impaired: boolean;
                                hd: boolean;
                                format?: Record<string, never>;
                                fps: number;
                                votes: number;
                                points: number;
                                ratings: number;
                                from_trusted: boolean;
                                foreign_parts_only: boolean;
                                ai_translated: boolean;
                                machine_translated?: Record<string, never>;
                                upload_date: string;
                                release: string;
                                comments: string;
                                legacy_subtitle_id: number;
                                uploader: {
                                    uploader_id: number;
                                    name: string;
                                    rank: string;
                                };
                                feature_details: {
                                    feature_id: number;
                                    feature_type: string;
                                    year: number;
                                    title: string;
                                    movie_name: string;
                                    imdb_id: number;
                                    tmdb_id?: Record<string, never>;
                                };
                                url: string;
                                related_links: {
                                    label: string;
                                    url: string;
                                    img_url: string;
                                };
                                files: {
                                    file_id: number;
                                    cd_number: number;
                                    file_name: string;
                                }[];
                            };
                        }[];
                    };
                };
            };
        };
    };
    most_downloaded: {
        parameters: {
            query?: {
                /** @description Language code, 1 language per query, or "all" */
                language?: string;
                /** @description Type (movie or tvshow) */
                type?: string;
            };
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lists most downloaded movie subtitles  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_pages: number;
                        total_count: number;
                        page: number;
                        data: components["schemas"]["Subtitle"][];
                    };
                };
            };
        };
    };
    features: {
        parameters: {
            query?: {
                /** @description query to search, release/file name accepted */
                query?: string;
                /** @description empty to list all or **movie**, **tvshow** or **episode**. */
                type?: string;
                /** @description opensubtitles **feature_id** */
                feature_id?: number;
                /** @description IMDB ID, delete leading zeroes */
                imdb_id?: string;
                /** @description TheMovieDB ID - combine with type to avoid errors */
                tmdb_id?: string;
                /** @description Filter by year. Can only be used in combination with a query */
                year?: number;
                /** @description Type of matching applied to the query: **start** (default), **word**, **exact**   */
                query_match?: string;
                /** @description Search on original title and title aka (translations) (default false) */
                full_search?: boolean;
            };
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search for a feature */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        movie?: components["schemas"]["Feature-Movie"];
                        episode?: components["schemas"]["Feature-Episode"];
                        tv?: components["schemas"]["Feature-Tvshow"];
                    };
                };
            };
        };
    };
    subtitles: {
        parameters: {
            query?: {
                /** @description ID of the movie or episode */
                id?: number;
                /** @description IMDB ID of the movie or episode */
                imdb_id?: number;
                /** @description TMDB ID of the movie or episode */
                tmdb_id?: number;
                /** @description movie, episode or all, (default: all)  */
                type?: string;
                /** @description file name or text search */
                query?: string;
                /** @description Language code(s), comma separated, sorted in alphabetical order (en,fr) */
                languages?: string;
                /** @description Moviehash of the moviefile */
                moviehash?: string;
                /** @description To be used alone - for user uploads listing */
                uploader_id?: number;
                /** @description include, exclude, only. (default: include) */
                hearing_impaired?: string;
                /** @description exclude, include, only (default: include) */
                foreign_parts_only?: string;
                /** @description include, only (default: include) */
                trusted_sources?: string;
                /** @description exclude, include  (default: exclude) */
                machine_translated?: string;
                /** @description exclude, include  (default: include) */
                ai_translated?: string;
                /** @description Order of the returned results, accept any of above fields */
                order_by?: string;
                /** @description Order direction of the returned results (asc,desc) */
                order_direction?: string;
                /** @description For Tvshows */
                parent_feature_id?: number;
                /** @description For Tvshows */
                parent_imdb_id?: number;
                /** @description For Tvshows */
                parent_tmdb_id?: number;
                /** @description For Tvshows
                 *      */
                season_number?: number;
                /** @description For Tvshows */
                episode_number?: number;
                /** @description Filter by movie/episode year */
                year?: number;
                /** @description include, only (default: include) */
                moviehash_match?: string;
                /** @description Results page to display */
                page?: number;
            };
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    download: {
        parameters: {
            query?: never;
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int32
                     * @description file_id from /subtitles search results
                     * @example 123
                     */
                    file_id: number;
                    /** @description from /infos/formats */
                    sub_format?: string;
                    /** @description desired file name */
                    file_name?: string;
                    /** @description used for conversions, in_fps and out_fps must then be indicated */
                    in_fps?: number;
                    /** @description used for conversions, in_fps and out_fps must then be indicated */
                    out_fps?: number;
                    /** @description delay to add or remove to the subtitle, + or - value, in seconds, i.e. 2.5s or -1s  */
                    timeshift?: number;
                    /** @description (1/0) set subtitle file headers to "application/force-download" */
                    force_download?: boolean;
                };
            };
        };
        responses: {
            /** @description Request a download URL for a subtitle.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        link: string;
                        file_name: string;
                        requests: number;
                        remaining: number;
                        message: string;
                        reset_time: string;
                        reset_time_utc: string;
                    };
                };
            };
        };
    };
    guessit: {
        parameters: {
            query?: {
                /** @description File name */
                filename?: string;
            };
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        title: string;
                        year: number;
                        language: string;
                        subtitle_language: string;
                        screen_size: string;
                        streaming_service: string;
                        source: string;
                        other: string;
                        audio_codec: string;
                        audio_channels: string;
                        video_codec: string;
                        release_group: string;
                        type: string;
                    };
                };
            };
        };
    };
    translation: {
        parameters: {
            query?: never;
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            name?: string;
                            display_name?: string;
                            description?: string;
                            pricing?: string;
                            reliability?: string;
                            price?: number;
                            languages_supported?: {
                                language_code?: string;
                                language_name?: string;
                            }[];
                        }[];
                    };
                };
            };
        };
    };
    transcription: {
        parameters: {
            query?: never;
            header?: {
                /** @description <<{{APP_NAME}} v{{APP_VERSION}}>> */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            name?: string;
                            display_name?: string;
                            description?: string;
                            pricing?: string;
                            reliability?: string;
                            price?: number;
                            languages_supported?: {
                                language_code?: string;
                                language_name?: string;
                            }[];
                        }[];
                    };
                };
            };
        };
    };
    translate: {
        parameters: {
            query: {
                /** @description translation_apis */
                api: string;
                /** @description file contents to translate */
                file: string;
                /** @description language ISO639 translate_from (auto is default) */
                translate_from?: string;
                /** @description language ISO639 translate_from */
                translate_to: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "multipart/form-data": Record<string, never>;
                };
            };
        };
    };
    transcribe: {
        parameters: {
            query: {
                /** @description transcribe API */
                api: string;
                /** @description media file */
                file: string;
                /** @description language of media file */
                language: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "multipart/form-data": Record<string, never>;
                };
            };
        };
    };
    "translate-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description correlation_id */
                correlation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "transcribe-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description correlation_id */
                correlation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
